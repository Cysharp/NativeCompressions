/* automatically generated by rust-bindgen 0.64.0 */

pub const LZ4_HEAPMODE: u32 = 0;
pub const LZ4_ACCELERATION_DEFAULT: u32 = 1;
pub const LZ4_ACCELERATION_MAX: u32 = 65537;
pub const LZ4_SRC_INCLUDED: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const LZ4_FREESTANDING: u32 = 0;
pub const LZ4_VERSION_MAJOR: u32 = 1;
pub const LZ4_VERSION_MINOR: u32 = 9;
pub const LZ4_VERSION_RELEASE: u32 = 4;
pub const LZ4_VERSION_NUMBER: u32 = 10904;
pub const LZ4_MEMORY_USAGE_MIN: u32 = 10;
pub const LZ4_MEMORY_USAGE_DEFAULT: u32 = 14;
pub const LZ4_MEMORY_USAGE_MAX: u32 = 20;
pub const LZ4_MEMORY_USAGE: u32 = 14;
pub const LZ4_MAX_INPUT_SIZE: u32 = 2113929216;
pub const LZ4_DISTANCE_MAX: u32 = 65535;
pub const LZ4_COMPRESS_INPLACE_MARGIN: u32 = 65567;
pub const LZ4_HASHLOG: u32 = 12;
pub const LZ4_HASHTABLESIZE: u32 = 16384;
pub const LZ4_HASH_SIZE_U32: u32 = 4096;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const LZ4_STREAM_MINSIZE: u32 = 16416;
pub const LZ4_STREAMDECODE_MINSIZE: u32 = 32;
pub const _HAS_ARM64_LOAD_ACQUIRE: u32 = 1;
pub const _JBLEN: u32 = 16;
pub const _HEAP_MAXREQ: i32 = -32;
pub const _HEAPEMPTY: i32 = -1;
pub const _HEAPOK: i32 = -2;
pub const _HEAPBADBEGIN: i32 = -3;
pub const _HEAPBADNODE: i32 = -4;
pub const _HEAPEND: i32 = -5;
pub const _HEAPBADPTR: i32 = -6;
pub const _FREEENTRY: u32 = 0;
pub const _USEDENTRY: u32 = 1;
pub const _ALLOCA_S_THRESHOLD: u32 = 1024;
pub const _ALLOCA_S_STACK_MARKER: u32 = 52428;
pub const _ALLOCA_S_HEAP_MARKER: u32 = 56797;
pub const _ALLOCA_S_MARKER_SIZE: u32 = 16;
pub const _MM_HINT_NTA: u32 = 0;
pub const _MM_HINT_T0: u32 = 1;
pub const _MM_HINT_T1: u32 = 2;
pub const _MM_HINT_T2: u32 = 3;
pub const _MM_HINT_ENTA: u32 = 4;
pub const _MM_HINT_IT0: u32 = 7;
pub const _MM_HINT_IT1: u32 = 6;
pub const _MM_EXCEPT_MASK: u32 = 63;
pub const _MM_EXCEPT_INVALID: u32 = 1;
pub const _MM_EXCEPT_DENORM: u32 = 2;
pub const _MM_EXCEPT_DIV_ZERO: u32 = 4;
pub const _MM_EXCEPT_OVERFLOW: u32 = 8;
pub const _MM_EXCEPT_UNDERFLOW: u32 = 16;
pub const _MM_EXCEPT_INEXACT: u32 = 32;
pub const _MM_MASK_MASK: u32 = 8064;
pub const _MM_MASK_INVALID: u32 = 128;
pub const _MM_MASK_DENORM: u32 = 256;
pub const _MM_MASK_DIV_ZERO: u32 = 512;
pub const _MM_MASK_OVERFLOW: u32 = 1024;
pub const _MM_MASK_UNDERFLOW: u32 = 2048;
pub const _MM_MASK_INEXACT: u32 = 4096;
pub const _MM_ROUND_MASK: u32 = 24576;
pub const _MM_ROUND_NEAREST: u32 = 0;
pub const _MM_ROUND_DOWN: u32 = 8192;
pub const _MM_ROUND_UP: u32 = 16384;
pub const _MM_ROUND_TOWARD_ZERO: u32 = 24576;
pub const _MM_FLUSH_ZERO_MASK: u32 = 32768;
pub const _MM_FLUSH_ZERO_ON: u32 = 32768;
pub const _MM_FLUSH_ZERO_OFF: u32 = 0;
pub const _MM_DENORMALS_ZERO_MASK: u32 = 64;
pub const _MM_DENORMALS_ZERO_ON: u32 = 64;
pub const _MM_DENORMALS_ZERO_OFF: u32 = 0;
pub const _MM_FROUND_TO_NEAREST_INT: u32 = 0;
pub const _MM_FROUND_TO_NEG_INF: u32 = 1;
pub const _MM_FROUND_TO_POS_INF: u32 = 2;
pub const _MM_FROUND_TO_ZERO: u32 = 3;
pub const _MM_FROUND_CUR_DIRECTION: u32 = 4;
pub const _MM_FROUND_RAISE_EXC: u32 = 0;
pub const _MM_FROUND_NO_EXC: u32 = 8;
pub const _MM_FROUND_NINT: u32 = 0;
pub const _MM_FROUND_FLOOR: u32 = 1;
pub const _MM_FROUND_CEIL: u32 = 2;
pub const _MM_FROUND_TRUNC: u32 = 3;
pub const _MM_FROUND_RINT: u32 = 4;
pub const _MM_FROUND_NEARBYINT: u32 = 12;
pub const _SIDD_UBYTE_OPS: u32 = 0;
pub const _SIDD_UWORD_OPS: u32 = 1;
pub const _SIDD_SBYTE_OPS: u32 = 2;
pub const _SIDD_SWORD_OPS: u32 = 3;
pub const _SIDD_CMP_EQUAL_ANY: u32 = 0;
pub const _SIDD_CMP_RANGES: u32 = 4;
pub const _SIDD_CMP_EQUAL_EACH: u32 = 8;
pub const _SIDD_CMP_EQUAL_ORDERED: u32 = 12;
pub const _SIDD_POSITIVE_POLARITY: u32 = 0;
pub const _SIDD_NEGATIVE_POLARITY: u32 = 16;
pub const _SIDD_MASKED_POSITIVE_POLARITY: u32 = 32;
pub const _SIDD_MASKED_NEGATIVE_POLARITY: u32 = 48;
pub const _SIDD_LEAST_SIGNIFICANT: u32 = 0;
pub const _SIDD_MOST_SIGNIFICANT: u32 = 64;
pub const _SIDD_BIT_MASK: u32 = 0;
pub const _SIDD_UNIT_MASK: u32 = 64;
pub const _CMP_EQ_OQ: u32 = 0;
pub const _CMP_LT_OS: u32 = 1;
pub const _CMP_LE_OS: u32 = 2;
pub const _CMP_UNORD_Q: u32 = 3;
pub const _CMP_NEQ_UQ: u32 = 4;
pub const _CMP_NLT_US: u32 = 5;
pub const _CMP_NLE_US: u32 = 6;
pub const _CMP_ORD_Q: u32 = 7;
pub const _CMP_EQ_UQ: u32 = 8;
pub const _CMP_NGE_US: u32 = 9;
pub const _CMP_NGT_US: u32 = 10;
pub const _CMP_FALSE_OQ: u32 = 11;
pub const _CMP_NEQ_OQ: u32 = 12;
pub const _CMP_GE_OS: u32 = 13;
pub const _CMP_GT_OS: u32 = 14;
pub const _CMP_TRUE_UQ: u32 = 15;
pub const _CMP_EQ_OS: u32 = 16;
pub const _CMP_LT_OQ: u32 = 17;
pub const _CMP_LE_OQ: u32 = 18;
pub const _CMP_UNORD_S: u32 = 19;
pub const _CMP_NEQ_US: u32 = 20;
pub const _CMP_NLT_UQ: u32 = 21;
pub const _CMP_NLE_UQ: u32 = 22;
pub const _CMP_ORD_S: u32 = 23;
pub const _CMP_EQ_US: u32 = 24;
pub const _CMP_NGE_UQ: u32 = 25;
pub const _CMP_NGT_UQ: u32 = 26;
pub const _CMP_FALSE_OS: u32 = 27;
pub const _CMP_NEQ_OS: u32 = 28;
pub const _CMP_GE_OQ: u32 = 29;
pub const _CMP_GT_OQ: u32 = 30;
pub const _CMP_TRUE_US: u32 = 31;
pub const _XCR_XFEATURE_ENABLED_MASK: u32 = 0;
pub const _XBEGIN_STARTED: i32 = -1;
pub const _XABORT_EXPLICIT: u32 = 1;
pub const _XABORT_RETRY: u32 = 2;
pub const _XABORT_CONFLICT: u32 = 4;
pub const _XABORT_CAPACITY: u32 = 8;
pub const _XABORT_DEBUG: u32 = 16;
pub const _XABORT_NESTED: u32 = 32;
pub const _MM_K0_REG8: u32 = 255;
pub const _MM_K0_REG16: u32 = 65535;
pub const _MM_K0_REG32: u32 = 4294967295;
pub const _MM_K0_REG64: i32 = -1;
pub const _MM_PCOMCTRL_LT: u32 = 0;
pub const _MM_PCOMCTRL_LE: u32 = 1;
pub const _MM_PCOMCTRL_GT: u32 = 2;
pub const _MM_PCOMCTRL_GE: u32 = 3;
pub const _MM_PCOMCTRL_EQ: u32 = 4;
pub const _MM_PCOMCTRL_NEQ: u32 = 5;
pub const _MM_PCOMCTRL_FALSE: u32 = 6;
pub const _MM_PCOMCTRL_TRUE: u32 = 7;
pub const _MM_PERMUTE2_COPY: u32 = 0;
pub const _MM_PERMUTE2_ZEROIF1: u32 = 2;
pub const _MM_PERMUTE2_ZEROIF0: u32 = 3;
pub const LZ4_ALIGN_TEST: u32 = 1;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const ERANGE: u32 = 34;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EAFNOSUPPORT: u32 = 102;
pub const EALREADY: u32 = 103;
pub const EBADMSG: u32 = 104;
pub const ECANCELED: u32 = 105;
pub const ECONNABORTED: u32 = 106;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EIDRM: u32 = 111;
pub const EINPROGRESS: u32 = 112;
pub const EISCONN: u32 = 113;
pub const ELOOP: u32 = 114;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOBUFS: u32 = 119;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTCONN: u32 = 126;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ENOTSOCK: u32 = 128;
pub const ENOTSUP: u32 = 129;
pub const EOPNOTSUPP: u32 = 130;
pub const EOTHER: u32 = 131;
pub const EOVERFLOW: u32 = 132;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EPROTOTYPE: u32 = 136;
pub const ETIME: u32 = 137;
pub const ETIMEDOUT: u32 = 138;
pub const ETXTBSY: u32 = 139;
pub const EWOULDBLOCK: u32 = 140;
pub const _NLSCMPERROR: u32 = 2147483647;
pub const MINMATCH: u32 = 4;
pub const WILDCOPYLENGTH: u32 = 8;
pub const LASTLITERALS: u32 = 5;
pub const MFLIMIT: u32 = 12;
pub const MATCH_SAFEGUARD_DISTANCE: u32 = 12;
pub const FASTLOOP_SAFE_DISTANCE: u32 = 64;
pub const LZ4_DISTANCE_ABSOLUTE_MAX: u32 = 65535;
pub const ML_BITS: u32 = 4;
pub const ML_MASK: u32 = 15;
pub const RUN_BITS: u32 = 4;
pub const RUN_MASK: u32 = 15;
pub const LZ4_FAST_DEC_LOOP: u32 = 1;
pub const LZ4HC_HEAPMODE: u32 = 1;
pub const LZ4HC_CLEVEL_MIN: u32 = 3;
pub const LZ4HC_CLEVEL_DEFAULT: u32 = 9;
pub const LZ4HC_CLEVEL_OPT_MIN: u32 = 10;
pub const LZ4HC_CLEVEL_MAX: u32 = 12;
pub const LZ4HC_DICTIONARY_LOGSIZE: u32 = 16;
pub const LZ4HC_MAXD: u32 = 65536;
pub const LZ4HC_MAXD_MASK: u32 = 65535;
pub const LZ4HC_HASH_LOG: u32 = 15;
pub const LZ4HC_HASHTABLESIZE: u32 = 32768;
pub const LZ4HC_HASH_MASK: u32 = 32767;
pub const LZ4_STREAMHC_MINSIZE: u32 = 262200;
pub const LZ4_OPT_NUM: u32 = 4096;
pub const TRAILING_LITERALS: u32 = 3;
pub const LZ4F_HEAPMODE: u32 = 0;
pub const LZ4F_VERSION: u32 = 100;
pub const LZ4F_HEADER_SIZE_MIN: u32 = 7;
pub const LZ4F_HEADER_SIZE_MAX: u32 = 19;
pub const LZ4F_BLOCK_HEADER_SIZE: u32 = 4;
pub const LZ4F_BLOCK_CHECKSUM_SIZE: u32 = 4;
pub const LZ4F_CONTENT_CHECKSUM_SIZE: u32 = 4;
pub const LZ4F_MAGICNUMBER: u32 = 407708164;
pub const LZ4F_MAGIC_SKIPPABLE_START: u32 = 407710288;
pub const LZ4F_MIN_SIZE_TO_KNOW_HEADER_LENGTH: u32 = 5;
pub const XXHASH_H_5627135585666179: u32 = 1;
pub const XXH_VERSION_MAJOR: u32 = 0;
pub const XXH_VERSION_MINOR: u32 = 6;
pub const XXH_VERSION_RELEASE: u32 = 5;
pub const XXH_VERSION_NUMBER: u32 = 605;
pub const _1BIT: u32 = 1;
pub const _2BITS: u32 = 3;
pub const _3BITS: u32 = 7;
pub const _4BITS: u32 = 15;
pub const _8BITS: u32 = 255;
pub const LZ4F_BLOCKUNCOMPRESSED_FLAG: u32 = 2147483648;
pub const XXH_ACCEPT_NULL_INPUT_POINTER: u32 = 0;
pub const XXH_FORCE_NATIVE_FORMAT: u32 = 0;
pub const XXH_FORCE_ALIGN_CHECK: u32 = 0;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_data_public> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_pointers> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    const UNINIT: ::std::mem::MaybeUninit<_Mbstatet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Wchar) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Byte) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._State) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __threadid() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __threadhandle() -> usize;
}
extern "C" {
    pub fn LZ4_versionNumber() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_versionString() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " LZ4_compress_default() :\n  Compresses 'srcSize' bytes from buffer 'src'\n  into already allocated 'dst' buffer of size 'dstCapacity'.\n  Compression is guaranteed to succeed if 'dstCapacity' >= LZ4_compressBound(srcSize).\n  It also runs faster, so it's a recommended setting.\n  If the function cannot compress 'src' into a more limited 'dst' budget,\n  compression stops *immediately*, and the function result is zero.\n  In which case, 'dst' content is undefined (invalid).\n      srcSize : max supported value is LZ4_MAX_INPUT_SIZE.\n      dstCapacity : size of buffer 'dst' (which must be already allocated)\n     @return  : the number of bytes written into buffer 'dst' (necessarily <= dstCapacity)\n                or 0 if compression fails\n Note : This function is protected against buffer overflow scenarios (never writes outside 'dst' buffer, nor read outside 'source' buffer)."]
    pub fn LZ4_compress_default(
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        srcSize: ::std::os::raw::c_int,
        dstCapacity: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " LZ4_decompress_safe() :\n  compressedSize : is the exact complete size of the compressed block.\n  dstCapacity : is the size of destination buffer (which must be already allocated), presumed an upper bound of decompressed size.\n @return : the number of bytes decompressed into destination buffer (necessarily <= dstCapacity)\n           If destination buffer is not large enough, decoding will stop and output an error code (negative value).\n           If the source stream is detected malformed, the function will stop decoding and return a negative result.\n Note 1 : This function is protected against malicious data packets :\n          it will never writes outside 'dst' buffer, nor read outside 'source' buffer,\n          even if the compressed block is maliciously modified to order the decoder to do these actions.\n          In such case, the decoder stops immediately, and considers the compressed block malformed.\n Note 2 : compressedSize and dstCapacity must be provided to the function, the compressed block does not contain them.\n          The implementation is free to send / store / derive this information in whichever way is most beneficial.\n          If there is a need for a different format which bundles together both compressed data and its metadata, consider looking at lz4frame.h instead."]
    pub fn LZ4_decompress_safe(
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        compressedSize: ::std::os::raw::c_int,
        dstCapacity: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " LZ4_compressBound() :\nProvides the maximum size that LZ4 compression may output in a \"worst case\" scenario (input data not compressible)\nThis function is primarily useful for memory allocation purposes (destination buffer size).\nMacro LZ4_COMPRESSBOUND() is also provided for compilation-time evaluation (stack memory allocation for example).\nNote that LZ4_compress_default() compresses faster when dstCapacity is >= LZ4_compressBound(srcSize)\ninputSize  : max supported value is LZ4_MAX_INPUT_SIZE\nreturn : maximum output size in a \"worst case\" scenario\nor 0, if input size is incorrect (too large or negative)"]
    pub fn LZ4_compressBound(inputSize: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " LZ4_compress_fast() :\nSame as LZ4_compress_default(), but allows selection of \"acceleration\" factor.\nThe larger the acceleration value, the faster the algorithm, but also the lesser the compression.\nIt's a trade-off. It can be fine tuned, with each successive value providing roughly +~3% to speed.\nAn acceleration value of \"1\" is the same as regular LZ4_compress_default()\nValues <= 0 will be replaced by LZ4_ACCELERATION_DEFAULT (currently == 1, see lz4.c).\nValues > LZ4_ACCELERATION_MAX will be replaced by LZ4_ACCELERATION_MAX (currently == 65537, see lz4.c)."]
    pub fn LZ4_compress_fast(
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        srcSize: ::std::os::raw::c_int,
        dstCapacity: ::std::os::raw::c_int,
        acceleration: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " LZ4_compress_fast_extState() :\n  Same as LZ4_compress_fast(), using an externally allocated memory space for its state.\n  Use LZ4_sizeofState() to know how much memory must be allocated,\n  and allocate it on 8-bytes boundaries (using `malloc()` typically).\n  Then, provide this buffer as `void* state` to compression function."]
    pub fn LZ4_sizeofState() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_compress_fast_extState(
        state: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        srcSize: ::std::os::raw::c_int,
        dstCapacity: ::std::os::raw::c_int,
        acceleration: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " LZ4_compress_destSize() :\n  Reverse the logic : compresses as much data as possible from 'src' buffer\n  into already allocated buffer 'dst', of size >= 'targetDestSize'.\n  This function either compresses the entire 'src' content into 'dst' if it's large enough,\n  or fill 'dst' buffer completely with as much data as possible from 'src'.\n  note: acceleration parameter is fixed to \"default\".\n\n *srcSizePtr : will be modified to indicate how many bytes where read from 'src' to fill 'dst'.\n               New value is necessarily <= input value.\n @return : Nb bytes written into 'dst' (necessarily <= targetDestSize)\n           or 0 if compression fails.\n\n Note : from v1.8.2 to v1.9.1, this function had a bug (fixed un v1.9.2+):\n        the produced compressed content could, in specific circumstances,\n        require to be decompressed into a destination buffer larger\n        by at least 1 byte than the content to decompress.\n        If an application uses `LZ4_compress_destSize()`,\n        it's highly recommended to update liblz4 to v1.9.2 or better.\n        If this can't be done or ensured,\n        the receiving decompression function should provide\n        a dstCapacity which is > decompressedSize, by at least 1 byte.\n        See https://github.com/lz4/lz4/issues/859 for details"]
    pub fn LZ4_compress_destSize(
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        srcSizePtr: *mut ::std::os::raw::c_int,
        targetDstSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " LZ4_decompress_safe_partial() :\n  Decompress an LZ4 compressed block, of size 'srcSize' at position 'src',\n  into destination buffer 'dst' of size 'dstCapacity'.\n  Up to 'targetOutputSize' bytes will be decoded.\n  The function stops decoding on reaching this objective.\n  This can be useful to boost performance\n  whenever only the beginning of a block is required.\n\n @return : the number of bytes decoded in `dst` (necessarily <= targetOutputSize)\n           If source stream is detected malformed, function returns a negative result.\n\n  Note 1 : @return can be < targetOutputSize, if compressed block contains less data.\n\n  Note 2 : targetOutputSize must be <= dstCapacity\n\n  Note 3 : this function effectively stops decoding on reaching targetOutputSize,\n           so dstCapacity is kind of redundant.\n           This is because in older versions of this function,\n           decoding operation would still write complete sequences.\n           Therefore, there was no guarantee that it would stop writing at exactly targetOutputSize,\n           it could write more bytes, though only up to dstCapacity.\n           Some \"margin\" used to be required for this operation to work properly.\n           Thankfully, this is no longer necessary.\n           The function nonetheless keeps the same signature, in an effort to preserve API compatibility.\n\n  Note 4 : If srcSize is the exact size of the block,\n           then targetOutputSize can be any value,\n           including larger than the block's decompressed size.\n           The function will, at most, generate block's decompressed size.\n\n  Note 5 : If srcSize is _larger_ than block's compressed size,\n           then targetOutputSize **MUST** be <= block's decompressed size.\n           Otherwise, *silent corruption will occur*."]
    pub fn LZ4_decompress_safe_partial(
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        srcSize: ::std::os::raw::c_int,
        targetOutputSize: ::std::os::raw::c_int,
        dstCapacity: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type LZ4_stream_t = LZ4_stream_u;
extern "C" {
    pub fn LZ4_createStream() -> *mut LZ4_stream_t;
}
extern "C" {
    pub fn LZ4_freeStream(streamPtr: *mut LZ4_stream_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " LZ4_resetStream_fast() : v1.9.0+\n  Use this to prepare an LZ4_stream_t for a new chain of dependent blocks\n  (e.g., LZ4_compress_fast_continue()).\n\n  An LZ4_stream_t must be initialized once before usage.\n  This is automatically done when created by LZ4_createStream().\n  However, should the LZ4_stream_t be simply declared on stack (for example),\n  it's necessary to initialize it first, using LZ4_initStream().\n\n  After init, start any new stream with LZ4_resetStream_fast().\n  A same LZ4_stream_t can be re-used multiple times consecutively\n  and compress multiple streams,\n  provided that it starts each new stream with LZ4_resetStream_fast().\n\n  LZ4_resetStream_fast() is much faster than LZ4_initStream(),\n  but is not compatible with memory regions containing garbage data.\n\n  Note: it's only useful to call LZ4_resetStream_fast()\n        in the context of streaming compression.\n        The *extState* functions perform their own resets.\n        Invoking LZ4_resetStream_fast() before is redundant, and even counterproductive."]
    pub fn LZ4_resetStream_fast(streamPtr: *mut LZ4_stream_t);
}
extern "C" {
    #[doc = " LZ4_loadDict() :\n  Use this function to reference a static dictionary into LZ4_stream_t.\n  The dictionary must remain available during compression.\n  LZ4_loadDict() triggers a reset, so any previous data will be forgotten.\n  The same dictionary will have to be loaded on decompression side for successful decoding.\n  Dictionary are useful for better compression of small data (KB range).\n  While LZ4 accept any input as dictionary,\n  results are generally better when using Zstandard's Dictionary Builder.\n  Loading a size of 0 is allowed, and is the same as reset.\n @return : loaded dictionary size, in bytes (necessarily <= 64 KB)"]
    pub fn LZ4_loadDict(
        streamPtr: *mut LZ4_stream_t,
        dictionary: *const ::std::os::raw::c_char,
        dictSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " LZ4_compress_fast_continue() :\n  Compress 'src' content using data from previously compressed blocks, for better compression ratio.\n 'dst' buffer must be already allocated.\n  If dstCapacity >= LZ4_compressBound(srcSize), compression is guaranteed to succeed, and runs faster.\n\n @return : size of compressed block\n           or 0 if there is an error (typically, cannot fit into 'dst').\n\n  Note 1 : Each invocation to LZ4_compress_fast_continue() generates a new block.\n           Each block has precise boundaries.\n           Each block must be decompressed separately, calling LZ4_decompress_*() with relevant metadata.\n           It's not possible to append blocks together and expect a single invocation of LZ4_decompress_*() to decompress them together.\n\n  Note 2 : The previous 64KB of source data is __assumed__ to remain present, unmodified, at same address in memory !\n\n  Note 3 : When input is structured as a double-buffer, each buffer can have any size, including < 64 KB.\n           Make sure that buffers are separated, by at least one byte.\n           This construction ensures that each block only depends on previous block.\n\n  Note 4 : If input buffer is a ring-buffer, it can have any size, including < 64 KB.\n\n  Note 5 : After an error, the stream status is undefined (invalid), it can only be reset or freed."]
    pub fn LZ4_compress_fast_continue(
        streamPtr: *mut LZ4_stream_t,
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        srcSize: ::std::os::raw::c_int,
        dstCapacity: ::std::os::raw::c_int,
        acceleration: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " LZ4_saveDict() :\n  If last 64KB data cannot be guaranteed to remain available at its current memory location,\n  save it into a safer place (char* safeBuffer).\n  This is schematically equivalent to a memcpy() followed by LZ4_loadDict(),\n  but is much faster, because LZ4_saveDict() doesn't need to rebuild tables.\n @return : saved dictionary size in bytes (necessarily <= maxDictSize), or 0 if error."]
    pub fn LZ4_saveDict(
        streamPtr: *mut LZ4_stream_t,
        safeBuffer: *mut ::std::os::raw::c_char,
        maxDictSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type LZ4_streamDecode_t = LZ4_streamDecode_u;
extern "C" {
    pub fn LZ4_createStreamDecode() -> *mut LZ4_streamDecode_t;
}
extern "C" {
    pub fn LZ4_freeStreamDecode(LZ4_stream: *mut LZ4_streamDecode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " LZ4_setStreamDecode() :\n  An LZ4_streamDecode_t context can be allocated once and re-used multiple times.\n  Use this function to start decompression of a new stream of blocks.\n  A dictionary can optionally be set. Use NULL or size 0 for a reset order.\n  Dictionary is presumed stable : it must remain accessible and unmodified during next decompression.\n @return : 1 if OK, 0 if error"]
    pub fn LZ4_setStreamDecode(
        LZ4_streamDecode: *mut LZ4_streamDecode_t,
        dictionary: *const ::std::os::raw::c_char,
        dictSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " LZ4_decoderRingBufferSize() : v1.8.2+\n  Note : in a ring buffer scenario (optional),\n  blocks are presumed decompressed next to each other\n  up to the moment there is not enough remaining space for next block (remainingSize < maxBlockSize),\n  at which stage it resumes from beginning of ring buffer.\n  When setting such a ring buffer for streaming decompression,\n  provides the minimum size of this ring buffer\n  to be compatible with any source respecting maxBlockSize condition.\n @return : minimum ring buffer size,\n           or 0 if there is an error (invalid maxBlockSize)."]
    pub fn LZ4_decoderRingBufferSize(maxBlockSize: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " LZ4_decompress_*_continue() :\n  These decoding functions allow decompression of consecutive blocks in \"streaming\" mode.\n  A block is an unsplittable entity, it must be presented entirely to a decompression function.\n  Decompression functions only accepts one block at a time.\n  The last 64KB of previously decoded data *must* remain available and unmodified at the memory position where they were decoded.\n  If less than 64KB of data has been decoded, all the data must be present.\n\n  Special : if decompression side sets a ring buffer, it must respect one of the following conditions :\n  - Decompression buffer size is _at least_ LZ4_decoderRingBufferSize(maxBlockSize).\n    maxBlockSize is the maximum size of any single block. It can have any value > 16 bytes.\n    In which case, encoding and decoding buffers do not need to be synchronized.\n    Actually, data can be produced by any source compliant with LZ4 format specification, and respecting maxBlockSize.\n  - Synchronized mode :\n    Decompression buffer size is _exactly_ the same as compression buffer size,\n    and follows exactly same update rule (block boundaries at same positions),\n    and decoding function is provided with exact decompressed size of each block (exception for last block of the stream),\n    _then_ decoding & encoding ring buffer can have any size, including small ones ( < 64 KB).\n  - Decompression buffer is larger than encoding buffer, by a minimum of maxBlockSize more bytes.\n    In which case, encoding and decoding buffers do not need to be synchronized,\n    and encoding ring buffer can have any size, including small ones ( < 64 KB).\n\n  Whenever these conditions are not possible,\n  save the last 64KB of decoded data into a safe buffer where it can't be modified during decompression,\n  then indicate where this data is saved using LZ4_setStreamDecode(), before decompressing next block."]
    pub fn LZ4_decompress_safe_continue(
        LZ4_streamDecode: *mut LZ4_streamDecode_t,
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        srcSize: ::std::os::raw::c_int,
        dstCapacity: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " LZ4_decompress_*_usingDict() :\n  These decoding functions work the same as\n  a combination of LZ4_setStreamDecode() followed by LZ4_decompress_*_continue()\n  They are stand-alone, and don't need an LZ4_streamDecode_t structure.\n  Dictionary is presumed stable : it must remain accessible and unmodified during decompression.\n  Performance tip : Decompression speed can be substantially increased\n                    when dst == dictStart + dictSize."]
    pub fn LZ4_decompress_safe_usingDict(
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        srcSize: ::std::os::raw::c_int,
        dstCapacity: ::std::os::raw::c_int,
        dictStart: *const ::std::os::raw::c_char,
        dictSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_decompress_safe_partial_usingDict(
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        compressedSize: ::std::os::raw::c_int,
        targetOutputSize: ::std::os::raw::c_int,
        maxOutputSize: ::std::os::raw::c_int,
        dictStart: *const ::std::os::raw::c_char,
        dictSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " LZ4_compress_fast_extState_fastReset() :\n  A variant of LZ4_compress_fast_extState().\n\n  Using this variant avoids an expensive initialization step.\n  It is only safe to call if the state buffer is known to be correctly initialized already\n  (see above comment on LZ4_resetStream_fast() for a definition of \"correctly initialized\").\n  From a high level, the difference is that\n  this function initializes the provided state with a call to something like LZ4_resetStream_fast()\n  while LZ4_compress_fast_extState() starts with a call to LZ4_resetStream()."]
    pub fn LZ4_compress_fast_extState_fastReset(
        state: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        srcSize: ::std::os::raw::c_int,
        dstCapacity: ::std::os::raw::c_int,
        acceleration: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " LZ4_attach_dictionary() :\n  This is an experimental API that allows\n  efficient use of a static dictionary many times.\n\n  Rather than re-loading the dictionary buffer into a working context before\n  each compression, or copying a pre-loaded dictionary's LZ4_stream_t into a\n  working LZ4_stream_t, this function introduces a no-copy setup mechanism,\n  in which the working stream references the dictionary stream in-place.\n\n  Several assumptions are made about the state of the dictionary stream.\n  Currently, only streams which have been prepared by LZ4_loadDict() should\n  be expected to work.\n\n  Alternatively, the provided dictionaryStream may be NULL,\n  in which case any existing dictionary stream is unset.\n\n  If a dictionary is provided, it replaces any pre-existing stream history.\n  The dictionary contents are the only history that can be referenced and\n  logically immediately precede the data compressed in the first subsequent\n  compression call.\n\n  The dictionary will only remain attached to the working stream through the\n  first compression call, at the end of which it is cleared. The dictionary\n  stream (and source buffer) must remain in-place / accessible / unchanged\n  through the completion of the first compression call on the stream."]
    pub fn LZ4_attach_dictionary(
        workingStream: *mut LZ4_stream_t,
        dictionaryStream: *const LZ4_stream_t,
    );
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type LZ4_i8 = i8;
pub type LZ4_byte = u8;
pub type LZ4_u16 = u16;
pub type LZ4_u32 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LZ4_stream_t_internal {
    pub hashTable: [LZ4_u32; 4096usize],
    pub dictionary: *const LZ4_byte,
    pub dictCtx: *const LZ4_stream_t_internal,
    pub currentOffset: LZ4_u32,
    pub tableType: LZ4_u32,
    pub dictSize: LZ4_u32,
}
#[test]
fn bindgen_test_layout_LZ4_stream_t_internal() {
    const UNINIT: ::std::mem::MaybeUninit<LZ4_stream_t_internal> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LZ4_stream_t_internal>(),
        16416usize,
        concat!("Size of: ", stringify!(LZ4_stream_t_internal))
    );
    assert_eq!(
        ::std::mem::align_of::<LZ4_stream_t_internal>(),
        8usize,
        concat!("Alignment of ", stringify!(LZ4_stream_t_internal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hashTable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4_stream_t_internal),
            "::",
            stringify!(hashTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dictionary) as usize - ptr as usize },
        16384usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4_stream_t_internal),
            "::",
            stringify!(dictionary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dictCtx) as usize - ptr as usize },
        16392usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4_stream_t_internal),
            "::",
            stringify!(dictCtx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).currentOffset) as usize - ptr as usize },
        16400usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4_stream_t_internal),
            "::",
            stringify!(currentOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tableType) as usize - ptr as usize },
        16404usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4_stream_t_internal),
            "::",
            stringify!(tableType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dictSize) as usize - ptr as usize },
        16408usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4_stream_t_internal),
            "::",
            stringify!(dictSize)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union LZ4_stream_u {
    pub minStateSize: [::std::os::raw::c_char; 16416usize],
    pub internal_donotuse: LZ4_stream_t_internal,
}
#[test]
fn bindgen_test_layout_LZ4_stream_u() {
    const UNINIT: ::std::mem::MaybeUninit<LZ4_stream_u> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LZ4_stream_u>(),
        16416usize,
        concat!("Size of: ", stringify!(LZ4_stream_u))
    );
    assert_eq!(
        ::std::mem::align_of::<LZ4_stream_u>(),
        8usize,
        concat!("Alignment of ", stringify!(LZ4_stream_u))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minStateSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4_stream_u),
            "::",
            stringify!(minStateSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal_donotuse) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4_stream_u),
            "::",
            stringify!(internal_donotuse)
        )
    );
}
extern "C" {
    #[doc = " LZ4_initStream() : v1.9.0+\n  An LZ4_stream_t structure must be initialized at least once.\n  This is automatically done when invoking LZ4_createStream(),\n  but it's not when the structure is simply declared on stack (for example).\n\n  Use LZ4_initStream() to properly initialize a newly declared LZ4_stream_t.\n  It can also initialize any arbitrary buffer of sufficient size,\n  and will @return a pointer of proper type upon initialization.\n\n  Note : initialization fails if size and alignment conditions are not respected.\n         In which case, the function will @return NULL.\n  Note2: An LZ4_stream_t structure guarantees correct alignment and size.\n  Note3: Before v1.9.0, use LZ4_resetStream() instead"]
    pub fn LZ4_initStream(buffer: *mut ::std::os::raw::c_void, size: usize) -> *mut LZ4_stream_t;
}
#[doc = " LZ4_streamDecode_t :\n  Never ever use below internal definitions directly !\n  These definitions are not API/ABI safe, and may change in future versions.\n  If you need static allocation, declare or allocate an LZ4_streamDecode_t object."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LZ4_streamDecode_t_internal {
    pub externalDict: *const LZ4_byte,
    pub prefixEnd: *const LZ4_byte,
    pub extDictSize: usize,
    pub prefixSize: usize,
}
#[test]
fn bindgen_test_layout_LZ4_streamDecode_t_internal() {
    const UNINIT: ::std::mem::MaybeUninit<LZ4_streamDecode_t_internal> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LZ4_streamDecode_t_internal>(),
        32usize,
        concat!("Size of: ", stringify!(LZ4_streamDecode_t_internal))
    );
    assert_eq!(
        ::std::mem::align_of::<LZ4_streamDecode_t_internal>(),
        8usize,
        concat!("Alignment of ", stringify!(LZ4_streamDecode_t_internal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).externalDict) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4_streamDecode_t_internal),
            "::",
            stringify!(externalDict)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prefixEnd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4_streamDecode_t_internal),
            "::",
            stringify!(prefixEnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extDictSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4_streamDecode_t_internal),
            "::",
            stringify!(extDictSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prefixSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4_streamDecode_t_internal),
            "::",
            stringify!(prefixSize)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union LZ4_streamDecode_u {
    pub minStateSize: [::std::os::raw::c_char; 32usize],
    pub internal_donotuse: LZ4_streamDecode_t_internal,
}
#[test]
fn bindgen_test_layout_LZ4_streamDecode_u() {
    const UNINIT: ::std::mem::MaybeUninit<LZ4_streamDecode_u> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LZ4_streamDecode_u>(),
        32usize,
        concat!("Size of: ", stringify!(LZ4_streamDecode_u))
    );
    assert_eq!(
        ::std::mem::align_of::<LZ4_streamDecode_u>(),
        8usize,
        concat!("Alignment of ", stringify!(LZ4_streamDecode_u))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minStateSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4_streamDecode_u),
            "::",
            stringify!(minStateSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal_donotuse) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4_streamDecode_u),
            "::",
            stringify!(internal_donotuse)
        )
    );
}
extern "C" {
    #[doc = " Obsolete compression functions (since v1.7.3)"]
    pub fn LZ4_compress(
        src: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        srcSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_compress_limitedOutput(
        src: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        srcSize: ::std::os::raw::c_int,
        maxOutputSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_compress_withState(
        state: *mut ::std::os::raw::c_void,
        source: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        inputSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_compress_limitedOutput_withState(
        state: *mut ::std::os::raw::c_void,
        source: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        inputSize: ::std::os::raw::c_int,
        maxOutputSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_compress_continue(
        LZ4_streamPtr: *mut LZ4_stream_t,
        source: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        inputSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_compress_limitedOutput_continue(
        LZ4_streamPtr: *mut LZ4_stream_t,
        source: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        inputSize: ::std::os::raw::c_int,
        maxOutputSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Obsolete decompression functions (since v1.8.0)"]
    pub fn LZ4_uncompress(
        source: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        outputSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_uncompress_unknownOutputSize(
        source: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        isize_: ::std::os::raw::c_int,
        maxOutputSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_create(inputBuffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn LZ4_sizeofStreamState() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_resetStreamState(
        state: *mut ::std::os::raw::c_void,
        inputBuffer: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_slideInputBuffer(state: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Obsolete streaming decoding functions (since v1.7.0)"]
    pub fn LZ4_decompress_safe_withPrefix64k(
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        compressedSize: ::std::os::raw::c_int,
        maxDstSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_decompress_fast_withPrefix64k(
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        originalSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Obsolete LZ4_decompress_fast variants (since v1.9.0) :\n  These functions used to be faster than LZ4_decompress_safe(),\n  but this is no longer the case. They are now slower.\n  This is because LZ4_decompress_fast() doesn't know the input size,\n  and therefore must progress more cautiously into the input buffer to not read beyond the end of block.\n  On top of that `LZ4_decompress_fast()` is not protected vs malformed or malicious inputs, making it a security liability.\n  As a consequence, LZ4_decompress_fast() is strongly discouraged, and deprecated.\n\n  The last remaining LZ4_decompress_fast() specificity is that\n  it can decompress a block without knowing its compressed size.\n  Such functionality can be achieved in a more secure manner\n  by employing LZ4_decompress_safe_partial().\n\n  Parameters:\n  originalSize : is the uncompressed size to regenerate.\n                 `dst` must be already allocated, its size must be >= 'originalSize' bytes.\n @return : number of bytes read from source buffer (== compressed size).\n           The function expects to finish at block's end exactly.\n           If the source stream is detected malformed, the function stops decoding and returns a negative result.\n  note : LZ4_decompress_fast*() requires originalSize. Thanks to this information, it never writes past the output buffer.\n         However, since it doesn't know its 'src' size, it may read an unknown amount of input, past input buffer bounds.\n         Also, since match offsets are not validated, match reads from 'src' may underflow too.\n         These issues never happen if input (compressed) data is correct.\n         But they may happen if input data is invalid (error or intentional tampering).\n         As a consequence, use these functions in trusted environments with trusted data **only**."]
    pub fn LZ4_decompress_fast(
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        originalSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_decompress_fast_continue(
        LZ4_streamDecode: *mut LZ4_streamDecode_t,
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        originalSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_decompress_fast_usingDict(
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        originalSize: ::std::os::raw::c_int,
        dictStart: *const ::std::os::raw::c_char,
        dictSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " LZ4_resetStream() :\n  An LZ4_stream_t structure must be initialized at least once.\n  This is done with LZ4_initStream(), or LZ4_resetStream().\n  Consider switching to LZ4_initStream(),\n  invoking LZ4_resetStream() will trigger deprecation warnings in the future."]
    pub fn LZ4_resetStream(streamPtr: *mut LZ4_stream_t);
}
extern "C" {
    pub fn _BitScanForward(
        _Index: *mut ::std::os::raw::c_ulong,
        _Mask: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _BitScanForward64(
        _Index: *mut ::std::os::raw::c_ulong,
        _Mask: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _BitScanReverse(
        _Index: *mut ::std::os::raw::c_ulong,
        _Mask: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _BitScanReverse64(
        _Index: *mut ::std::os::raw::c_ulong,
        _Mask: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _bittest(
        arg1: *const ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _InterlockedAnd(
        _Value: *mut ::std::os::raw::c_long,
        _Mask: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedAnd16(
        _Value: *mut ::std::os::raw::c_short,
        _Mask: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedAnd64(
        _Value: *mut ::std::os::raw::c_longlong,
        _Mask: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _interlockedand64(
        _Value: *mut ::std::os::raw::c_longlong,
        _Mask: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedAnd8(
        _Value: *mut ::std::os::raw::c_char,
        _Mask: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn _InterlockedCompareExchange(
        _Destination: *mut ::std::os::raw::c_long,
        _Exchange: ::std::os::raw::c_long,
        _Comparand: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedCompareExchange16(
        _Destination: *mut ::std::os::raw::c_short,
        _Exchange: ::std::os::raw::c_short,
        _Comparand: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedCompareExchange64(
        _Destination: *mut ::std::os::raw::c_longlong,
        _Exchange: ::std::os::raw::c_longlong,
        _Comparand: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedCompareExchange8(
        _Destination: *mut ::std::os::raw::c_char,
        _Exchange: ::std::os::raw::c_char,
        _Comparand: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn _InterlockedCompareExchange128(
        _Destination: *mut ::std::os::raw::c_longlong,
        _ExchangeHigh: ::std::os::raw::c_longlong,
        _ExchangeLow: ::std::os::raw::c_longlong,
        _ComparandResult: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _InterlockedDecrement(_Addend: *mut ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedDecrement16(
        _Addend: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedDecrement64(
        _Addend: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _interlockeddecrement64(
        _Addend: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedExchange(
        _Target: *mut ::std::os::raw::c_long,
        _Value: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedExchange16(
        _Target: *mut ::std::os::raw::c_short,
        _Value: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedExchange64(
        _Target: *mut ::std::os::raw::c_longlong,
        _Value: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _interlockedexchange64(
        _Target: *mut ::std::os::raw::c_longlong,
        _Value: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedExchange8(
        _Target: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn _InterlockedExchangeAdd(
        _Addend: *mut ::std::os::raw::c_long,
        _Value: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedExchangeAdd16(
        _Addend: *mut ::std::os::raw::c_short,
        _Value: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedExchangeAdd64(
        _Addend: *mut ::std::os::raw::c_longlong,
        _Value: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _interlockedexchangeadd64(
        _Addend: *mut ::std::os::raw::c_longlong,
        _Value: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedExchangeAdd8(
        _Addend: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn _InterlockedIncrement(_Addend: *mut ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedIncrement16(
        _Addend: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedIncrement64(
        _Addend: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _interlockedincrement64(
        _Addend: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedOr(
        _Value: *mut ::std::os::raw::c_long,
        _Mask: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedOr16(
        _Value: *mut ::std::os::raw::c_short,
        _Mask: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedOr64(
        _Value: *mut ::std::os::raw::c_longlong,
        _Mask: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _interlockedor64(
        _Value: *mut ::std::os::raw::c_longlong,
        _Mask: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedOr8(
        _Value: *mut ::std::os::raw::c_char,
        _Mask: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn _InterlockedXor(
        _Value: *mut ::std::os::raw::c_long,
        _Mask: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedXor16(
        _Value: *mut ::std::os::raw::c_short,
        _Mask: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedXor64(
        _Value: *mut ::std::os::raw::c_longlong,
        _Mask: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _interlockedxor64(
        _Value: *mut ::std::os::raw::c_longlong,
        _Mask: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedXor8(
        _Value: *mut ::std::os::raw::c_char,
        _Mask: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ReadWriteBarrier();
}
extern "C" {
    pub fn __iso_volatile_load16(arg1: *const ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn __iso_volatile_load32(arg1: *const ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iso_volatile_load64(
        arg1: *const ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __iso_volatile_load8(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn __iso_volatile_store16(
        arg1: *mut ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn __iso_volatile_store32(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn __iso_volatile_store64(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    );
}
extern "C" {
    pub fn __iso_volatile_store8(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_char);
}
extern "C" {
    pub fn _mm_pause();
}
extern "C" {
    pub fn __lzcnt(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __lzcnt16(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __lzcnt64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __popcnt(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __popcnt16(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __popcnt64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rotl(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _rotl16(
        _Value: ::std::os::raw::c_ushort,
        _Shift: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _rotl64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rotl8(
        _Value: ::std::os::raw::c_uchar,
        _Shift: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _rotr(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _rotr16(
        _Value: ::std::os::raw::c_ushort,
        _Shift: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _rotr64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rotr8(
        _Value: ::std::os::raw::c_uchar,
        _Shift: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __shiftleft128(
        _LowPart: ::std::os::raw::c_ulonglong,
        _HighPart: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __shiftright128(
        _LowPart: ::std::os::raw::c_ulonglong,
        _HighPart: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _umul128(
        _Multiplier: ::std::os::raw::c_ulonglong,
        _Multiplicand: ::std::os::raw::c_ulonglong,
        _HighProduct: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _udiv128(
        _HighDividend: ::std::os::raw::c_ulonglong,
        _LowDividend: ::std::os::raw::c_ulonglong,
        _Divisor: ::std::os::raw::c_ulonglong,
        _Remainder: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _addcarry_u64(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_ulonglong,
        arg3: ::std::os::raw::c_ulonglong,
        arg4: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _subborrow_u64(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_ulonglong,
        arg3: ::std::os::raw::c_ulonglong,
        arg4: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __ceil(arg1: f64) -> f64;
}
extern "C" {
    pub fn __ceilf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __floor(arg1: f64) -> f64;
}
extern "C" {
    pub fn __floorf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __round(arg1: f64) -> f64;
}
extern "C" {
    pub fn __roundf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __trunc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __truncf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __copysign(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn __copysignf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn __signbitvalue(arg1: f64) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __signbitvaluef(arg1: f32) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SETJMP_FLOAT128 {
    pub Part: [::std::os::raw::c_ulonglong; 2usize],
}
#[test]
fn bindgen_test_layout__SETJMP_FLOAT128() {
    const UNINIT: ::std::mem::MaybeUninit<_SETJMP_FLOAT128> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_SETJMP_FLOAT128>(),
        16usize,
        concat!("Size of: ", stringify!(_SETJMP_FLOAT128))
    );
    assert_eq!(
        ::std::mem::align_of::<_SETJMP_FLOAT128>(),
        16usize,
        concat!("Alignment of ", stringify!(_SETJMP_FLOAT128))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Part) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SETJMP_FLOAT128),
            "::",
            stringify!(Part)
        )
    );
}
pub type SETJMP_FLOAT128 = _SETJMP_FLOAT128;
pub type _JBTYPE = SETJMP_FLOAT128;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _JUMP_BUFFER {
    pub Frame: ::std::os::raw::c_ulonglong,
    pub Rbx: ::std::os::raw::c_ulonglong,
    pub Rsp: ::std::os::raw::c_ulonglong,
    pub Rbp: ::std::os::raw::c_ulonglong,
    pub Rsi: ::std::os::raw::c_ulonglong,
    pub Rdi: ::std::os::raw::c_ulonglong,
    pub R12: ::std::os::raw::c_ulonglong,
    pub R13: ::std::os::raw::c_ulonglong,
    pub R14: ::std::os::raw::c_ulonglong,
    pub R15: ::std::os::raw::c_ulonglong,
    pub Rip: ::std::os::raw::c_ulonglong,
    pub MxCsr: ::std::os::raw::c_ulong,
    pub FpCsr: ::std::os::raw::c_ushort,
    pub Spare: ::std::os::raw::c_ushort,
    pub Xmm6: SETJMP_FLOAT128,
    pub Xmm7: SETJMP_FLOAT128,
    pub Xmm8: SETJMP_FLOAT128,
    pub Xmm9: SETJMP_FLOAT128,
    pub Xmm10: SETJMP_FLOAT128,
    pub Xmm11: SETJMP_FLOAT128,
    pub Xmm12: SETJMP_FLOAT128,
    pub Xmm13: SETJMP_FLOAT128,
    pub Xmm14: SETJMP_FLOAT128,
    pub Xmm15: SETJMP_FLOAT128,
}
#[test]
fn bindgen_test_layout__JUMP_BUFFER() {
    const UNINIT: ::std::mem::MaybeUninit<_JUMP_BUFFER> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_JUMP_BUFFER>(),
        256usize,
        concat!("Size of: ", stringify!(_JUMP_BUFFER))
    );
    assert_eq!(
        ::std::mem::align_of::<_JUMP_BUFFER>(),
        16usize,
        concat!("Alignment of ", stringify!(_JUMP_BUFFER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Frame) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Frame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Rbx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Rbx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Rsp) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Rbp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Rbp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Rsi) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Rsi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Rdi) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Rdi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).R12) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(R12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).R13) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(R13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).R14) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(R14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).R15) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(R15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Rip) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Rip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MxCsr) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(MxCsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FpCsr) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(FpCsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Spare) as usize - ptr as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Spare)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Xmm6) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Xmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Xmm7) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Xmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Xmm8) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Xmm8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Xmm9) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Xmm9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Xmm10) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Xmm10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Xmm11) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Xmm11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Xmm12) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Xmm12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Xmm13) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Xmm13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Xmm14) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Xmm14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Xmm15) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_JUMP_BUFFER),
            "::",
            stringify!(Xmm15)
        )
    );
}
pub type jmp_buf = [_JBTYPE; 16usize];
extern "C" {
    pub fn _setjmp(_Buf: *mut _JBTYPE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(_Buf: *mut _JBTYPE, _Value: ::std::os::raw::c_int) -> !;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __m64 {
    pub m64_u64: ::std::os::raw::c_ulonglong,
    pub m64_f32: [f32; 2usize],
    pub m64_i8: [::std::os::raw::c_char; 8usize],
    pub m64_i16: [::std::os::raw::c_short; 4usize],
    pub m64_i32: [::std::os::raw::c_int; 2usize],
    pub m64_i64: ::std::os::raw::c_longlong,
    pub m64_u8: [::std::os::raw::c_uchar; 8usize],
    pub m64_u16: [::std::os::raw::c_ushort; 4usize],
    pub m64_u32: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___m64() {
    const UNINIT: ::std::mem::MaybeUninit<__m64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__m64>(),
        8usize,
        concat!("Size of: ", stringify!(__m64))
    );
    assert_eq!(
        ::std::mem::align_of::<__m64>(),
        8usize,
        concat!("Alignment of ", stringify!(__m64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m64_u64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m64),
            "::",
            stringify!(m64_u64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m64_f32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m64),
            "::",
            stringify!(m64_f32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m64_i8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m64),
            "::",
            stringify!(m64_i8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m64_i16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m64),
            "::",
            stringify!(m64_i16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m64_i32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m64),
            "::",
            stringify!(m64_i32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m64_i64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m64),
            "::",
            stringify!(m64_i64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m64_u8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m64),
            "::",
            stringify!(m64_u8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m64_u16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m64),
            "::",
            stringify!(m64_u16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m64_u32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m64),
            "::",
            stringify!(m64_u32)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union __m128 {
    pub m128_f32: [f32; 4usize],
    pub m128_u64: [::std::os::raw::c_ulonglong; 2usize],
    pub m128_i8: [::std::os::raw::c_char; 16usize],
    pub m128_i16: [::std::os::raw::c_short; 8usize],
    pub m128_i32: [::std::os::raw::c_int; 4usize],
    pub m128_i64: [::std::os::raw::c_longlong; 2usize],
    pub m128_u8: [::std::os::raw::c_uchar; 16usize],
    pub m128_u16: [::std::os::raw::c_ushort; 8usize],
    pub m128_u32: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout___m128() {
    const UNINIT: ::std::mem::MaybeUninit<__m128> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__m128>(),
        16usize,
        concat!("Size of: ", stringify!(__m128))
    );
    assert_eq!(
        ::std::mem::align_of::<__m128>(),
        16usize,
        concat!("Alignment of ", stringify!(__m128))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m128_f32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m128),
            "::",
            stringify!(m128_f32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m128_u64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m128),
            "::",
            stringify!(m128_u64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m128_i8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m128),
            "::",
            stringify!(m128_i8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m128_i16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m128),
            "::",
            stringify!(m128_i16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m128_i32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m128),
            "::",
            stringify!(m128_i32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m128_i64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m128),
            "::",
            stringify!(m128_i64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m128_u8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m128),
            "::",
            stringify!(m128_u8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m128_u16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m128),
            "::",
            stringify!(m128_u16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m128_u32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m128),
            "::",
            stringify!(m128_u32)
        )
    );
}
extern "C" {
    pub fn _calloc_base(_Count: usize, _Size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        _Count: ::std::os::raw::c_ulonglong,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _callnewh(_Size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _expand(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _malloc_base(_Size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(_Size: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _msize_base(_Block: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn _realloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _aligned_malloc(_Size: usize, _Alignment: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_msize(
        _Block: *mut ::std::os::raw::c_void,
        _Alignment: usize,
        _Offset: usize,
    ) -> usize;
}
extern "C" {
    pub fn _aligned_offset_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _heapinfo {
    pub _pentry: *mut ::std::os::raw::c_int,
    pub _size: usize,
    pub _useflag: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__heapinfo() {
    const UNINIT: ::std::mem::MaybeUninit<_heapinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_heapinfo>(),
        24usize,
        concat!("Size of: ", stringify!(_heapinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_heapinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_heapinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._pentry) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_heapinfo),
            "::",
            stringify!(_pentry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_heapinfo),
            "::",
            stringify!(_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._useflag) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_heapinfo),
            "::",
            stringify!(_useflag)
        )
    );
}
pub type _HEAPINFO = _heapinfo;
extern "C" {
    pub fn _alloca(_Size: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _get_heap_handle() -> isize;
}
extern "C" {
    pub fn _heapmin() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _heapwalk(_EntryInfo: *mut _HEAPINFO) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _heapchk() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _resetstkoflw() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_add_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_add_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_sub_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_sub_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mul_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mul_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_div_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_div_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_sqrt_ss(_A: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_sqrt_ps(_A: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_rcp_ss(_A: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_rcp_ps(_A: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_rsqrt_ss(_A: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_rsqrt_ps(_A: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_min_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_min_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_max_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_max_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_and_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_andnot_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_or_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_xor_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpeq_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpeq_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmplt_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmplt_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmple_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmple_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpgt_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpgt_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpge_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpge_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpneq_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpneq_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpnlt_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpnlt_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpnle_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpnle_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpngt_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpngt_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpnge_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpnge_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpord_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpord_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpunord_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmpunord_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_comieq_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comilt_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comile_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comigt_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comige_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comineq_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomieq_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomilt_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomile_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomigt_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomige_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomineq_ss(_A: __m128, _B: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvt_ss2si(_A: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvtt_ss2si(_A: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvt_si2ss(arg1: __m128, arg2: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_cvtss_f32(_A: __m128) -> f32;
}
extern "C" {
    pub fn _mm_cvtss_si64(_A: __m128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvttss_si64(_A: __m128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtsi64_ss(_A: __m128, _B: ::std::os::raw::c_longlong) -> __m128;
}
extern "C" {
    pub fn _mm_shuffle_ps(_A: __m128, _B: __m128, _Imm8: ::std::os::raw::c_uint) -> __m128;
}
extern "C" {
    pub fn _mm_unpackhi_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_unpacklo_ps(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_loadh_pi(arg1: __m128, arg2: *const __m64) -> __m128;
}
extern "C" {
    pub fn _mm_movehl_ps(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_movelh_ps(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_storeh_pi(arg1: *mut __m64, arg2: __m128);
}
extern "C" {
    pub fn _mm_loadl_pi(arg1: __m128, arg2: *const __m64) -> __m128;
}
extern "C" {
    pub fn _mm_storel_pi(arg1: *mut __m64, arg2: __m128);
}
extern "C" {
    pub fn _mm_movemask_ps(_A: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_set_ss(_A: f32) -> __m128;
}
extern "C" {
    pub fn _mm_set_ps1(_A: f32) -> __m128;
}
extern "C" {
    pub fn _mm_set_ps(_A: f32, _B: f32, _C: f32, _D: f32) -> __m128;
}
extern "C" {
    pub fn _mm_setr_ps(_A: f32, _B: f32, _C: f32, _D: f32) -> __m128;
}
extern "C" {
    pub fn _mm_setzero_ps() -> __m128;
}
extern "C" {
    pub fn _mm_load_ss(_A: *const f32) -> __m128;
}
extern "C" {
    pub fn _mm_load_ps1(_A: *const f32) -> __m128;
}
extern "C" {
    pub fn _mm_load_ps(_A: *const f32) -> __m128;
}
extern "C" {
    pub fn _mm_loadr_ps(_A: *const f32) -> __m128;
}
extern "C" {
    pub fn _mm_loadu_ps(_A: *const f32) -> __m128;
}
extern "C" {
    pub fn _mm_store_ss(_V: *mut f32, _A: __m128);
}
extern "C" {
    pub fn _mm_store_ps1(_V: *mut f32, _A: __m128);
}
extern "C" {
    pub fn _mm_store_ps(_V: *mut f32, _A: __m128);
}
extern "C" {
    pub fn _mm_storer_ps(_V: *mut f32, _A: __m128);
}
extern "C" {
    pub fn _mm_storeu_ps(_V: *mut f32, _A: __m128);
}
extern "C" {
    pub fn _mm_prefetch(_A: *const ::std::os::raw::c_char, _Sel: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _mm_stream_ps(arg1: *mut f32, arg2: __m128);
}
extern "C" {
    pub fn _mm_move_ss(_A: __m128, _B: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_sfence();
}
extern "C" {
    pub fn _mm_getcsr() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_setcsr(arg1: ::std::os::raw::c_uint);
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union __m128i {
    pub m128i_i8: [::std::os::raw::c_char; 16usize],
    pub m128i_i16: [::std::os::raw::c_short; 8usize],
    pub m128i_i32: [::std::os::raw::c_int; 4usize],
    pub m128i_i64: [::std::os::raw::c_longlong; 2usize],
    pub m128i_u8: [::std::os::raw::c_uchar; 16usize],
    pub m128i_u16: [::std::os::raw::c_ushort; 8usize],
    pub m128i_u32: [::std::os::raw::c_uint; 4usize],
    pub m128i_u64: [::std::os::raw::c_ulonglong; 2usize],
}
#[test]
fn bindgen_test_layout___m128i() {
    const UNINIT: ::std::mem::MaybeUninit<__m128i> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__m128i>(),
        16usize,
        concat!("Size of: ", stringify!(__m128i))
    );
    assert_eq!(
        ::std::mem::align_of::<__m128i>(),
        16usize,
        concat!("Alignment of ", stringify!(__m128i))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m128i_i8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m128i),
            "::",
            stringify!(m128i_i8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m128i_i16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m128i),
            "::",
            stringify!(m128i_i16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m128i_i32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m128i),
            "::",
            stringify!(m128i_i32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m128i_i64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m128i),
            "::",
            stringify!(m128i_i64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m128i_u8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m128i),
            "::",
            stringify!(m128i_u8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m128i_u16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m128i),
            "::",
            stringify!(m128i_u16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m128i_u32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m128i),
            "::",
            stringify!(m128i_u32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m128i_u64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m128i),
            "::",
            stringify!(m128i_u64)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __m128d {
    pub m128d_f64: [f64; 2usize],
}
#[test]
fn bindgen_test_layout___m128d() {
    const UNINIT: ::std::mem::MaybeUninit<__m128d> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__m128d>(),
        16usize,
        concat!("Size of: ", stringify!(__m128d))
    );
    assert_eq!(
        ::std::mem::align_of::<__m128d>(),
        16usize,
        concat!("Alignment of ", stringify!(__m128d))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m128d_f64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m128d),
            "::",
            stringify!(m128d_f64)
        )
    );
}
extern "C" {
    pub fn _mm_add_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_add_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_sub_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_sub_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mul_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mul_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_sqrt_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_sqrt_pd(_A: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_div_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_div_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_min_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_min_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_max_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_max_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_and_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_andnot_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_or_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_xor_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpeq_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpeq_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmplt_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmplt_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmple_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmple_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpgt_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpgt_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpge_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpge_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpneq_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpneq_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpnlt_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpnlt_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpnle_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpnle_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpngt_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpngt_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpnge_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpnge_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpord_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpord_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpunord_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpunord_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_comieq_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comilt_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comile_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comigt_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comige_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comineq_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomieq_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomilt_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomile_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomigt_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomige_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_ucomineq_sd(_A: __m128d, _B: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvtepi32_pd(_A: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm_cvtpd_epi32(_A: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_cvttpd_epi32(_A: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepi32_ps(_A: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm_cvtps_epi32(_A: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_cvttps_epi32(_A: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtpd_ps(_A: __m128d) -> __m128;
}
extern "C" {
    pub fn _mm_cvtps_pd(_A: __m128) -> __m128d;
}
extern "C" {
    pub fn _mm_cvtsd_ss(_A: __m128, _B: __m128d) -> __m128;
}
extern "C" {
    pub fn _mm_cvtss_sd(_A: __m128d, _B: __m128) -> __m128d;
}
extern "C" {
    pub fn _mm_cvtsd_si32(_A: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvttsd_si32(_A: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvtsi32_sd(_A: __m128d, _B: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_unpackhi_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_unpacklo_pd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_movemask_pd(_A: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_shuffle_pd(_A: __m128d, _B: __m128d, _I: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_load_pd(_Dp: *const f64) -> __m128d;
}
extern "C" {
    pub fn _mm_load1_pd(_Dp: *const f64) -> __m128d;
}
extern "C" {
    pub fn _mm_loadr_pd(_Dp: *const f64) -> __m128d;
}
extern "C" {
    pub fn _mm_loadu_pd(_Dp: *const f64) -> __m128d;
}
extern "C" {
    pub fn _mm_load_sd(_Dp: *const f64) -> __m128d;
}
extern "C" {
    pub fn _mm_loadh_pd(_A: __m128d, _Dp: *const f64) -> __m128d;
}
extern "C" {
    pub fn _mm_loadl_pd(_A: __m128d, _Dp: *const f64) -> __m128d;
}
extern "C" {
    pub fn _mm_set_sd(_W: f64) -> __m128d;
}
extern "C" {
    pub fn _mm_set1_pd(_A: f64) -> __m128d;
}
extern "C" {
    pub fn _mm_set_pd(_Z: f64, _Y: f64) -> __m128d;
}
extern "C" {
    pub fn _mm_setr_pd(_Y: f64, _Z: f64) -> __m128d;
}
extern "C" {
    pub fn _mm_setzero_pd() -> __m128d;
}
extern "C" {
    pub fn _mm_move_sd(_A: __m128d, _B: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_store_sd(_Dp: *mut f64, _A: __m128d);
}
extern "C" {
    pub fn _mm_store1_pd(_Dp: *mut f64, _A: __m128d);
}
extern "C" {
    pub fn _mm_store_pd(_Dp: *mut f64, _A: __m128d);
}
extern "C" {
    pub fn _mm_storeu_pd(_Dp: *mut f64, _A: __m128d);
}
extern "C" {
    pub fn _mm_storer_pd(_Dp: *mut f64, _A: __m128d);
}
extern "C" {
    pub fn _mm_storeh_pd(_Dp: *mut f64, _A: __m128d);
}
extern "C" {
    pub fn _mm_storel_pd(_Dp: *mut f64, _A: __m128d);
}
extern "C" {
    pub fn _mm_add_epi8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_add_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_add_epi32(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_add_epi64(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_adds_epi8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_adds_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_adds_epu8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_adds_epu16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_avg_epu8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_avg_epu16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_madd_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_max_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_max_epu8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_min_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_min_epu8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mulhi_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mulhi_epu16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mullo_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mul_epu32(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sad_epu8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sub_epi8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sub_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sub_epi32(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sub_epi64(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_subs_epi8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_subs_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_subs_epu8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_subs_epu16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_and_si128(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_andnot_si128(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_or_si128(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_xor_si128(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_slli_si128(_A: __m128i, _Imm: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_slli_epi16(_A: __m128i, _Count: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_sll_epi16(_A: __m128i, _Count: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_slli_epi32(_A: __m128i, _Count: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_sll_epi32(_A: __m128i, _Count: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_slli_epi64(_A: __m128i, _Count: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_sll_epi64(_A: __m128i, _Count: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_srai_epi16(_A: __m128i, _Count: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_sra_epi16(_A: __m128i, _Count: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_srai_epi32(_A: __m128i, _Count: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_sra_epi32(_A: __m128i, _Count: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_srli_si128(_A: __m128i, _Imm: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_srli_epi16(_A: __m128i, _Count: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_srl_epi16(_A: __m128i, _Count: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_srli_epi32(_A: __m128i, _Count: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_srl_epi32(_A: __m128i, _Count: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_srli_epi64(_A: __m128i, _Count: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_srl_epi64(_A: __m128i, _Count: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cmpeq_epi8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cmpeq_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cmpeq_epi32(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cmpgt_epi8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cmpgt_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cmpgt_epi32(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cmplt_epi8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cmplt_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cmplt_epi32(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtsi32_si128(_A: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtsi128_si32(_A: __m128i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_packs_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_packs_epi32(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_packus_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_extract_epi16(_A: __m128i, _Imm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_insert_epi16(
        _A: __m128i,
        _B: ::std::os::raw::c_int,
        _Imm: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_movemask_epi8(_A: __m128i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_shuffle_epi32(_A: __m128i, _Imm: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_shufflehi_epi16(_A: __m128i, _Imm: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_shufflelo_epi16(_A: __m128i, _Imm: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_unpackhi_epi8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_unpackhi_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_unpackhi_epi32(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_unpackhi_epi64(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_unpacklo_epi8(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_unpacklo_epi16(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_unpacklo_epi32(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_unpacklo_epi64(_A: __m128i, _B: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_load_si128(_P: *const __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_loadu_si128(_P: *const __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_loadl_epi64(_P: *const __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_set_epi64x(
        _I1: ::std::os::raw::c_longlong,
        _I0: ::std::os::raw::c_longlong,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_set_epi32(
        _I3: ::std::os::raw::c_int,
        _I2: ::std::os::raw::c_int,
        _I1: ::std::os::raw::c_int,
        _I0: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_set_epi16(
        _W7: ::std::os::raw::c_short,
        _W6: ::std::os::raw::c_short,
        _W5: ::std::os::raw::c_short,
        _W4: ::std::os::raw::c_short,
        _W3: ::std::os::raw::c_short,
        _W2: ::std::os::raw::c_short,
        _W1: ::std::os::raw::c_short,
        _W0: ::std::os::raw::c_short,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_set_epi8(
        _B15: ::std::os::raw::c_char,
        _B14: ::std::os::raw::c_char,
        _B13: ::std::os::raw::c_char,
        _B12: ::std::os::raw::c_char,
        _B11: ::std::os::raw::c_char,
        _B10: ::std::os::raw::c_char,
        _B9: ::std::os::raw::c_char,
        _B8: ::std::os::raw::c_char,
        _B7: ::std::os::raw::c_char,
        _B6: ::std::os::raw::c_char,
        _B5: ::std::os::raw::c_char,
        _B4: ::std::os::raw::c_char,
        _B3: ::std::os::raw::c_char,
        _B2: ::std::os::raw::c_char,
        _B1: ::std::os::raw::c_char,
        _B0: ::std::os::raw::c_char,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_set1_epi64x(i: ::std::os::raw::c_longlong) -> __m128i;
}
extern "C" {
    pub fn _mm_set1_epi32(_I: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_set1_epi16(_W: ::std::os::raw::c_short) -> __m128i;
}
extern "C" {
    pub fn _mm_set1_epi8(_B: ::std::os::raw::c_char) -> __m128i;
}
extern "C" {
    pub fn _mm_setl_epi64(_Q: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_setr_epi32(
        _I0: ::std::os::raw::c_int,
        _I1: ::std::os::raw::c_int,
        _I2: ::std::os::raw::c_int,
        _I3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_setr_epi16(
        _W0: ::std::os::raw::c_short,
        _W1: ::std::os::raw::c_short,
        _W2: ::std::os::raw::c_short,
        _W3: ::std::os::raw::c_short,
        _W4: ::std::os::raw::c_short,
        _W5: ::std::os::raw::c_short,
        _W6: ::std::os::raw::c_short,
        _W7: ::std::os::raw::c_short,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_setr_epi8(
        _B15: ::std::os::raw::c_char,
        _B14: ::std::os::raw::c_char,
        _B13: ::std::os::raw::c_char,
        _B12: ::std::os::raw::c_char,
        _B11: ::std::os::raw::c_char,
        _B10: ::std::os::raw::c_char,
        _B9: ::std::os::raw::c_char,
        _B8: ::std::os::raw::c_char,
        _B7: ::std::os::raw::c_char,
        _B6: ::std::os::raw::c_char,
        _B5: ::std::os::raw::c_char,
        _B4: ::std::os::raw::c_char,
        _B3: ::std::os::raw::c_char,
        _B2: ::std::os::raw::c_char,
        _B1: ::std::os::raw::c_char,
        _B0: ::std::os::raw::c_char,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_setzero_si128() -> __m128i;
}
extern "C" {
    pub fn _mm_store_si128(_P: *mut __m128i, _B: __m128i);
}
extern "C" {
    pub fn _mm_storeu_si128(_P: *mut __m128i, _B: __m128i);
}
extern "C" {
    pub fn _mm_storel_epi64(_P: *mut __m128i, _Q: __m128i);
}
extern "C" {
    pub fn _mm_maskmoveu_si128(_D: __m128i, _N: __m128i, _P: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _mm_move_epi64(_Q: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_stream_pd(_Dp: *mut f64, _A: __m128d);
}
extern "C" {
    pub fn _mm_stream_si128(_P: *mut __m128i, _A: __m128i);
}
extern "C" {
    pub fn _mm_clflush(_P: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _mm_lfence();
}
extern "C" {
    pub fn _mm_mfence();
}
extern "C" {
    pub fn _mm_stream_si32(_P: *mut ::std::os::raw::c_int, _I: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _mm_cvtsd_f64(_A: __m128d) -> f64;
}
extern "C" {
    pub fn _mm_castpd_ps(arg1: __m128d) -> __m128;
}
extern "C" {
    pub fn _mm_castpd_si128(arg1: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_castps_pd(arg1: __m128) -> __m128d;
}
extern "C" {
    pub fn _mm_castps_si128(arg1: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_castsi128_ps(arg1: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm_castsi128_pd(arg1: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm_cvtsd_si64(arg1: __m128d) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvttsd_si64(arg1: __m128d) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtsi64_sd(arg1: __m128d, arg2: ::std::os::raw::c_longlong) -> __m128d;
}
extern "C" {
    pub fn _mm_cvtsi64_si128(arg1: ::std::os::raw::c_longlong) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtsi128_si64(arg1: __m128i) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_addsub_ps(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_hadd_ps(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_hsub_ps(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_movehdup_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_moveldup_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_addsub_pd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_hadd_pd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_hsub_pd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_loaddup_pd(arg1: *const f64) -> __m128d;
}
extern "C" {
    pub fn _mm_movedup_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_lddqu_si128(arg1: *const __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_monitor(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn _mm_mwait(arg1: ::std::os::raw::c_uint, arg2: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _mm_hadd_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_hadd_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_hadds_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_hsub_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_hsub_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_hsubs_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maddubs_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mulhrs_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_shuffle_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sign_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sign_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sign_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_alignr_epi8(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_abs_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_abs_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_abs_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_blend_epi16(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_blendv_epi8(arg1: __m128i, arg2: __m128i, mask: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_blend_ps(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_blendv_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_blend_pd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_blendv_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_dp_ps(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_dp_pd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_cmpeq_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_min_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_max_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_min_epu16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_max_epu16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_min_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_max_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_min_epu32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_max_epu32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mullo_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mul_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_testz_si128(arg1: __m128i, arg2: __m128i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_testc_si128(arg1: __m128i, arg2: __m128i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_testnzc_si128(arg1: __m128i, arg2: __m128i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_insert_ps(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_extract_ps(arg1: __m128, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_insert_epi8(
        arg1: __m128i,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_insert_epi32(
        arg1: __m128i,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_insert_epi64(
        arg1: __m128i,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_extract_epi8(arg1: __m128i, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_extract_epi32(arg1: __m128i, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_extract_epi64(
        arg1: __m128i,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_minpos_epu16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_round_pd(arg1: __m128d, arg2: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_round_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_round_ps(arg1: __m128, arg2: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_cvtepi8_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepi16_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepi8_epi64(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepi32_epi64(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepi16_epi64(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepi8_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepu8_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepu16_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepu8_epi64(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepu32_epi64(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepu16_epi64(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepu8_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_packus_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mpsadbw_epu8(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_stream_load_si128(arg1: *const __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cmpistrm(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_cmpistri(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpestrm(
        arg1: __m128i,
        arg2: ::std::os::raw::c_int,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_cmpestri(
        arg1: __m128i,
        arg2: ::std::os::raw::c_int,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpistrz(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpistrc(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpistrs(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpistro(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpistra(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpestrz(
        arg1: __m128i,
        arg2: ::std::os::raw::c_int,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpestrc(
        arg1: __m128i,
        arg2: ::std::os::raw::c_int,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpestrs(
        arg1: __m128i,
        arg2: ::std::os::raw::c_int,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpestro(
        arg1: __m128i,
        arg2: ::std::os::raw::c_int,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpestra(
        arg1: __m128i,
        arg2: ::std::os::raw::c_int,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmpgt_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_popcnt_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_popcnt_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_crc32_u8(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_crc32_u16(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_crc32_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_crc32_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_aesdec_si128(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_aesdeclast_si128(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_aesenc_si128(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_aesenclast_si128(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_aesimc_si128(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_aeskeygenassist_si128(arg1: __m128i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_clmulepi64_si128(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union __m256 {
    pub m256_f32: [f32; 8usize],
}
#[test]
fn bindgen_test_layout___m256() {
    const UNINIT: ::std::mem::MaybeUninit<__m256> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__m256>(),
        32usize,
        concat!("Size of: ", stringify!(__m256))
    );
    assert_eq!(
        ::std::mem::align_of::<__m256>(),
        32usize,
        concat!("Alignment of ", stringify!(__m256))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m256_f32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m256),
            "::",
            stringify!(m256_f32)
        )
    );
}
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct __m256d {
    pub m256d_f64: [f64; 4usize],
}
#[test]
fn bindgen_test_layout___m256d() {
    const UNINIT: ::std::mem::MaybeUninit<__m256d> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__m256d>(),
        32usize,
        concat!("Size of: ", stringify!(__m256d))
    );
    assert_eq!(
        ::std::mem::align_of::<__m256d>(),
        32usize,
        concat!("Alignment of ", stringify!(__m256d))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m256d_f64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m256d),
            "::",
            stringify!(m256d_f64)
        )
    );
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union __m256i {
    pub m256i_i8: [::std::os::raw::c_char; 32usize],
    pub m256i_i16: [::std::os::raw::c_short; 16usize],
    pub m256i_i32: [::std::os::raw::c_int; 8usize],
    pub m256i_i64: [::std::os::raw::c_longlong; 4usize],
    pub m256i_u8: [::std::os::raw::c_uchar; 32usize],
    pub m256i_u16: [::std::os::raw::c_ushort; 16usize],
    pub m256i_u32: [::std::os::raw::c_uint; 8usize],
    pub m256i_u64: [::std::os::raw::c_ulonglong; 4usize],
}
#[test]
fn bindgen_test_layout___m256i() {
    const UNINIT: ::std::mem::MaybeUninit<__m256i> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__m256i>(),
        32usize,
        concat!("Size of: ", stringify!(__m256i))
    );
    assert_eq!(
        ::std::mem::align_of::<__m256i>(),
        32usize,
        concat!("Alignment of ", stringify!(__m256i))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m256i_i8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m256i),
            "::",
            stringify!(m256i_i8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m256i_i16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m256i),
            "::",
            stringify!(m256i_i16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m256i_i32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m256i),
            "::",
            stringify!(m256i_i32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m256i_i64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m256i),
            "::",
            stringify!(m256i_i64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m256i_u8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m256i),
            "::",
            stringify!(m256i_u8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m256i_u16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m256i),
            "::",
            stringify!(m256i_u16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m256i_u32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m256i),
            "::",
            stringify!(m256i_u32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m256i_u64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m256i),
            "::",
            stringify!(m256i_u64)
        )
    );
}
extern "C" {
    pub fn _mm256_add_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_add_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_addsub_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_addsub_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_and_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_and_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_andnot_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_andnot_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_blend_pd(arg1: __m256d, arg2: __m256d, arg3: ::std::os::raw::c_int) -> __m256d;
}
extern "C" {
    pub fn _mm256_blend_ps(arg1: __m256, arg2: __m256, arg3: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm256_blendv_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_blendv_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_div_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_div_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_dp_ps(arg1: __m256, arg2: __m256, arg3: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm256_hadd_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_hadd_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_hsub_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_hsub_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_max_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_max_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_min_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_min_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_mul_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_mul_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_or_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_or_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_shuffle_pd(arg1: __m256d, arg2: __m256d, arg3: ::std::os::raw::c_int) -> __m256d;
}
extern "C" {
    pub fn _mm256_shuffle_ps(arg1: __m256, arg2: __m256, arg3: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm256_sub_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_sub_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_xor_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_xor_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_cmp_pd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm256_cmp_pd(arg1: __m256d, arg2: __m256d, arg3: ::std::os::raw::c_int) -> __m256d;
}
extern "C" {
    pub fn _mm_cmp_ps(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm256_cmp_ps(arg1: __m256, arg2: __m256, arg3: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm_cmp_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_comi_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cmp_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_comi_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_cvtepi32_pd(arg1: __m128i) -> __m256d;
}
extern "C" {
    pub fn _mm256_cvtepi32_ps(arg1: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm256_cvtpd_ps(arg1: __m256d) -> __m128;
}
extern "C" {
    pub fn _mm256_cvtps_epi32(arg1: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtps_pd(arg1: __m128) -> __m256d;
}
extern "C" {
    pub fn _mm256_cvttpd_epi32(arg1: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtpd_epi32(arg1: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttps_epi32(arg1: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm256_extractf128_ps(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm256_extractf128_pd(arg1: __m256d, arg2: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm256_extractf128_si256(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm256_zeroall();
}
extern "C" {
    pub fn _mm256_zeroupper();
}
extern "C" {
    pub fn _mm256_permutevar_ps(arg1: __m256, arg2: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm_permutevar_ps(arg1: __m128, arg2: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm256_permute_ps(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm_permute_ps(arg1: __m128, arg2: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm256_permutevar_pd(arg1: __m256d, arg2: __m256i) -> __m256d;
}
extern "C" {
    pub fn _mm_permutevar_pd(arg1: __m128d, arg2: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm256_permute_pd(arg1: __m256d, arg2: ::std::os::raw::c_int) -> __m256d;
}
extern "C" {
    pub fn _mm_permute_pd(arg1: __m128d, arg2: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm256_permute2f128_ps(
        arg1: __m256,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_permute2f128_pd(
        arg1: __m256d,
        arg2: __m256d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_permute2f128_si256(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_broadcast_ss(arg1: *const f32) -> __m256;
}
extern "C" {
    pub fn _mm_broadcast_ss(arg1: *const f32) -> __m128;
}
extern "C" {
    pub fn _mm256_broadcast_sd(arg1: *const f64) -> __m256d;
}
extern "C" {
    pub fn _mm256_broadcast_ps(arg1: *const __m128) -> __m256;
}
extern "C" {
    pub fn _mm256_broadcast_pd(arg1: *const __m128d) -> __m256d;
}
extern "C" {
    pub fn _mm256_insertf128_ps(arg1: __m256, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm256_insertf128_pd(
        arg1: __m256d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_insertf128_si256(
        arg1: __m256i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_load_pd(arg1: *const f64) -> __m256d;
}
extern "C" {
    pub fn _mm256_store_pd(arg1: *mut f64, arg2: __m256d);
}
extern "C" {
    pub fn _mm256_load_ps(arg1: *const f32) -> __m256;
}
extern "C" {
    pub fn _mm256_store_ps(arg1: *mut f32, arg2: __m256);
}
extern "C" {
    pub fn _mm256_loadu_pd(arg1: *const f64) -> __m256d;
}
extern "C" {
    pub fn _mm256_storeu_pd(arg1: *mut f64, arg2: __m256d);
}
extern "C" {
    pub fn _mm256_loadu_ps(arg1: *const f32) -> __m256;
}
extern "C" {
    pub fn _mm256_storeu_ps(arg1: *mut f32, arg2: __m256);
}
extern "C" {
    pub fn _mm256_load_si256(arg1: *const __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_store_si256(arg1: *mut __m256i, arg2: __m256i);
}
extern "C" {
    pub fn _mm256_loadu_si256(arg1: *const __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_storeu_si256(arg1: *mut __m256i, arg2: __m256i);
}
extern "C" {
    pub fn _mm256_maskload_pd(arg1: *const f64, arg2: __m256i) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskstore_pd(arg1: *mut f64, arg2: __m256i, arg3: __m256d);
}
extern "C" {
    pub fn _mm_maskload_pd(arg1: *const f64, arg2: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm_maskstore_pd(arg1: *mut f64, arg2: __m128i, arg3: __m128d);
}
extern "C" {
    pub fn _mm256_maskload_ps(arg1: *const f32, arg2: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm256_maskstore_ps(arg1: *mut f32, arg2: __m256i, arg3: __m256);
}
extern "C" {
    pub fn _mm_maskload_ps(arg1: *const f32, arg2: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm_maskstore_ps(arg1: *mut f32, arg2: __m128i, arg3: __m128);
}
extern "C" {
    pub fn _mm256_movehdup_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_moveldup_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_movedup_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_lddqu_si256(arg1: *const __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_stream_si256(arg1: *mut __m256i, arg2: __m256i);
}
extern "C" {
    pub fn _mm256_stream_pd(arg1: *mut f64, arg2: __m256d);
}
extern "C" {
    pub fn _mm256_stream_ps(arg1: *mut f32, arg2: __m256);
}
extern "C" {
    pub fn _mm256_rcp_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_rsqrt_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_sqrt_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_sqrt_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_round_pd(arg1: __m256d, arg2: ::std::os::raw::c_int) -> __m256d;
}
extern "C" {
    pub fn _mm256_round_ps(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm256_unpackhi_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_unpackhi_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_unpacklo_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_unpacklo_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_testz_si256(arg1: __m256i, arg2: __m256i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_testc_si256(arg1: __m256i, arg2: __m256i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_testnzc_si256(arg1: __m256i, arg2: __m256i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_testz_pd(arg1: __m256d, arg2: __m256d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_testc_pd(arg1: __m256d, arg2: __m256d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_testnzc_pd(arg1: __m256d, arg2: __m256d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_testz_pd(arg1: __m128d, arg2: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_testc_pd(arg1: __m128d, arg2: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_testnzc_pd(arg1: __m128d, arg2: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_testz_ps(arg1: __m256, arg2: __m256) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_testc_ps(arg1: __m256, arg2: __m256) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_testnzc_ps(arg1: __m256, arg2: __m256) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_testz_ps(arg1: __m128, arg2: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_testc_ps(arg1: __m128, arg2: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_testnzc_ps(arg1: __m128, arg2: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_movemask_pd(arg1: __m256d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_movemask_ps(arg1: __m256) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_setzero_pd() -> __m256d;
}
extern "C" {
    pub fn _mm256_setzero_ps() -> __m256;
}
extern "C" {
    pub fn _mm256_setzero_si256() -> __m256i;
}
extern "C" {
    pub fn _mm256_set_pd(arg1: f64, arg2: f64, arg3: f64, arg4: f64) -> __m256d;
}
extern "C" {
    pub fn _mm256_set_ps(
        arg1: f32,
        arg2: f32,
        arg3: f32,
        arg4: f32,
        arg5: f32,
        arg6: f32,
        arg7: f32,
        arg8: f32,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_set_epi8(
        arg1: ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_char,
        arg6: ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_char,
        arg8: ::std::os::raw::c_char,
        arg9: ::std::os::raw::c_char,
        arg10: ::std::os::raw::c_char,
        arg11: ::std::os::raw::c_char,
        arg12: ::std::os::raw::c_char,
        arg13: ::std::os::raw::c_char,
        arg14: ::std::os::raw::c_char,
        arg15: ::std::os::raw::c_char,
        arg16: ::std::os::raw::c_char,
        arg17: ::std::os::raw::c_char,
        arg18: ::std::os::raw::c_char,
        arg19: ::std::os::raw::c_char,
        arg20: ::std::os::raw::c_char,
        arg21: ::std::os::raw::c_char,
        arg22: ::std::os::raw::c_char,
        arg23: ::std::os::raw::c_char,
        arg24: ::std::os::raw::c_char,
        arg25: ::std::os::raw::c_char,
        arg26: ::std::os::raw::c_char,
        arg27: ::std::os::raw::c_char,
        arg28: ::std::os::raw::c_char,
        arg29: ::std::os::raw::c_char,
        arg30: ::std::os::raw::c_char,
        arg31: ::std::os::raw::c_char,
        arg32: ::std::os::raw::c_char,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_set_epi16(
        arg1: ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: ::std::os::raw::c_short,
        arg7: ::std::os::raw::c_short,
        arg8: ::std::os::raw::c_short,
        arg9: ::std::os::raw::c_short,
        arg10: ::std::os::raw::c_short,
        arg11: ::std::os::raw::c_short,
        arg12: ::std::os::raw::c_short,
        arg13: ::std::os::raw::c_short,
        arg14: ::std::os::raw::c_short,
        arg15: ::std::os::raw::c_short,
        arg16: ::std::os::raw::c_short,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_set_epi32(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_set_epi64x(
        arg1: ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_longlong,
        arg4: ::std::os::raw::c_longlong,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_setr_pd(arg1: f64, arg2: f64, arg3: f64, arg4: f64) -> __m256d;
}
extern "C" {
    pub fn _mm256_setr_ps(
        arg1: f32,
        arg2: f32,
        arg3: f32,
        arg4: f32,
        arg5: f32,
        arg6: f32,
        arg7: f32,
        arg8: f32,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_setr_epi8(
        arg1: ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_char,
        arg6: ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_char,
        arg8: ::std::os::raw::c_char,
        arg9: ::std::os::raw::c_char,
        arg10: ::std::os::raw::c_char,
        arg11: ::std::os::raw::c_char,
        arg12: ::std::os::raw::c_char,
        arg13: ::std::os::raw::c_char,
        arg14: ::std::os::raw::c_char,
        arg15: ::std::os::raw::c_char,
        arg16: ::std::os::raw::c_char,
        arg17: ::std::os::raw::c_char,
        arg18: ::std::os::raw::c_char,
        arg19: ::std::os::raw::c_char,
        arg20: ::std::os::raw::c_char,
        arg21: ::std::os::raw::c_char,
        arg22: ::std::os::raw::c_char,
        arg23: ::std::os::raw::c_char,
        arg24: ::std::os::raw::c_char,
        arg25: ::std::os::raw::c_char,
        arg26: ::std::os::raw::c_char,
        arg27: ::std::os::raw::c_char,
        arg28: ::std::os::raw::c_char,
        arg29: ::std::os::raw::c_char,
        arg30: ::std::os::raw::c_char,
        arg31: ::std::os::raw::c_char,
        arg32: ::std::os::raw::c_char,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_setr_epi16(
        arg1: ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: ::std::os::raw::c_short,
        arg7: ::std::os::raw::c_short,
        arg8: ::std::os::raw::c_short,
        arg9: ::std::os::raw::c_short,
        arg10: ::std::os::raw::c_short,
        arg11: ::std::os::raw::c_short,
        arg12: ::std::os::raw::c_short,
        arg13: ::std::os::raw::c_short,
        arg14: ::std::os::raw::c_short,
        arg15: ::std::os::raw::c_short,
        arg16: ::std::os::raw::c_short,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_setr_epi32(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_setr_epi64x(
        arg1: ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_longlong,
        arg4: ::std::os::raw::c_longlong,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_set1_pd(arg1: f64) -> __m256d;
}
extern "C" {
    pub fn _mm256_set1_ps(arg1: f32) -> __m256;
}
extern "C" {
    pub fn _mm256_set1_epi8(arg1: ::std::os::raw::c_char) -> __m256i;
}
extern "C" {
    pub fn _mm256_set1_epi16(arg1: ::std::os::raw::c_short) -> __m256i;
}
extern "C" {
    pub fn _mm256_set1_epi32(arg1: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_set1_epi64x(arg1: ::std::os::raw::c_longlong) -> __m256i;
}
extern "C" {
    pub fn _mm256_castpd_ps(arg1: __m256d) -> __m256;
}
extern "C" {
    pub fn _mm256_castps_pd(arg1: __m256) -> __m256d;
}
extern "C" {
    pub fn _mm256_castps_si256(arg1: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm256_castpd_si256(arg1: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm256_castsi256_ps(arg1: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm256_castsi256_pd(arg1: __m256i) -> __m256d;
}
extern "C" {
    pub fn _mm256_castps256_ps128(arg1: __m256) -> __m128;
}
extern "C" {
    pub fn _mm256_castpd256_pd128(arg1: __m256d) -> __m128d;
}
extern "C" {
    pub fn _mm256_castsi256_si128(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_castps128_ps256(arg1: __m128) -> __m256;
}
extern "C" {
    pub fn _mm256_castpd128_pd256(arg1: __m128d) -> __m256d;
}
extern "C" {
    pub fn _mm256_castsi128_si256(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_cvtph_ps(arg1: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm256_cvtph_ps(arg1: __m128i) -> __m256;
}
extern "C" {
    pub fn _mm_cvtps_ph(arg1: __m128, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtps_ph(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _xgetbv(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _xsetbv(arg1: ::std::os::raw::c_uint, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xsave(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xsave64(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xsaveopt(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xsaveopt64(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xsavec(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xsavec64(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xrstor(arg1: *const ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xrstor64(arg1: *const ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xsaves(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xsaves64(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xrstors(arg1: *const ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _xrstors64(arg1: *const ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _fxsave(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _fxsave64(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _fxrstor(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _fxrstor64(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _rdrand16_step(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _rdrand32_step(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _rdrand64_step(arg1: *mut ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _readfsbase_u32() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _readgsbase_u32() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _readfsbase_u64() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _readgsbase_u64() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _writefsbase_u32(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _writegsbase_u32(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _writefsbase_u64(arg1: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _writegsbase_u64(arg1: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _mm_fmadd_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fmadd_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_fmadd_ss(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fmadd_sd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_fmsub_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fmsub_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_fmsub_ss(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fmsub_sd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_fnmadd_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fnmadd_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_fnmadd_ss(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fnmadd_sd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_fnmsub_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fnmsub_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_fnmsub_ss(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fnmsub_sd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_fmadd_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_fmadd_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_fmsub_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_fmsub_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_fnmadd_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_fnmadd_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_fnmsub_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_fnmsub_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_fmaddsub_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fmaddsub_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_fmsubadd_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fmsubadd_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_fmaddsub_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_fmaddsub_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_fmsubadd_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_fmsubadd_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_cmpeq_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cmpeq_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cmpeq_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cmpeq_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cmpgt_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cmpgt_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cmpgt_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cmpgt_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_max_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_max_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_max_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_max_epu8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_max_epu16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_max_epu32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_min_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_min_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_min_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_min_epu8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_min_epu16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_min_epu32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_and_si256(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_andnot_si256(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_or_si256(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_xor_si256(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_abs_epi8(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_abs_epi16(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_abs_epi32(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_add_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_add_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_add_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_add_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_adds_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_adds_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_adds_epu8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_adds_epu16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sub_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sub_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sub_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sub_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_subs_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_subs_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_subs_epu8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_subs_epu16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_avg_epu8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_avg_epu16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_hadd_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_hadd_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_hadds_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_hsub_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_hsub_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_hsubs_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_madd_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maddubs_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mulhi_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mulhi_epu16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mullo_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mullo_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mul_epu32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mul_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sign_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sign_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sign_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mulhrs_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sad_epu8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mpsadbw_epu8(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_slli_si256(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_srli_si256(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_sll_epi16(arg1: __m256i, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sll_epi32(arg1: __m256i, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sll_epi64(arg1: __m256i, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_slli_epi16(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_slli_epi32(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_slli_epi64(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_sllv_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sllv_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_sllv_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sllv_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_sra_epi16(arg1: __m256i, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sra_epi32(arg1: __m256i, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_srai_epi16(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_srai_epi32(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_srav_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_srav_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_srl_epi16(arg1: __m256i, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_srl_epi32(arg1: __m256i, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_srl_epi64(arg1: __m256i, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_srli_epi16(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_srli_epi32(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_srli_epi64(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_srlv_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_srlv_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_srlv_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_srlv_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_blend_epi32(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm256_blend_epi32(arg1: __m256i, arg2: __m256i, arg3: ::std::os::raw::c_int)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_alignr_epi8(arg1: __m256i, arg2: __m256i, arg3: ::std::os::raw::c_int)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_blendv_epi8(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_blend_epi16(arg1: __m256i, arg2: __m256i, arg3: ::std::os::raw::c_int)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_packs_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_packs_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_packus_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_packus_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_unpackhi_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_unpackhi_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_unpackhi_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_unpackhi_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_unpacklo_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_unpacklo_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_unpacklo_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_unpacklo_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_shuffle_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_shuffle_epi32(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_shufflehi_epi16(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_shufflelo_epi16(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_extracti128_si256(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm256_inserti128_si256(
        arg1: __m256i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_broadcastss_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_broadcastsd_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_broadcastb_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_broadcastw_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_broadcastd_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_broadcastq_epi64(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_broadcastss_ps(arg1: __m128) -> __m256;
}
extern "C" {
    pub fn _mm256_broadcastsd_pd(arg1: __m128d) -> __m256d;
}
extern "C" {
    pub fn _mm256_broadcastb_epi8(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_broadcastw_epi16(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_broadcastd_epi32(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_broadcastq_epi64(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_broadcastsi128_si256(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepi8_epi16(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepi8_epi32(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepi8_epi64(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepi16_epi32(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepi16_epi64(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepi32_epi64(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepu8_epi16(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepu8_epi32(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepu8_epi64(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepu16_epi32(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepu16_epi64(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_cvtepu32_epi64(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_movemask_epi8(arg1: __m256i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_maskload_epi32(arg1: *const ::std::os::raw::c_int, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskload_epi64(arg1: *const ::std::os::raw::c_longlong, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskstore_epi32(arg1: *mut ::std::os::raw::c_int, arg2: __m128i, arg3: __m128i);
}
extern "C" {
    pub fn _mm_maskstore_epi64(arg1: *mut ::std::os::raw::c_longlong, arg2: __m128i, arg3: __m128i);
}
extern "C" {
    pub fn _mm256_maskload_epi32(arg1: *const ::std::os::raw::c_int, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskload_epi64(arg1: *const ::std::os::raw::c_longlong, arg2: __m256i)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_maskstore_epi32(arg1: *mut ::std::os::raw::c_int, arg2: __m256i, arg3: __m256i);
}
extern "C" {
    pub fn _mm256_maskstore_epi64(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: __m256i,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm256_permutevar8x32_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_permutevar8x32_ps(arg1: __m256, arg2: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm256_permute4x64_epi64(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_permute4x64_pd(arg1: __m256d, arg2: ::std::os::raw::c_int) -> __m256d;
}
extern "C" {
    pub fn _mm256_permute2x128_si256(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_stream_load_si256(arg1: *const __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_i32gather_pd(
        arg1: __m256d,
        arg2: *const f64,
        arg3: __m128i,
        arg4: __m256d,
        arg5: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_i32gather_ps(
        arg1: __m256,
        arg2: *const f32,
        arg3: __m256i,
        arg4: __m256,
        arg5: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_i64gather_pd(
        arg1: __m256d,
        arg2: *const f64,
        arg3: __m256i,
        arg4: __m256d,
        arg5: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_i64gather_ps(
        arg1: __m128,
        arg2: *const f32,
        arg3: __m256i,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_i32gather_pd(
        arg1: __m128d,
        arg2: *const f64,
        arg3: __m128i,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_i32gather_ps(
        arg1: __m128,
        arg2: *const f32,
        arg3: __m128i,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_i64gather_pd(
        arg1: __m128d,
        arg2: *const f64,
        arg3: __m128i,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_i64gather_ps(
        arg1: __m128,
        arg2: *const f32,
        arg3: __m128i,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_i32gather_epi32(
        arg1: __m256i,
        arg2: *const ::std::os::raw::c_int,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_i32gather_epi64(
        arg1: __m256i,
        arg2: *const ::std::os::raw::c_longlong,
        arg3: __m128i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_i64gather_epi32(
        arg1: __m128i,
        arg2: *const ::std::os::raw::c_int,
        arg3: __m256i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_i64gather_epi64(
        arg1: __m256i,
        arg2: *const ::std::os::raw::c_longlong,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_i32gather_epi32(
        arg1: __m128i,
        arg2: *const ::std::os::raw::c_int,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_i32gather_epi64(
        arg1: __m128i,
        arg2: *const ::std::os::raw::c_longlong,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_i64gather_epi32(
        arg1: __m128i,
        arg2: *const ::std::os::raw::c_int,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_i64gather_epi64(
        arg1: __m128i,
        arg2: *const ::std::os::raw::c_longlong,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_i32gather_pd(
        arg1: *const f64,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_i32gather_ps(
        arg1: *const f32,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_i64gather_pd(
        arg1: *const f64,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_i64gather_ps(
        arg1: *const f32,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_i32gather_pd(
        arg1: *const f64,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_i32gather_ps(arg1: *const f32, arg2: __m128i, arg3: ::std::os::raw::c_int)
        -> __m128;
}
extern "C" {
    pub fn _mm_i64gather_pd(
        arg1: *const f64,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_i64gather_ps(arg1: *const f32, arg2: __m128i, arg3: ::std::os::raw::c_int)
        -> __m128;
}
extern "C" {
    pub fn _mm256_i32gather_epi32(
        arg1: *const ::std::os::raw::c_int,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_i32gather_epi64(
        arg1: *const ::std::os::raw::c_longlong,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_i64gather_epi32(
        arg1: *const ::std::os::raw::c_int,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_i64gather_epi64(
        arg1: *const ::std::os::raw::c_longlong,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_i32gather_epi32(
        arg1: *const ::std::os::raw::c_int,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_i32gather_epi64(
        arg1: *const ::std::os::raw::c_longlong,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_i64gather_epi32(
        arg1: *const ::std::os::raw::c_int,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_i64gather_epi64(
        arg1: *const ::std::os::raw::c_longlong,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _bextr_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _bextr2_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _blsi_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _blsmsk_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _blsr_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _bzhi_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mulx_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _pdep_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _pext_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _rorx_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _sarx_i32(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _shlx_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _shrx_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _bextr_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _bextr2_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _blsi_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _blsmsk_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _blsr_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _bzhi_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mulx_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_ulonglong,
        arg3: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _pdep_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _pext_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rorx_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _sarx_i64(
        arg1: ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _shlx_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _shrx_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _lzcnt_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lzcnt_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _tzcnt_u16(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _tzcnt_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _tzcnt_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _invpcid(arg1: ::std::os::raw::c_uint, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _Store_HLERelease(arg1: *mut ::std::os::raw::c_long, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn _StorePointer_HLERelease(
        arg1: *mut *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn _InterlockedExchange_HLEAcquire(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedExchange_HLERelease(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedExchangePointer_HLEAcquire(
        arg1: *mut *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _InterlockedExchangePointer_HLERelease(
        arg1: *mut *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _InterlockedCompareExchange_HLEAcquire(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedCompareExchange_HLERelease(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedCompareExchange64_HLEAcquire(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedCompareExchange64_HLERelease(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedCompareExchangePointer_HLEAcquire(
        arg1: *mut *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _InterlockedCompareExchangePointer_HLERelease(
        arg1: *mut *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _InterlockedExchangeAdd_HLEAcquire(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedExchangeAdd_HLERelease(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedAnd_HLEAcquire(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedAnd_HLERelease(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedOr_HLEAcquire(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedOr_HLERelease(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedXor_HLEAcquire(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedXor_HLERelease(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _interlockedbittestandset_HLEAcquire(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _interlockedbittestandset_HLERelease(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _interlockedbittestandreset_HLEAcquire(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _interlockedbittestandreset_HLERelease(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _Store64_HLERelease(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    );
}
extern "C" {
    pub fn _InterlockedExchange64_HLEAcquire(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedExchange64_HLERelease(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedExchangeAdd64_HLEAcquire(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedExchangeAdd64_HLERelease(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedAnd64_HLEAcquire(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedAnd64_HLERelease(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedOr64_HLEAcquire(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedOr64_HLERelease(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedXor64_HLEAcquire(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedXor64_HLERelease(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _interlockedbittestandset64_HLEAcquire(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _interlockedbittestandset64_HLERelease(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _interlockedbittestandreset64_HLEAcquire(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _interlockedbittestandreset64_HLERelease(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _xbegin() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _xend();
}
extern "C" {
    pub fn _xabort(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _xtest() -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _rdseed16_step(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _rdseed32_step(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _rdseed64_step(arg1: *mut ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _addcarryx_u32(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _addcarryx_u64(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_ulonglong,
        arg3: ::std::os::raw::c_ulonglong,
        arg4: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _load_be_u16(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _load_be_u32(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _load_be_u64(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _store_be_u16(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn _store_be_u32(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _store_be_u64(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _mm_sha1msg1_epu32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sha1msg2_epu32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sha1nexte_epu32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sha1rnds4_epu32(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_sha256msg1_epu32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sha256msg2_epu32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sha256rnds2_epu32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _bnd_set_ptr_bounds(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _bnd_narrow_ptr_bounds(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _bnd_copy_ptr_bounds(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _bnd_init_ptr_bounds(arg1: *const ::std::os::raw::c_void)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _bnd_store_ptr_bounds(
        arg1: *mut *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn _bnd_chk_ptr_lbounds(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _bnd_chk_ptr_ubounds(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _bnd_chk_ptr_bounds(arg1: *const ::std::os::raw::c_void, arg2: usize);
}
extern "C" {
    pub fn _bnd_load_ptr_bounds(
        arg1: *mut *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _bnd_get_ptr_lbound(
        arg1: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn _bnd_get_ptr_ubound(
        arg1: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn _mm256_insert_epi8(
        arg1: __m256i,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_insert_epi16(
        arg1: __m256i,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_insert_epi32(
        arg1: __m256i,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_insert_epi64(
        arg1: __m256i,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_extract_epi8(arg1: __m256i, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_extract_epi16(
        arg1: __m256i,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_extract_epi32(
        arg1: __m256i,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm256_extract_epi64(
        arg1: __m256i,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm256_zextpd128_pd256(arg1: __m128d) -> __m256d;
}
extern "C" {
    pub fn _mm256_zextps128_ps256(arg1: __m128) -> __m256;
}
extern "C" {
    pub fn _mm256_zextsi128_si256(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _rdpid_u32() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _ptwrite32(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _ptwrite64(arg1: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _mm_dpbusd_avx_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_dpbusd_avx_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_dpbusds_avx_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_dpbusds_avx_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_dpwssd_avx_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_dpwssd_avx_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_dpwssds_avx_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_dpwssds_avx_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _pconfig_u32(arg1: ::std::os::raw::c_int, __data: *mut usize) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _wbnoinvd();
}
extern "C" {
    pub fn _encls_u32(arg1: ::std::os::raw::c_int, __data: *mut usize) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _enclu_u32(arg1: ::std::os::raw::c_int, __data: *mut usize) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _enclv_u32(arg1: ::std::os::raw::c_int, __data: *mut usize) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _div128(
        arg1: ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_longlong,
        arg4: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _udiv64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_uint,
        arg3: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _div64(
        arg1: ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_aesdec128kl_u8(
        arg1: *mut __m128i,
        arg2: __m128i,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm_aesdec256kl_u8(
        arg1: *mut __m128i,
        arg2: __m128i,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm_aesdecwide128kl_u8(
        arg1: *mut __m128i,
        arg2: *const __m128i,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm_aesdecwide256kl_u8(
        arg1: *mut __m128i,
        arg2: *const __m128i,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm_aesenc128kl_u8(
        arg1: *mut __m128i,
        arg2: __m128i,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm_aesenc256kl_u8(
        arg1: *mut __m128i,
        arg2: __m128i,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm_aesencwide128kl_u8(
        arg1: *mut __m128i,
        arg2: *const __m128i,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm_aesencwide256kl_u8(
        arg1: *mut __m128i,
        arg2: *const __m128i,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm_encodekey128_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: __m128i,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_encodekey256_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: __m128i,
        arg3: __m128i,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_loadiwkey(arg1: ::std::os::raw::c_uint, arg2: __m128i, arg3: __m128i, arg4: __m128i);
}
extern "C" {
    pub fn _rdpkru_u32() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _wrpkru(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _enqcmd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _enqcmds(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _incsspd(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _rdsspd() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _saveprevssp();
}
extern "C" {
    pub fn _rstorssp(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _wrssd(arg1: ::std::os::raw::c_uint, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _wrussd(arg1: ::std::os::raw::c_uint, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _setssbsy();
}
extern "C" {
    pub fn _clrssbsy(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _switchssp(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _incsspq(arg1: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _rdsspq() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wrssq(arg1: ::std::os::raw::c_ulonglong, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _wrussq(arg1: ::std::os::raw::c_ulonglong, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _mm_div_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_div_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_div_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_div_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_div_epu8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_div_epu16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_div_epu32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_div_epu64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rem_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rem_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rem_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rem_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rem_epu8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rem_epu16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rem_epu32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rem_epu64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_div_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_div_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_div_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_div_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_div_epu8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_div_epu16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_div_epu32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_div_epu64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rem_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rem_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rem_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rem_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rem_epu8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rem_epu16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rem_epu32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rem_epu64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_divrem_epi32(arg1: *mut __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_divrem_epu32(arg1: *mut __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_divrem_epi32(arg1: *mut __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_divrem_epu32(arg1: *mut __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_sin_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_sin_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_sin_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_sin_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_cos_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cos_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_cos_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_cos_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_sincos_ps(arg1: *mut __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_sincos_pd(arg1: *mut __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_sincos_ps(arg1: *mut __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_sincos_pd(arg1: *mut __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_tan_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_tan_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_tan_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_tan_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_asin_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_asin_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_asin_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_asin_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_acos_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_acos_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_acos_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_acos_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_atan_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_atan_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_atan_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_atan_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_atan2_ps(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_atan2_pd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_atan2_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_atan2_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_sind_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_sind_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_sind_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_sind_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_cosd_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cosd_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_cosd_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_cosd_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_tand_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_tand_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_tand_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_tand_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_sinh_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_sinh_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_sinh_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_sinh_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_cosh_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cosh_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_cosh_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_cosh_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_tanh_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_tanh_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_tanh_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_tanh_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_asinh_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_asinh_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_asinh_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_asinh_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_acosh_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_acosh_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_acosh_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_acosh_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_atanh_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_atanh_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_atanh_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_atanh_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_log_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_log_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_log_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_log_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_log1p_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_log1p_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_log1p_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_log1p_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_log10_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_log10_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_log10_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_log10_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_log2_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_log2_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_log2_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_log2_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_logb_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_logb_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_logb_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_logb_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_exp_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_exp_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_exp_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_exp_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_exp10_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_exp10_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_exp10_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_exp10_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_exp2_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_exp2_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_exp2_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_exp2_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_expm1_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_expm1_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_expm1_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_expm1_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_pow_ps(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_pow_pd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_pow_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_pow_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_trunc_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_trunc_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_trunc_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_trunc_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_svml_floor_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_svml_floor_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_svml_floor_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_svml_floor_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_svml_ceil_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_svml_ceil_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_svml_ceil_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_svml_ceil_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_svml_round_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_svml_round_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_svml_round_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_svml_round_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_fmod_ps(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fmod_pd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_fmod_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_fmod_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_svml_sqrt_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_svml_sqrt_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_svml_sqrt_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_svml_sqrt_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_invsqrt_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_invsqrt_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_invsqrt_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_invsqrt_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_cbrt_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cbrt_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_cbrt_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_cbrt_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_invcbrt_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_invcbrt_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_invcbrt_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_invcbrt_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_hypot_ps(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_hypot_pd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_hypot_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_hypot_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_cdfnorm_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cdfnorm_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_cdfnorm_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_cdfnorm_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_cdfnorminv_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cdfnorminv_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_cdfnorminv_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_cdfnorminv_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_cexp_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_cexp_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_clog_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_clog_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_csqrt_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_csqrt_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_erf_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_erf_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_erf_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_erf_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_erfc_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_erfc_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_erfc_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_erfc_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_erfcinv_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_erfcinv_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_erfcinv_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_erfcinv_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_erfinv_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_erfinv_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_erfinv_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_erfinv_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_cldemote(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _directstoreu_u32(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _directstoreu_u64(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _movdir64b(arg1: *mut ::std::os::raw::c_void, arg2: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _serialize();
}
extern "C" {
    pub fn _xsusldtrk();
}
extern "C" {
    pub fn _xresldtrk();
}
extern "C" {
    pub fn _umonitor(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _umwait(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _tpause(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _clui();
}
extern "C" {
    pub fn _stui();
}
extern "C" {
    pub fn _testui() -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _senduipi(arg1: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _hreset(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _mm_svml_cvtepu32_ps(arg1: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm256_svml_cvtepu32_ps(arg1: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm_svml_cvtepu32_pd(arg1: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm256_svml_cvtepu32_pd(arg1: __m128i) -> __m256d;
}
extern "C" {
    pub fn _mm_svml_cvtepi64_pd(arg1: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm256_svml_cvtepi64_pd(arg1: __m256i) -> __m256d;
}
extern "C" {
    pub fn _mm_svml_cvtepu64_pd(arg1: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm256_svml_cvtepu64_pd(arg1: __m256i) -> __m256d;
}
extern "C" {
    pub fn _castf32_u32(arg1: f32) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _castf64_u64(arg1: f64) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _castu32_f32(arg1: ::std::os::raw::c_uint) -> f32;
}
extern "C" {
    pub fn _castu64_f64(arg1: ::std::os::raw::c_ulonglong) -> f64;
}
pub type __mmask8 = ::std::os::raw::c_uchar;
pub type __mmask16 = ::std::os::raw::c_ushort;
pub type __mmask32 = ::std::os::raw::c_uint;
pub type __mmask64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub union __m512 {
    pub m512_f32: [f32; 16usize],
}
#[test]
fn bindgen_test_layout___m512() {
    const UNINIT: ::std::mem::MaybeUninit<__m512> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__m512>(),
        64usize,
        concat!("Size of: ", stringify!(__m512))
    );
    assert_eq!(
        ::std::mem::align_of::<__m512>(),
        64usize,
        concat!("Alignment of ", stringify!(__m512))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m512_f32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m512),
            "::",
            stringify!(m512_f32)
        )
    );
}
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct __m512d {
    pub m512d_f64: [f64; 8usize],
}
#[test]
fn bindgen_test_layout___m512d() {
    const UNINIT: ::std::mem::MaybeUninit<__m512d> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__m512d>(),
        64usize,
        concat!("Size of: ", stringify!(__m512d))
    );
    assert_eq!(
        ::std::mem::align_of::<__m512d>(),
        64usize,
        concat!("Alignment of ", stringify!(__m512d))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m512d_f64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m512d),
            "::",
            stringify!(m512d_f64)
        )
    );
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub union __m512i {
    pub m512i_i8: [::std::os::raw::c_char; 64usize],
    pub m512i_i16: [::std::os::raw::c_short; 32usize],
    pub m512i_i32: [::std::os::raw::c_int; 16usize],
    pub m512i_i64: [::std::os::raw::c_longlong; 8usize],
    pub m512i_u8: [::std::os::raw::c_uchar; 64usize],
    pub m512i_u16: [::std::os::raw::c_ushort; 32usize],
    pub m512i_u32: [::std::os::raw::c_uint; 16usize],
    pub m512i_u64: [::std::os::raw::c_ulonglong; 8usize],
}
#[test]
fn bindgen_test_layout___m512i() {
    const UNINIT: ::std::mem::MaybeUninit<__m512i> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__m512i>(),
        64usize,
        concat!("Size of: ", stringify!(__m512i))
    );
    assert_eq!(
        ::std::mem::align_of::<__m512i>(),
        64usize,
        concat!("Alignment of ", stringify!(__m512i))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m512i_i8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m512i),
            "::",
            stringify!(m512i_i8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m512i_i16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m512i),
            "::",
            stringify!(m512i_i16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m512i_i32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m512i),
            "::",
            stringify!(m512i_i32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m512i_i64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m512i),
            "::",
            stringify!(m512i_i64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m512i_u8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m512i),
            "::",
            stringify!(m512i_u8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m512i_u16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m512i),
            "::",
            stringify!(m512i_u16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m512i_u32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m512i),
            "::",
            stringify!(m512i_u32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m512i_u64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__m512i),
            "::",
            stringify!(m512i_u64)
        )
    );
}
extern "C" {
    pub fn _mm512_castps512_ps256(arg1: __m512) -> __m256;
}
extern "C" {
    pub fn _mm512_castpd_ps(arg1: __m512d) -> __m512;
}
extern "C" {
    pub fn _mm512_castps256_ps512(arg1: __m256) -> __m512;
}
extern "C" {
    pub fn _mm512_castsi512_ps(arg1: __m512i) -> __m512;
}
extern "C" {
    pub fn _mm512_castps128_ps512(arg1: __m128) -> __m512;
}
extern "C" {
    pub fn _mm512_castpd512_pd256(arg1: __m512d) -> __m256d;
}
extern "C" {
    pub fn _mm512_castpd256_pd512(arg1: __m256d) -> __m512d;
}
extern "C" {
    pub fn _mm512_castps_pd(arg1: __m512) -> __m512d;
}
extern "C" {
    pub fn _mm512_castsi512_pd(arg1: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_castpd128_pd512(arg1: __m128d) -> __m512d;
}
extern "C" {
    pub fn _mm512_castsi512_si256(arg1: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_castpd_si512(arg1: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_castps_si512(arg1: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_castsi256_si512(arg1: __m256i) -> __m512i;
}
pub const _MM_BROADCAST32_ENUM__MM_BROADCAST32_NONE: _MM_BROADCAST32_ENUM = 0;
pub const _MM_BROADCAST32_ENUM__MM_BROADCAST_1X16: _MM_BROADCAST32_ENUM = 1;
pub const _MM_BROADCAST32_ENUM__MM_BROADCAST_4X16: _MM_BROADCAST32_ENUM = 2;
pub type _MM_BROADCAST32_ENUM = ::std::os::raw::c_int;
pub const _MM_BROADCAST64_ENUM__MM_BROADCAST64_NONE: _MM_BROADCAST64_ENUM = 0;
pub const _MM_BROADCAST64_ENUM__MM_BROADCAST_1X8: _MM_BROADCAST64_ENUM = 1;
pub const _MM_BROADCAST64_ENUM__MM_BROADCAST_4X8: _MM_BROADCAST64_ENUM = 2;
pub type _MM_BROADCAST64_ENUM = ::std::os::raw::c_int;
pub const _MM_ROUND_MODE_ENUM__MM_ROUND_MODE_NEAREST: _MM_ROUND_MODE_ENUM = 0;
pub const _MM_ROUND_MODE_ENUM__MM_ROUND_MODE_DOWN: _MM_ROUND_MODE_ENUM = 1;
pub const _MM_ROUND_MODE_ENUM__MM_ROUND_MODE_UP: _MM_ROUND_MODE_ENUM = 2;
pub const _MM_ROUND_MODE_ENUM__MM_ROUND_MODE_TOWARD_ZERO: _MM_ROUND_MODE_ENUM = 3;
pub const _MM_ROUND_MODE_ENUM__MM_ROUND_MODE_DEFAULT: _MM_ROUND_MODE_ENUM = 4;
pub const _MM_ROUND_MODE_ENUM__MM_ROUND_MODE_NO_EXC: _MM_ROUND_MODE_ENUM = 8;
pub type _MM_ROUND_MODE_ENUM = ::std::os::raw::c_int;
pub const _MM_EXP_ADJ_ENUM__MM_EXPADJ_NONE: _MM_EXP_ADJ_ENUM = 0;
pub const _MM_EXP_ADJ_ENUM__MM_EXPADJ_4: _MM_EXP_ADJ_ENUM = 1;
pub const _MM_EXP_ADJ_ENUM__MM_EXPADJ_5: _MM_EXP_ADJ_ENUM = 2;
pub const _MM_EXP_ADJ_ENUM__MM_EXPADJ_8: _MM_EXP_ADJ_ENUM = 3;
pub const _MM_EXP_ADJ_ENUM__MM_EXPADJ_16: _MM_EXP_ADJ_ENUM = 4;
pub const _MM_EXP_ADJ_ENUM__MM_EXPADJ_24: _MM_EXP_ADJ_ENUM = 5;
pub const _MM_EXP_ADJ_ENUM__MM_EXPADJ_31: _MM_EXP_ADJ_ENUM = 6;
pub const _MM_EXP_ADJ_ENUM__MM_EXPADJ_32: _MM_EXP_ADJ_ENUM = 7;
pub type _MM_EXP_ADJ_ENUM = ::std::os::raw::c_int;
pub const _MM_INDEX_SCALE_ENUM__MM_SCALE_1: _MM_INDEX_SCALE_ENUM = 1;
pub const _MM_INDEX_SCALE_ENUM__MM_SCALE_2: _MM_INDEX_SCALE_ENUM = 2;
pub const _MM_INDEX_SCALE_ENUM__MM_SCALE_4: _MM_INDEX_SCALE_ENUM = 4;
pub const _MM_INDEX_SCALE_ENUM__MM_SCALE_8: _MM_INDEX_SCALE_ENUM = 8;
pub type _MM_INDEX_SCALE_ENUM = ::std::os::raw::c_int;
pub const _MM_PERM_ENUM__MM_PERM_AAAA: _MM_PERM_ENUM = 0;
pub const _MM_PERM_ENUM__MM_PERM_AAAB: _MM_PERM_ENUM = 1;
pub const _MM_PERM_ENUM__MM_PERM_AAAC: _MM_PERM_ENUM = 2;
pub const _MM_PERM_ENUM__MM_PERM_AAAD: _MM_PERM_ENUM = 3;
pub const _MM_PERM_ENUM__MM_PERM_AABA: _MM_PERM_ENUM = 4;
pub const _MM_PERM_ENUM__MM_PERM_AABB: _MM_PERM_ENUM = 5;
pub const _MM_PERM_ENUM__MM_PERM_AABC: _MM_PERM_ENUM = 6;
pub const _MM_PERM_ENUM__MM_PERM_AABD: _MM_PERM_ENUM = 7;
pub const _MM_PERM_ENUM__MM_PERM_AACA: _MM_PERM_ENUM = 8;
pub const _MM_PERM_ENUM__MM_PERM_AACB: _MM_PERM_ENUM = 9;
pub const _MM_PERM_ENUM__MM_PERM_AACC: _MM_PERM_ENUM = 10;
pub const _MM_PERM_ENUM__MM_PERM_AACD: _MM_PERM_ENUM = 11;
pub const _MM_PERM_ENUM__MM_PERM_AADA: _MM_PERM_ENUM = 12;
pub const _MM_PERM_ENUM__MM_PERM_AADB: _MM_PERM_ENUM = 13;
pub const _MM_PERM_ENUM__MM_PERM_AADC: _MM_PERM_ENUM = 14;
pub const _MM_PERM_ENUM__MM_PERM_AADD: _MM_PERM_ENUM = 15;
pub const _MM_PERM_ENUM__MM_PERM_ABAA: _MM_PERM_ENUM = 16;
pub const _MM_PERM_ENUM__MM_PERM_ABAB: _MM_PERM_ENUM = 17;
pub const _MM_PERM_ENUM__MM_PERM_ABAC: _MM_PERM_ENUM = 18;
pub const _MM_PERM_ENUM__MM_PERM_ABAD: _MM_PERM_ENUM = 19;
pub const _MM_PERM_ENUM__MM_PERM_ABBA: _MM_PERM_ENUM = 20;
pub const _MM_PERM_ENUM__MM_PERM_ABBB: _MM_PERM_ENUM = 21;
pub const _MM_PERM_ENUM__MM_PERM_ABBC: _MM_PERM_ENUM = 22;
pub const _MM_PERM_ENUM__MM_PERM_ABBD: _MM_PERM_ENUM = 23;
pub const _MM_PERM_ENUM__MM_PERM_ABCA: _MM_PERM_ENUM = 24;
pub const _MM_PERM_ENUM__MM_PERM_ABCB: _MM_PERM_ENUM = 25;
pub const _MM_PERM_ENUM__MM_PERM_ABCC: _MM_PERM_ENUM = 26;
pub const _MM_PERM_ENUM__MM_PERM_ABCD: _MM_PERM_ENUM = 27;
pub const _MM_PERM_ENUM__MM_PERM_ABDA: _MM_PERM_ENUM = 28;
pub const _MM_PERM_ENUM__MM_PERM_ABDB: _MM_PERM_ENUM = 29;
pub const _MM_PERM_ENUM__MM_PERM_ABDC: _MM_PERM_ENUM = 30;
pub const _MM_PERM_ENUM__MM_PERM_ABDD: _MM_PERM_ENUM = 31;
pub const _MM_PERM_ENUM__MM_PERM_ACAA: _MM_PERM_ENUM = 32;
pub const _MM_PERM_ENUM__MM_PERM_ACAB: _MM_PERM_ENUM = 33;
pub const _MM_PERM_ENUM__MM_PERM_ACAC: _MM_PERM_ENUM = 34;
pub const _MM_PERM_ENUM__MM_PERM_ACAD: _MM_PERM_ENUM = 35;
pub const _MM_PERM_ENUM__MM_PERM_ACBA: _MM_PERM_ENUM = 36;
pub const _MM_PERM_ENUM__MM_PERM_ACBB: _MM_PERM_ENUM = 37;
pub const _MM_PERM_ENUM__MM_PERM_ACBC: _MM_PERM_ENUM = 38;
pub const _MM_PERM_ENUM__MM_PERM_ACBD: _MM_PERM_ENUM = 39;
pub const _MM_PERM_ENUM__MM_PERM_ACCA: _MM_PERM_ENUM = 40;
pub const _MM_PERM_ENUM__MM_PERM_ACCB: _MM_PERM_ENUM = 41;
pub const _MM_PERM_ENUM__MM_PERM_ACCC: _MM_PERM_ENUM = 42;
pub const _MM_PERM_ENUM__MM_PERM_ACCD: _MM_PERM_ENUM = 43;
pub const _MM_PERM_ENUM__MM_PERM_ACDA: _MM_PERM_ENUM = 44;
pub const _MM_PERM_ENUM__MM_PERM_ACDB: _MM_PERM_ENUM = 45;
pub const _MM_PERM_ENUM__MM_PERM_ACDC: _MM_PERM_ENUM = 46;
pub const _MM_PERM_ENUM__MM_PERM_ACDD: _MM_PERM_ENUM = 47;
pub const _MM_PERM_ENUM__MM_PERM_ADAA: _MM_PERM_ENUM = 48;
pub const _MM_PERM_ENUM__MM_PERM_ADAB: _MM_PERM_ENUM = 49;
pub const _MM_PERM_ENUM__MM_PERM_ADAC: _MM_PERM_ENUM = 50;
pub const _MM_PERM_ENUM__MM_PERM_ADAD: _MM_PERM_ENUM = 51;
pub const _MM_PERM_ENUM__MM_PERM_ADBA: _MM_PERM_ENUM = 52;
pub const _MM_PERM_ENUM__MM_PERM_ADBB: _MM_PERM_ENUM = 53;
pub const _MM_PERM_ENUM__MM_PERM_ADBC: _MM_PERM_ENUM = 54;
pub const _MM_PERM_ENUM__MM_PERM_ADBD: _MM_PERM_ENUM = 55;
pub const _MM_PERM_ENUM__MM_PERM_ADCA: _MM_PERM_ENUM = 56;
pub const _MM_PERM_ENUM__MM_PERM_ADCB: _MM_PERM_ENUM = 57;
pub const _MM_PERM_ENUM__MM_PERM_ADCC: _MM_PERM_ENUM = 58;
pub const _MM_PERM_ENUM__MM_PERM_ADCD: _MM_PERM_ENUM = 59;
pub const _MM_PERM_ENUM__MM_PERM_ADDA: _MM_PERM_ENUM = 60;
pub const _MM_PERM_ENUM__MM_PERM_ADDB: _MM_PERM_ENUM = 61;
pub const _MM_PERM_ENUM__MM_PERM_ADDC: _MM_PERM_ENUM = 62;
pub const _MM_PERM_ENUM__MM_PERM_ADDD: _MM_PERM_ENUM = 63;
pub const _MM_PERM_ENUM__MM_PERM_BAAA: _MM_PERM_ENUM = 64;
pub const _MM_PERM_ENUM__MM_PERM_BAAB: _MM_PERM_ENUM = 65;
pub const _MM_PERM_ENUM__MM_PERM_BAAC: _MM_PERM_ENUM = 66;
pub const _MM_PERM_ENUM__MM_PERM_BAAD: _MM_PERM_ENUM = 67;
pub const _MM_PERM_ENUM__MM_PERM_BABA: _MM_PERM_ENUM = 68;
pub const _MM_PERM_ENUM__MM_PERM_BABB: _MM_PERM_ENUM = 69;
pub const _MM_PERM_ENUM__MM_PERM_BABC: _MM_PERM_ENUM = 70;
pub const _MM_PERM_ENUM__MM_PERM_BABD: _MM_PERM_ENUM = 71;
pub const _MM_PERM_ENUM__MM_PERM_BACA: _MM_PERM_ENUM = 72;
pub const _MM_PERM_ENUM__MM_PERM_BACB: _MM_PERM_ENUM = 73;
pub const _MM_PERM_ENUM__MM_PERM_BACC: _MM_PERM_ENUM = 74;
pub const _MM_PERM_ENUM__MM_PERM_BACD: _MM_PERM_ENUM = 75;
pub const _MM_PERM_ENUM__MM_PERM_BADA: _MM_PERM_ENUM = 76;
pub const _MM_PERM_ENUM__MM_PERM_BADB: _MM_PERM_ENUM = 77;
pub const _MM_PERM_ENUM__MM_PERM_BADC: _MM_PERM_ENUM = 78;
pub const _MM_PERM_ENUM__MM_PERM_BADD: _MM_PERM_ENUM = 79;
pub const _MM_PERM_ENUM__MM_PERM_BBAA: _MM_PERM_ENUM = 80;
pub const _MM_PERM_ENUM__MM_PERM_BBAB: _MM_PERM_ENUM = 81;
pub const _MM_PERM_ENUM__MM_PERM_BBAC: _MM_PERM_ENUM = 82;
pub const _MM_PERM_ENUM__MM_PERM_BBAD: _MM_PERM_ENUM = 83;
pub const _MM_PERM_ENUM__MM_PERM_BBBA: _MM_PERM_ENUM = 84;
pub const _MM_PERM_ENUM__MM_PERM_BBBB: _MM_PERM_ENUM = 85;
pub const _MM_PERM_ENUM__MM_PERM_BBBC: _MM_PERM_ENUM = 86;
pub const _MM_PERM_ENUM__MM_PERM_BBBD: _MM_PERM_ENUM = 87;
pub const _MM_PERM_ENUM__MM_PERM_BBCA: _MM_PERM_ENUM = 88;
pub const _MM_PERM_ENUM__MM_PERM_BBCB: _MM_PERM_ENUM = 89;
pub const _MM_PERM_ENUM__MM_PERM_BBCC: _MM_PERM_ENUM = 90;
pub const _MM_PERM_ENUM__MM_PERM_BBCD: _MM_PERM_ENUM = 91;
pub const _MM_PERM_ENUM__MM_PERM_BBDA: _MM_PERM_ENUM = 92;
pub const _MM_PERM_ENUM__MM_PERM_BBDB: _MM_PERM_ENUM = 93;
pub const _MM_PERM_ENUM__MM_PERM_BBDC: _MM_PERM_ENUM = 94;
pub const _MM_PERM_ENUM__MM_PERM_BBDD: _MM_PERM_ENUM = 95;
pub const _MM_PERM_ENUM__MM_PERM_BCAA: _MM_PERM_ENUM = 96;
pub const _MM_PERM_ENUM__MM_PERM_BCAB: _MM_PERM_ENUM = 97;
pub const _MM_PERM_ENUM__MM_PERM_BCAC: _MM_PERM_ENUM = 98;
pub const _MM_PERM_ENUM__MM_PERM_BCAD: _MM_PERM_ENUM = 99;
pub const _MM_PERM_ENUM__MM_PERM_BCBA: _MM_PERM_ENUM = 100;
pub const _MM_PERM_ENUM__MM_PERM_BCBB: _MM_PERM_ENUM = 101;
pub const _MM_PERM_ENUM__MM_PERM_BCBC: _MM_PERM_ENUM = 102;
pub const _MM_PERM_ENUM__MM_PERM_BCBD: _MM_PERM_ENUM = 103;
pub const _MM_PERM_ENUM__MM_PERM_BCCA: _MM_PERM_ENUM = 104;
pub const _MM_PERM_ENUM__MM_PERM_BCCB: _MM_PERM_ENUM = 105;
pub const _MM_PERM_ENUM__MM_PERM_BCCC: _MM_PERM_ENUM = 106;
pub const _MM_PERM_ENUM__MM_PERM_BCCD: _MM_PERM_ENUM = 107;
pub const _MM_PERM_ENUM__MM_PERM_BCDA: _MM_PERM_ENUM = 108;
pub const _MM_PERM_ENUM__MM_PERM_BCDB: _MM_PERM_ENUM = 109;
pub const _MM_PERM_ENUM__MM_PERM_BCDC: _MM_PERM_ENUM = 110;
pub const _MM_PERM_ENUM__MM_PERM_BCDD: _MM_PERM_ENUM = 111;
pub const _MM_PERM_ENUM__MM_PERM_BDAA: _MM_PERM_ENUM = 112;
pub const _MM_PERM_ENUM__MM_PERM_BDAB: _MM_PERM_ENUM = 113;
pub const _MM_PERM_ENUM__MM_PERM_BDAC: _MM_PERM_ENUM = 114;
pub const _MM_PERM_ENUM__MM_PERM_BDAD: _MM_PERM_ENUM = 115;
pub const _MM_PERM_ENUM__MM_PERM_BDBA: _MM_PERM_ENUM = 116;
pub const _MM_PERM_ENUM__MM_PERM_BDBB: _MM_PERM_ENUM = 117;
pub const _MM_PERM_ENUM__MM_PERM_BDBC: _MM_PERM_ENUM = 118;
pub const _MM_PERM_ENUM__MM_PERM_BDBD: _MM_PERM_ENUM = 119;
pub const _MM_PERM_ENUM__MM_PERM_BDCA: _MM_PERM_ENUM = 120;
pub const _MM_PERM_ENUM__MM_PERM_BDCB: _MM_PERM_ENUM = 121;
pub const _MM_PERM_ENUM__MM_PERM_BDCC: _MM_PERM_ENUM = 122;
pub const _MM_PERM_ENUM__MM_PERM_BDCD: _MM_PERM_ENUM = 123;
pub const _MM_PERM_ENUM__MM_PERM_BDDA: _MM_PERM_ENUM = 124;
pub const _MM_PERM_ENUM__MM_PERM_BDDB: _MM_PERM_ENUM = 125;
pub const _MM_PERM_ENUM__MM_PERM_BDDC: _MM_PERM_ENUM = 126;
pub const _MM_PERM_ENUM__MM_PERM_BDDD: _MM_PERM_ENUM = 127;
pub const _MM_PERM_ENUM__MM_PERM_CAAA: _MM_PERM_ENUM = 128;
pub const _MM_PERM_ENUM__MM_PERM_CAAB: _MM_PERM_ENUM = 129;
pub const _MM_PERM_ENUM__MM_PERM_CAAC: _MM_PERM_ENUM = 130;
pub const _MM_PERM_ENUM__MM_PERM_CAAD: _MM_PERM_ENUM = 131;
pub const _MM_PERM_ENUM__MM_PERM_CABA: _MM_PERM_ENUM = 132;
pub const _MM_PERM_ENUM__MM_PERM_CABB: _MM_PERM_ENUM = 133;
pub const _MM_PERM_ENUM__MM_PERM_CABC: _MM_PERM_ENUM = 134;
pub const _MM_PERM_ENUM__MM_PERM_CABD: _MM_PERM_ENUM = 135;
pub const _MM_PERM_ENUM__MM_PERM_CACA: _MM_PERM_ENUM = 136;
pub const _MM_PERM_ENUM__MM_PERM_CACB: _MM_PERM_ENUM = 137;
pub const _MM_PERM_ENUM__MM_PERM_CACC: _MM_PERM_ENUM = 138;
pub const _MM_PERM_ENUM__MM_PERM_CACD: _MM_PERM_ENUM = 139;
pub const _MM_PERM_ENUM__MM_PERM_CADA: _MM_PERM_ENUM = 140;
pub const _MM_PERM_ENUM__MM_PERM_CADB: _MM_PERM_ENUM = 141;
pub const _MM_PERM_ENUM__MM_PERM_CADC: _MM_PERM_ENUM = 142;
pub const _MM_PERM_ENUM__MM_PERM_CADD: _MM_PERM_ENUM = 143;
pub const _MM_PERM_ENUM__MM_PERM_CBAA: _MM_PERM_ENUM = 144;
pub const _MM_PERM_ENUM__MM_PERM_CBAB: _MM_PERM_ENUM = 145;
pub const _MM_PERM_ENUM__MM_PERM_CBAC: _MM_PERM_ENUM = 146;
pub const _MM_PERM_ENUM__MM_PERM_CBAD: _MM_PERM_ENUM = 147;
pub const _MM_PERM_ENUM__MM_PERM_CBBA: _MM_PERM_ENUM = 148;
pub const _MM_PERM_ENUM__MM_PERM_CBBB: _MM_PERM_ENUM = 149;
pub const _MM_PERM_ENUM__MM_PERM_CBBC: _MM_PERM_ENUM = 150;
pub const _MM_PERM_ENUM__MM_PERM_CBBD: _MM_PERM_ENUM = 151;
pub const _MM_PERM_ENUM__MM_PERM_CBCA: _MM_PERM_ENUM = 152;
pub const _MM_PERM_ENUM__MM_PERM_CBCB: _MM_PERM_ENUM = 153;
pub const _MM_PERM_ENUM__MM_PERM_CBCC: _MM_PERM_ENUM = 154;
pub const _MM_PERM_ENUM__MM_PERM_CBCD: _MM_PERM_ENUM = 155;
pub const _MM_PERM_ENUM__MM_PERM_CBDA: _MM_PERM_ENUM = 156;
pub const _MM_PERM_ENUM__MM_PERM_CBDB: _MM_PERM_ENUM = 157;
pub const _MM_PERM_ENUM__MM_PERM_CBDC: _MM_PERM_ENUM = 158;
pub const _MM_PERM_ENUM__MM_PERM_CBDD: _MM_PERM_ENUM = 159;
pub const _MM_PERM_ENUM__MM_PERM_CCAA: _MM_PERM_ENUM = 160;
pub const _MM_PERM_ENUM__MM_PERM_CCAB: _MM_PERM_ENUM = 161;
pub const _MM_PERM_ENUM__MM_PERM_CCAC: _MM_PERM_ENUM = 162;
pub const _MM_PERM_ENUM__MM_PERM_CCAD: _MM_PERM_ENUM = 163;
pub const _MM_PERM_ENUM__MM_PERM_CCBA: _MM_PERM_ENUM = 164;
pub const _MM_PERM_ENUM__MM_PERM_CCBB: _MM_PERM_ENUM = 165;
pub const _MM_PERM_ENUM__MM_PERM_CCBC: _MM_PERM_ENUM = 166;
pub const _MM_PERM_ENUM__MM_PERM_CCBD: _MM_PERM_ENUM = 167;
pub const _MM_PERM_ENUM__MM_PERM_CCCA: _MM_PERM_ENUM = 168;
pub const _MM_PERM_ENUM__MM_PERM_CCCB: _MM_PERM_ENUM = 169;
pub const _MM_PERM_ENUM__MM_PERM_CCCC: _MM_PERM_ENUM = 170;
pub const _MM_PERM_ENUM__MM_PERM_CCCD: _MM_PERM_ENUM = 171;
pub const _MM_PERM_ENUM__MM_PERM_CCDA: _MM_PERM_ENUM = 172;
pub const _MM_PERM_ENUM__MM_PERM_CCDB: _MM_PERM_ENUM = 173;
pub const _MM_PERM_ENUM__MM_PERM_CCDC: _MM_PERM_ENUM = 174;
pub const _MM_PERM_ENUM__MM_PERM_CCDD: _MM_PERM_ENUM = 175;
pub const _MM_PERM_ENUM__MM_PERM_CDAA: _MM_PERM_ENUM = 176;
pub const _MM_PERM_ENUM__MM_PERM_CDAB: _MM_PERM_ENUM = 177;
pub const _MM_PERM_ENUM__MM_PERM_CDAC: _MM_PERM_ENUM = 178;
pub const _MM_PERM_ENUM__MM_PERM_CDAD: _MM_PERM_ENUM = 179;
pub const _MM_PERM_ENUM__MM_PERM_CDBA: _MM_PERM_ENUM = 180;
pub const _MM_PERM_ENUM__MM_PERM_CDBB: _MM_PERM_ENUM = 181;
pub const _MM_PERM_ENUM__MM_PERM_CDBC: _MM_PERM_ENUM = 182;
pub const _MM_PERM_ENUM__MM_PERM_CDBD: _MM_PERM_ENUM = 183;
pub const _MM_PERM_ENUM__MM_PERM_CDCA: _MM_PERM_ENUM = 184;
pub const _MM_PERM_ENUM__MM_PERM_CDCB: _MM_PERM_ENUM = 185;
pub const _MM_PERM_ENUM__MM_PERM_CDCC: _MM_PERM_ENUM = 186;
pub const _MM_PERM_ENUM__MM_PERM_CDCD: _MM_PERM_ENUM = 187;
pub const _MM_PERM_ENUM__MM_PERM_CDDA: _MM_PERM_ENUM = 188;
pub const _MM_PERM_ENUM__MM_PERM_CDDB: _MM_PERM_ENUM = 189;
pub const _MM_PERM_ENUM__MM_PERM_CDDC: _MM_PERM_ENUM = 190;
pub const _MM_PERM_ENUM__MM_PERM_CDDD: _MM_PERM_ENUM = 191;
pub const _MM_PERM_ENUM__MM_PERM_DAAA: _MM_PERM_ENUM = 192;
pub const _MM_PERM_ENUM__MM_PERM_DAAB: _MM_PERM_ENUM = 193;
pub const _MM_PERM_ENUM__MM_PERM_DAAC: _MM_PERM_ENUM = 194;
pub const _MM_PERM_ENUM__MM_PERM_DAAD: _MM_PERM_ENUM = 195;
pub const _MM_PERM_ENUM__MM_PERM_DABA: _MM_PERM_ENUM = 196;
pub const _MM_PERM_ENUM__MM_PERM_DABB: _MM_PERM_ENUM = 197;
pub const _MM_PERM_ENUM__MM_PERM_DABC: _MM_PERM_ENUM = 198;
pub const _MM_PERM_ENUM__MM_PERM_DABD: _MM_PERM_ENUM = 199;
pub const _MM_PERM_ENUM__MM_PERM_DACA: _MM_PERM_ENUM = 200;
pub const _MM_PERM_ENUM__MM_PERM_DACB: _MM_PERM_ENUM = 201;
pub const _MM_PERM_ENUM__MM_PERM_DACC: _MM_PERM_ENUM = 202;
pub const _MM_PERM_ENUM__MM_PERM_DACD: _MM_PERM_ENUM = 203;
pub const _MM_PERM_ENUM__MM_PERM_DADA: _MM_PERM_ENUM = 204;
pub const _MM_PERM_ENUM__MM_PERM_DADB: _MM_PERM_ENUM = 205;
pub const _MM_PERM_ENUM__MM_PERM_DADC: _MM_PERM_ENUM = 206;
pub const _MM_PERM_ENUM__MM_PERM_DADD: _MM_PERM_ENUM = 207;
pub const _MM_PERM_ENUM__MM_PERM_DBAA: _MM_PERM_ENUM = 208;
pub const _MM_PERM_ENUM__MM_PERM_DBAB: _MM_PERM_ENUM = 209;
pub const _MM_PERM_ENUM__MM_PERM_DBAC: _MM_PERM_ENUM = 210;
pub const _MM_PERM_ENUM__MM_PERM_DBAD: _MM_PERM_ENUM = 211;
pub const _MM_PERM_ENUM__MM_PERM_DBBA: _MM_PERM_ENUM = 212;
pub const _MM_PERM_ENUM__MM_PERM_DBBB: _MM_PERM_ENUM = 213;
pub const _MM_PERM_ENUM__MM_PERM_DBBC: _MM_PERM_ENUM = 214;
pub const _MM_PERM_ENUM__MM_PERM_DBBD: _MM_PERM_ENUM = 215;
pub const _MM_PERM_ENUM__MM_PERM_DBCA: _MM_PERM_ENUM = 216;
pub const _MM_PERM_ENUM__MM_PERM_DBCB: _MM_PERM_ENUM = 217;
pub const _MM_PERM_ENUM__MM_PERM_DBCC: _MM_PERM_ENUM = 218;
pub const _MM_PERM_ENUM__MM_PERM_DBCD: _MM_PERM_ENUM = 219;
pub const _MM_PERM_ENUM__MM_PERM_DBDA: _MM_PERM_ENUM = 220;
pub const _MM_PERM_ENUM__MM_PERM_DBDB: _MM_PERM_ENUM = 221;
pub const _MM_PERM_ENUM__MM_PERM_DBDC: _MM_PERM_ENUM = 222;
pub const _MM_PERM_ENUM__MM_PERM_DBDD: _MM_PERM_ENUM = 223;
pub const _MM_PERM_ENUM__MM_PERM_DCAA: _MM_PERM_ENUM = 224;
pub const _MM_PERM_ENUM__MM_PERM_DCAB: _MM_PERM_ENUM = 225;
pub const _MM_PERM_ENUM__MM_PERM_DCAC: _MM_PERM_ENUM = 226;
pub const _MM_PERM_ENUM__MM_PERM_DCAD: _MM_PERM_ENUM = 227;
pub const _MM_PERM_ENUM__MM_PERM_DCBA: _MM_PERM_ENUM = 228;
pub const _MM_PERM_ENUM__MM_PERM_DCBB: _MM_PERM_ENUM = 229;
pub const _MM_PERM_ENUM__MM_PERM_DCBC: _MM_PERM_ENUM = 230;
pub const _MM_PERM_ENUM__MM_PERM_DCBD: _MM_PERM_ENUM = 231;
pub const _MM_PERM_ENUM__MM_PERM_DCCA: _MM_PERM_ENUM = 232;
pub const _MM_PERM_ENUM__MM_PERM_DCCB: _MM_PERM_ENUM = 233;
pub const _MM_PERM_ENUM__MM_PERM_DCCC: _MM_PERM_ENUM = 234;
pub const _MM_PERM_ENUM__MM_PERM_DCCD: _MM_PERM_ENUM = 235;
pub const _MM_PERM_ENUM__MM_PERM_DCDA: _MM_PERM_ENUM = 236;
pub const _MM_PERM_ENUM__MM_PERM_DCDB: _MM_PERM_ENUM = 237;
pub const _MM_PERM_ENUM__MM_PERM_DCDC: _MM_PERM_ENUM = 238;
pub const _MM_PERM_ENUM__MM_PERM_DCDD: _MM_PERM_ENUM = 239;
pub const _MM_PERM_ENUM__MM_PERM_DDAA: _MM_PERM_ENUM = 240;
pub const _MM_PERM_ENUM__MM_PERM_DDAB: _MM_PERM_ENUM = 241;
pub const _MM_PERM_ENUM__MM_PERM_DDAC: _MM_PERM_ENUM = 242;
pub const _MM_PERM_ENUM__MM_PERM_DDAD: _MM_PERM_ENUM = 243;
pub const _MM_PERM_ENUM__MM_PERM_DDBA: _MM_PERM_ENUM = 244;
pub const _MM_PERM_ENUM__MM_PERM_DDBB: _MM_PERM_ENUM = 245;
pub const _MM_PERM_ENUM__MM_PERM_DDBC: _MM_PERM_ENUM = 246;
pub const _MM_PERM_ENUM__MM_PERM_DDBD: _MM_PERM_ENUM = 247;
pub const _MM_PERM_ENUM__MM_PERM_DDCA: _MM_PERM_ENUM = 248;
pub const _MM_PERM_ENUM__MM_PERM_DDCB: _MM_PERM_ENUM = 249;
pub const _MM_PERM_ENUM__MM_PERM_DDCC: _MM_PERM_ENUM = 250;
pub const _MM_PERM_ENUM__MM_PERM_DDCD: _MM_PERM_ENUM = 251;
pub const _MM_PERM_ENUM__MM_PERM_DDDA: _MM_PERM_ENUM = 252;
pub const _MM_PERM_ENUM__MM_PERM_DDDB: _MM_PERM_ENUM = 253;
pub const _MM_PERM_ENUM__MM_PERM_DDDC: _MM_PERM_ENUM = 254;
pub const _MM_PERM_ENUM__MM_PERM_DDDD: _MM_PERM_ENUM = 255;
pub type _MM_PERM_ENUM = ::std::os::raw::c_int;
pub const _MM_FIXUPRESULT_ENUM__MM_FIXUP_NO_CHANGE: _MM_FIXUPRESULT_ENUM = 0;
pub const _MM_FIXUPRESULT_ENUM__MM_FIXUP_NEG_INF: _MM_FIXUPRESULT_ENUM = 1;
pub const _MM_FIXUPRESULT_ENUM__MM_FIXUP_NEG_ZERO: _MM_FIXUPRESULT_ENUM = 2;
pub const _MM_FIXUPRESULT_ENUM__MM_FIXUP_POS_ZERO: _MM_FIXUPRESULT_ENUM = 3;
pub const _MM_FIXUPRESULT_ENUM__MM_FIXUP_POS_INF: _MM_FIXUPRESULT_ENUM = 4;
pub const _MM_FIXUPRESULT_ENUM__MM_FIXUP_NAN: _MM_FIXUPRESULT_ENUM = 5;
pub const _MM_FIXUPRESULT_ENUM__MM_FIXUP_MAX_FLOAT: _MM_FIXUPRESULT_ENUM = 6;
pub const _MM_FIXUPRESULT_ENUM__MM_FIXUP_MIN_FLOAT: _MM_FIXUPRESULT_ENUM = 7;
pub type _MM_FIXUPRESULT_ENUM = ::std::os::raw::c_int;
pub const _MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_1_2: _MM_MANTISSA_NORM_ENUM = 0;
pub const _MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_p5_2: _MM_MANTISSA_NORM_ENUM = 1;
pub const _MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_p5_1: _MM_MANTISSA_NORM_ENUM = 2;
pub const _MM_MANTISSA_NORM_ENUM__MM_MANT_NORM_p75_1p5: _MM_MANTISSA_NORM_ENUM = 3;
pub type _MM_MANTISSA_NORM_ENUM = ::std::os::raw::c_int;
pub const _MM_MANTISSA_SIGN_ENUM__MM_MANT_SIGN_src: _MM_MANTISSA_SIGN_ENUM = 0;
pub const _MM_MANTISSA_SIGN_ENUM__MM_MANT_SIGN_zero: _MM_MANTISSA_SIGN_ENUM = 1;
pub const _MM_MANTISSA_SIGN_ENUM__MM_MANT_SIGN_nan: _MM_MANTISSA_SIGN_ENUM = 2;
pub type _MM_MANTISSA_SIGN_ENUM = ::std::os::raw::c_int;
pub const _MM_CMPINT_ENUM__MM_CMPINT_EQ: _MM_CMPINT_ENUM = 0;
pub const _MM_CMPINT_ENUM__MM_CMPINT_LT: _MM_CMPINT_ENUM = 1;
pub const _MM_CMPINT_ENUM__MM_CMPINT_LE: _MM_CMPINT_ENUM = 2;
pub const _MM_CMPINT_ENUM__MM_CMPINT_UNUSED: _MM_CMPINT_ENUM = 3;
pub const _MM_CMPINT_ENUM__MM_CMPINT_NE: _MM_CMPINT_ENUM = 4;
pub const _MM_CMPINT_ENUM__MM_CMPINT_NLT: _MM_CMPINT_ENUM = 5;
pub const _MM_CMPINT_ENUM__MM_CMPINT_NLE: _MM_CMPINT_ENUM = 6;
pub type _MM_CMPINT_ENUM = ::std::os::raw::c_int;
extern "C" {
    pub fn _mm512_setzero_ps() -> __m512;
}
extern "C" {
    pub fn _mm512_setzero_pd() -> __m512d;
}
extern "C" {
    pub fn _mm512_set_ps(
        arg1: f32,
        arg2: f32,
        arg3: f32,
        arg4: f32,
        arg5: f32,
        arg6: f32,
        arg7: f32,
        arg8: f32,
        arg9: f32,
        arg10: f32,
        arg11: f32,
        arg12: f32,
        arg13: f32,
        arg14: f32,
        arg15: f32,
        arg16: f32,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_set_pd(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: f64,
        arg6: f64,
        arg7: f64,
        arg8: f64,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_setr_ps(
        arg1: f32,
        arg2: f32,
        arg3: f32,
        arg4: f32,
        arg5: f32,
        arg6: f32,
        arg7: f32,
        arg8: f32,
        arg9: f32,
        arg10: f32,
        arg11: f32,
        arg12: f32,
        arg13: f32,
        arg14: f32,
        arg15: f32,
        arg16: f32,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_setr_pd(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: f64,
        arg6: f64,
        arg7: f64,
        arg8: f64,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_set1_ps(arg1: f32) -> __m512;
}
extern "C" {
    pub fn _mm512_set1_pd(arg1: f64) -> __m512d;
}
extern "C" {
    pub fn _mm512_load_ps(arg1: *const ::std::os::raw::c_void) -> __m512;
}
extern "C" {
    pub fn _mm512_load_pd(arg1: *const ::std::os::raw::c_void) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_load_ps(arg1: __mmask16, arg2: *const ::std::os::raw::c_void) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_load_pd(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_load_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_load_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_loadu_ps(arg1: *const ::std::os::raw::c_void) -> __m512;
}
extern "C" {
    pub fn _mm512_loadu_pd(arg1: *const ::std::os::raw::c_void) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_loadu_ps(arg1: __mmask16, arg2: *const ::std::os::raw::c_void) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_loadu_pd(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_loadu_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_loadu_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_store_ps(arg1: *mut ::std::os::raw::c_void, arg2: __m512);
}
extern "C" {
    pub fn _mm512_store_pd(arg1: *mut ::std::os::raw::c_void, arg2: __m512d);
}
extern "C" {
    pub fn _mm512_storeu_ps(arg1: *mut ::std::os::raw::c_void, arg2: __m512);
}
extern "C" {
    pub fn _mm512_storeu_pd(arg1: *mut ::std::os::raw::c_void, arg2: __m512d);
}
extern "C" {
    pub fn _mm512_mask_store_ps(arg1: *mut ::std::os::raw::c_void, arg2: __mmask16, arg3: __m512);
}
extern "C" {
    pub fn _mm512_mask_store_pd(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m512d);
}
extern "C" {
    pub fn _mm512_mask_storeu_ps(arg1: *mut ::std::os::raw::c_void, arg2: __mmask16, arg3: __m512);
}
extern "C" {
    pub fn _mm512_mask_storeu_pd(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m512d);
}
extern "C" {
    pub fn _mm512_add_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_add_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_add_ps(arg1: __m512, arg2: __mmask16, arg3: __m512, arg4: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_add_round_ps(arg1: __m512, arg2: __m512, arg3: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_add_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_add_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_add_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_add_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_add_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_add_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_add_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_add_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_sub_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_sub_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_sub_ps(arg1: __m512, arg2: __mmask16, arg3: __m512, arg4: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_sub_round_ps(arg1: __m512, arg2: __m512, arg3: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_sub_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_sub_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_sub_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_sub_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_sub_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_sub_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_sub_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_sub_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mul_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_mul_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_mul_ps(arg1: __m512, arg2: __mmask16, arg3: __m512, arg4: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mul_round_ps(arg1: __m512, arg2: __m512, arg3: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_mul_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_mul_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mul_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_mul_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_mul_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mul_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_mul_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_mul_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_div_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_div_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_div_ps(arg1: __m512, arg2: __mmask16, arg3: __m512, arg4: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_div_round_ps(arg1: __m512, arg2: __m512, arg3: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_div_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_div_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_div_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_div_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_div_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_div_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_div_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_div_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fmadd_ps(arg1: __m512, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fmadd_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fmadd_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fmadd_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fmadd_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fmadd_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fmadd_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fmadd_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fmadd_pd(arg1: __m512d, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fmadd_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fmadd_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fmadd_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fmadd_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fmadd_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fmadd_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fmadd_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fmsub_ps(arg1: __m512, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fmsub_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fmsub_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fmsub_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fmsub_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fmsub_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fmsub_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fmsub_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fmsub_pd(arg1: __m512d, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fmsub_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fmsub_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fmsub_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fmsub_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fmsub_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fmsub_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fmsub_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fmaddsub_ps(arg1: __m512, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fmaddsub_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fmaddsub_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fmaddsub_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fmaddsub_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fmaddsub_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fmaddsub_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fmaddsub_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fmaddsub_pd(arg1: __m512d, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fmaddsub_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fmaddsub_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fmaddsub_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fmaddsub_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fmaddsub_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fmaddsub_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fmaddsub_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fmsubadd_ps(arg1: __m512, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fmsubadd_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fmsubadd_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fmsubadd_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fmsubadd_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fmsubadd_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fmsubadd_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fmsubadd_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fmsubadd_pd(arg1: __m512d, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fmsubadd_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fmsubadd_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fmsubadd_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fmsubadd_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fmsubadd_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fmsubadd_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fmsubadd_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fnmadd_ps(arg1: __m512, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fnmadd_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fnmadd_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fnmadd_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fnmadd_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fnmadd_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fnmadd_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fnmadd_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fnmadd_pd(arg1: __m512d, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fnmadd_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fnmadd_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fnmadd_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fnmadd_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fnmadd_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fnmadd_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fnmadd_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fnmsub_ps(arg1: __m512, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fnmsub_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fnmsub_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fnmsub_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fnmsub_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fnmsub_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask3_fnmsub_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fnmsub_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fnmsub_pd(arg1: __m512d, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fnmsub_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fnmsub_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fnmsub_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fnmsub_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fnmsub_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask3_fnmsub_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fnmsub_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_sqrt_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_sqrt_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_sqrt_ps(arg1: __mmask16, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_sqrt_pd(arg1: __mmask8, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_sqrt_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_sqrt_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_sqrt_round_ps(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_sqrt_round_pd(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_sqrt_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_sqrt_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_sqrt_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_sqrt_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_abs_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_abs_ps(arg1: __mmask16, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_abs_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_abs_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_abs_pd(arg1: __mmask8, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_abs_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_max_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_max_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_max_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_max_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_max_ps(arg1: __m512, arg2: __mmask16, arg3: __m512, arg4: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_max_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_max_round_ps(arg1: __m512, arg2: __m512, arg3: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_max_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_max_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_max_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_max_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_max_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_min_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_min_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_min_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_min_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_min_ps(arg1: __m512, arg2: __mmask16, arg3: __m512, arg4: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_min_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_min_round_ps(arg1: __m512, arg2: __m512, arg3: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_min_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_min_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_min_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_min_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_min_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_rcp14_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_rcp14_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_rcp14_ps(arg1: __mmask16, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_rcp14_pd(arg1: __mmask8, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_rcp14_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_rcp14_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_rsqrt14_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_rsqrt14_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_rsqrt14_ps(arg1: __mmask16, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_rsqrt14_pd(arg1: __mmask8, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_rsqrt14_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_rsqrt14_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvtps_pd(arg1: __m256) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvtpd_ps(arg1: __m512d) -> __m256;
}
extern "C" {
    pub fn _mm512_maskz_cvtps_pd(arg1: __mmask8, arg2: __m256) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_cvtpd_ps(arg1: __mmask8, arg2: __m512d) -> __m256;
}
extern "C" {
    pub fn _mm512_mask_cvtps_pd(arg1: __m512d, arg2: __mmask8, arg3: __m256) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvtpd_ps(arg1: __m256, arg2: __mmask8, arg3: __m512d) -> __m256;
}
extern "C" {
    pub fn _mm512_cvt_roundps_pd(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvt_roundpd_ps(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundps_pd(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundpd_ps(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundps_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundpd_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm512_cmp_ps_mask(arg1: __m512, arg2: __m512, arg3: ::std::os::raw::c_int)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmp_ps_mask(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmp_round_ps_mask(
        arg1: __m512,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmp_round_ps_mask(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmp_pd_mask(
        arg1: __m512d,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmp_pd_mask(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmp_round_pd_mask(
        arg1: __m512d,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmp_round_pd_mask(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm512_broadcast_f32x2(arg1: __m128) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_broadcast_f32x2(arg1: __m512, arg2: __mmask16, arg3: __m128) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_broadcast_f32x2(arg1: __mmask16, arg2: __m128) -> __m512;
}
extern "C" {
    pub fn _mm512_broadcast_f32x4(arg1: __m128) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_broadcast_f32x4(arg1: __m512, arg2: __mmask16, arg3: __m128) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_broadcast_f32x4(arg1: __mmask16, arg2: __m128) -> __m512;
}
extern "C" {
    pub fn _mm512_broadcast_f32x8(arg1: __m256) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_broadcast_f32x8(arg1: __m512, arg2: __mmask16, arg3: __m256) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_broadcast_f32x8(arg1: __mmask16, arg2: __m256) -> __m512;
}
extern "C" {
    pub fn _mm512_broadcast_f64x2(arg1: __m128d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_broadcast_f64x2(arg1: __m512d, arg2: __mmask8, arg3: __m128d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_broadcast_f64x2(arg1: __mmask8, arg2: __m128d) -> __m512d;
}
extern "C" {
    pub fn _mm512_broadcast_f64x4(arg1: __m256d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_broadcast_f64x4(arg1: __m512d, arg2: __mmask8, arg3: __m256d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_broadcast_f64x4(arg1: __mmask8, arg2: __m256d) -> __m512d;
}
extern "C" {
    pub fn _mm512_broadcastsd_pd(arg1: __m128d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_broadcastsd_pd(arg1: __m512d, arg2: __mmask8, arg3: __m128d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_broadcastsd_pd(arg1: __mmask8, arg2: __m128d) -> __m512d;
}
extern "C" {
    pub fn _mm512_broadcastss_ps(arg1: __m128) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_broadcastss_ps(arg1: __m512, arg2: __mmask16, arg3: __m128) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_broadcastss_ps(arg1: __mmask16, arg2: __m128) -> __m512;
}
extern "C" {
    pub fn _mm512_extractf32x4_ps(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm512_mask_extractf32x4_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm512_maskz_extractf32x4_ps(
        arg1: __mmask8,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm512_extractf32x8_ps(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm512_mask_extractf32x8_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm512_maskz_extractf32x8_ps(
        arg1: __mmask8,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm512_extractf64x2_pd(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm512_mask_extractf64x2_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm512_maskz_extractf64x2_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm512_extractf64x4_pd(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m256d;
}
extern "C" {
    pub fn _mm512_mask_extractf64x4_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm512_maskz_extractf64x4_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm512_insertf32x4(arg1: __m512, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_insertf32x4(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_insertf32x4(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_insertf32x8(arg1: __m512, arg2: __m256, arg3: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_insertf32x8(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m256,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_insertf32x8(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_insertf64x2(arg1: __m512d, arg2: __m128d, arg3: ::std::os::raw::c_int)
        -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_insertf64x2(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_insertf64x2(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_insertf64x4(arg1: __m512d, arg2: __m256d, arg3: ::std::os::raw::c_int)
        -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_insertf64x4(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m256d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_insertf64x4(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_shuffle_f32x4(arg1: __m512, arg2: __m512, arg3: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_shuffle_f32x4(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_shuffle_f32x4(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_shuffle_f64x2(
        arg1: __m512d,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_shuffle_f64x2(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_shuffle_f64x2(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_shuffle_pd(arg1: __m512d, arg2: __m512d, arg3: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_shuffle_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_shuffle_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_shuffle_ps(arg1: __m512, arg2: __m512, arg3: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_shuffle_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_shuffle_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_cmpeq_ps_mask(arg1: __m512, arg2: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmple_ps_mask(arg1: __m512, arg2: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmplt_ps_mask(arg1: __m512, arg2: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpneq_ps_mask(arg1: __m512, arg2: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpnle_ps_mask(arg1: __m512, arg2: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpnlt_ps_mask(arg1: __m512, arg2: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpord_ps_mask(arg1: __m512, arg2: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpunord_ps_mask(arg1: __m512, arg2: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpeq_ps_mask(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmple_ps_mask(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmplt_ps_mask(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpneq_ps_mask(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpnle_ps_mask(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpnlt_ps_mask(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpord_ps_mask(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpunord_ps_mask(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpeq_pd_mask(arg1: __m512d, arg2: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmple_pd_mask(arg1: __m512d, arg2: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmplt_pd_mask(arg1: __m512d, arg2: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpneq_pd_mask(arg1: __m512d, arg2: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpnle_pd_mask(arg1: __m512d, arg2: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpnlt_pd_mask(arg1: __m512d, arg2: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpord_pd_mask(arg1: __m512d, arg2: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpunord_pd_mask(arg1: __m512d, arg2: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpeq_pd_mask(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmple_pd_mask(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmplt_pd_mask(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpneq_pd_mask(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpnle_pd_mask(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpnlt_pd_mask(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpord_pd_mask(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpunord_pd_mask(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __mmask8;
}
extern "C" {
    pub fn _mm512_setzero_si512() -> __m512i;
}
extern "C" {
    pub fn _mm512_set_epi8(
        arg1: ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_char,
        arg6: ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_char,
        arg8: ::std::os::raw::c_char,
        arg9: ::std::os::raw::c_char,
        arg10: ::std::os::raw::c_char,
        arg11: ::std::os::raw::c_char,
        arg12: ::std::os::raw::c_char,
        arg13: ::std::os::raw::c_char,
        arg14: ::std::os::raw::c_char,
        arg15: ::std::os::raw::c_char,
        arg16: ::std::os::raw::c_char,
        arg17: ::std::os::raw::c_char,
        arg18: ::std::os::raw::c_char,
        arg19: ::std::os::raw::c_char,
        arg20: ::std::os::raw::c_char,
        arg21: ::std::os::raw::c_char,
        arg22: ::std::os::raw::c_char,
        arg23: ::std::os::raw::c_char,
        arg24: ::std::os::raw::c_char,
        arg25: ::std::os::raw::c_char,
        arg26: ::std::os::raw::c_char,
        arg27: ::std::os::raw::c_char,
        arg28: ::std::os::raw::c_char,
        arg29: ::std::os::raw::c_char,
        arg30: ::std::os::raw::c_char,
        arg31: ::std::os::raw::c_char,
        arg32: ::std::os::raw::c_char,
        arg33: ::std::os::raw::c_char,
        arg34: ::std::os::raw::c_char,
        arg35: ::std::os::raw::c_char,
        arg36: ::std::os::raw::c_char,
        arg37: ::std::os::raw::c_char,
        arg38: ::std::os::raw::c_char,
        arg39: ::std::os::raw::c_char,
        arg40: ::std::os::raw::c_char,
        arg41: ::std::os::raw::c_char,
        arg42: ::std::os::raw::c_char,
        arg43: ::std::os::raw::c_char,
        arg44: ::std::os::raw::c_char,
        arg45: ::std::os::raw::c_char,
        arg46: ::std::os::raw::c_char,
        arg47: ::std::os::raw::c_char,
        arg48: ::std::os::raw::c_char,
        arg49: ::std::os::raw::c_char,
        arg50: ::std::os::raw::c_char,
        arg51: ::std::os::raw::c_char,
        arg52: ::std::os::raw::c_char,
        arg53: ::std::os::raw::c_char,
        arg54: ::std::os::raw::c_char,
        arg55: ::std::os::raw::c_char,
        arg56: ::std::os::raw::c_char,
        arg57: ::std::os::raw::c_char,
        arg58: ::std::os::raw::c_char,
        arg59: ::std::os::raw::c_char,
        arg60: ::std::os::raw::c_char,
        arg61: ::std::os::raw::c_char,
        arg62: ::std::os::raw::c_char,
        arg63: ::std::os::raw::c_char,
        arg64: ::std::os::raw::c_char,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_set_epi16(
        arg1: ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: ::std::os::raw::c_short,
        arg7: ::std::os::raw::c_short,
        arg8: ::std::os::raw::c_short,
        arg9: ::std::os::raw::c_short,
        arg10: ::std::os::raw::c_short,
        arg11: ::std::os::raw::c_short,
        arg12: ::std::os::raw::c_short,
        arg13: ::std::os::raw::c_short,
        arg14: ::std::os::raw::c_short,
        arg15: ::std::os::raw::c_short,
        arg16: ::std::os::raw::c_short,
        arg17: ::std::os::raw::c_short,
        arg18: ::std::os::raw::c_short,
        arg19: ::std::os::raw::c_short,
        arg20: ::std::os::raw::c_short,
        arg21: ::std::os::raw::c_short,
        arg22: ::std::os::raw::c_short,
        arg23: ::std::os::raw::c_short,
        arg24: ::std::os::raw::c_short,
        arg25: ::std::os::raw::c_short,
        arg26: ::std::os::raw::c_short,
        arg27: ::std::os::raw::c_short,
        arg28: ::std::os::raw::c_short,
        arg29: ::std::os::raw::c_short,
        arg30: ::std::os::raw::c_short,
        arg31: ::std::os::raw::c_short,
        arg32: ::std::os::raw::c_short,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_set_epi32(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
        arg10: ::std::os::raw::c_int,
        arg11: ::std::os::raw::c_int,
        arg12: ::std::os::raw::c_int,
        arg13: ::std::os::raw::c_int,
        arg14: ::std::os::raw::c_int,
        arg15: ::std::os::raw::c_int,
        arg16: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_set_epi64(
        arg1: ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_longlong,
        arg4: ::std::os::raw::c_longlong,
        arg5: ::std::os::raw::c_longlong,
        arg6: ::std::os::raw::c_longlong,
        arg7: ::std::os::raw::c_longlong,
        arg8: ::std::os::raw::c_longlong,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_setr_epi8(
        arg1: ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_char,
        arg6: ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_char,
        arg8: ::std::os::raw::c_char,
        arg9: ::std::os::raw::c_char,
        arg10: ::std::os::raw::c_char,
        arg11: ::std::os::raw::c_char,
        arg12: ::std::os::raw::c_char,
        arg13: ::std::os::raw::c_char,
        arg14: ::std::os::raw::c_char,
        arg15: ::std::os::raw::c_char,
        arg16: ::std::os::raw::c_char,
        arg17: ::std::os::raw::c_char,
        arg18: ::std::os::raw::c_char,
        arg19: ::std::os::raw::c_char,
        arg20: ::std::os::raw::c_char,
        arg21: ::std::os::raw::c_char,
        arg22: ::std::os::raw::c_char,
        arg23: ::std::os::raw::c_char,
        arg24: ::std::os::raw::c_char,
        arg25: ::std::os::raw::c_char,
        arg26: ::std::os::raw::c_char,
        arg27: ::std::os::raw::c_char,
        arg28: ::std::os::raw::c_char,
        arg29: ::std::os::raw::c_char,
        arg30: ::std::os::raw::c_char,
        arg31: ::std::os::raw::c_char,
        arg32: ::std::os::raw::c_char,
        arg33: ::std::os::raw::c_char,
        arg34: ::std::os::raw::c_char,
        arg35: ::std::os::raw::c_char,
        arg36: ::std::os::raw::c_char,
        arg37: ::std::os::raw::c_char,
        arg38: ::std::os::raw::c_char,
        arg39: ::std::os::raw::c_char,
        arg40: ::std::os::raw::c_char,
        arg41: ::std::os::raw::c_char,
        arg42: ::std::os::raw::c_char,
        arg43: ::std::os::raw::c_char,
        arg44: ::std::os::raw::c_char,
        arg45: ::std::os::raw::c_char,
        arg46: ::std::os::raw::c_char,
        arg47: ::std::os::raw::c_char,
        arg48: ::std::os::raw::c_char,
        arg49: ::std::os::raw::c_char,
        arg50: ::std::os::raw::c_char,
        arg51: ::std::os::raw::c_char,
        arg52: ::std::os::raw::c_char,
        arg53: ::std::os::raw::c_char,
        arg54: ::std::os::raw::c_char,
        arg55: ::std::os::raw::c_char,
        arg56: ::std::os::raw::c_char,
        arg57: ::std::os::raw::c_char,
        arg58: ::std::os::raw::c_char,
        arg59: ::std::os::raw::c_char,
        arg60: ::std::os::raw::c_char,
        arg61: ::std::os::raw::c_char,
        arg62: ::std::os::raw::c_char,
        arg63: ::std::os::raw::c_char,
        arg64: ::std::os::raw::c_char,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_setr_epi16(
        arg1: ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::os::raw::c_short,
        arg5: ::std::os::raw::c_short,
        arg6: ::std::os::raw::c_short,
        arg7: ::std::os::raw::c_short,
        arg8: ::std::os::raw::c_short,
        arg9: ::std::os::raw::c_short,
        arg10: ::std::os::raw::c_short,
        arg11: ::std::os::raw::c_short,
        arg12: ::std::os::raw::c_short,
        arg13: ::std::os::raw::c_short,
        arg14: ::std::os::raw::c_short,
        arg15: ::std::os::raw::c_short,
        arg16: ::std::os::raw::c_short,
        arg17: ::std::os::raw::c_short,
        arg18: ::std::os::raw::c_short,
        arg19: ::std::os::raw::c_short,
        arg20: ::std::os::raw::c_short,
        arg21: ::std::os::raw::c_short,
        arg22: ::std::os::raw::c_short,
        arg23: ::std::os::raw::c_short,
        arg24: ::std::os::raw::c_short,
        arg25: ::std::os::raw::c_short,
        arg26: ::std::os::raw::c_short,
        arg27: ::std::os::raw::c_short,
        arg28: ::std::os::raw::c_short,
        arg29: ::std::os::raw::c_short,
        arg30: ::std::os::raw::c_short,
        arg31: ::std::os::raw::c_short,
        arg32: ::std::os::raw::c_short,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_setr_epi32(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_int,
        arg10: ::std::os::raw::c_int,
        arg11: ::std::os::raw::c_int,
        arg12: ::std::os::raw::c_int,
        arg13: ::std::os::raw::c_int,
        arg14: ::std::os::raw::c_int,
        arg15: ::std::os::raw::c_int,
        arg16: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_setr_epi64(
        arg1: ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_longlong,
        arg4: ::std::os::raw::c_longlong,
        arg5: ::std::os::raw::c_longlong,
        arg6: ::std::os::raw::c_longlong,
        arg7: ::std::os::raw::c_longlong,
        arg8: ::std::os::raw::c_longlong,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_set1_epi8(arg1: ::std::os::raw::c_char) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_set1_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: ::std::os::raw::c_char,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_set1_epi8(arg1: __mmask64, arg2: ::std::os::raw::c_char) -> __m512i;
}
extern "C" {
    pub fn _mm512_set1_epi16(arg1: ::std::os::raw::c_short) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_set1_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: ::std::os::raw::c_short,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_set1_epi16(arg1: __mmask32, arg2: ::std::os::raw::c_short) -> __m512i;
}
extern "C" {
    pub fn _mm512_set1_epi32(arg1: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_set1_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_set1_epi32(arg1: __mmask16, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_set1_epi64(arg1: ::std::os::raw::c_longlong) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_set1_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: ::std::os::raw::c_longlong,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_set1_epi64(arg1: __mmask8, arg2: ::std::os::raw::c_longlong) -> __m512i;
}
extern "C" {
    pub fn _mm512_add_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_add_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_add_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_add_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_add_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_add_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_add_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_add_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_add_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_add_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_add_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_add_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_adds_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_adds_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_adds_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_adds_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_adds_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_adds_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_adds_epu8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_adds_epu8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_adds_epu8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_adds_epu16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_adds_epu16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_adds_epu16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_abs_epi8(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_abs_epi8(arg1: __m512i, arg2: __mmask64, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_abs_epi8(arg1: __mmask64, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_abs_epi16(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_abs_epi16(arg1: __m512i, arg2: __mmask32, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_abs_epi16(arg1: __mmask32, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_abs_epi32(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_abs_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_abs_epi32(arg1: __mmask16, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_abs_epi64(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_abs_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_abs_epi64(arg1: __mmask8, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_broadcast_i32x2(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_broadcast_i32x2(arg1: __m512i, arg2: __mmask16, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_broadcast_i32x2(arg1: __mmask16, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_broadcast_i32x4(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_broadcast_i32x4(arg1: __m512i, arg2: __mmask16, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_broadcast_i32x4(arg1: __mmask16, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_broadcast_i32x8(arg1: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_broadcast_i32x8(arg1: __m512i, arg2: __mmask16, arg3: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_broadcast_i32x8(arg1: __mmask16, arg2: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_broadcast_i64x2(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_broadcast_i64x2(arg1: __m512i, arg2: __mmask8, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_broadcast_i64x2(arg1: __mmask8, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_broadcast_i64x4(arg1: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_broadcast_i64x4(arg1: __m512i, arg2: __mmask8, arg3: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_broadcast_i64x4(arg1: __mmask8, arg2: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_broadcastb_epi8(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_broadcastb_epi8(arg1: __m512i, arg2: __mmask64, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_broadcastb_epi8(arg1: __mmask64, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_broadcastw_epi16(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_broadcastw_epi16(arg1: __m512i, arg2: __mmask32, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_broadcastw_epi16(arg1: __mmask32, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_broadcastd_epi32(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_broadcastd_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_broadcastd_epi32(arg1: __mmask16, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_broadcastq_epi64(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_broadcastq_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_broadcastq_epi64(arg1: __mmask8, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_broadcastmw_epi32(arg1: __mmask16) -> __m512i;
}
extern "C" {
    pub fn _mm512_broadcastmb_epi64(arg1: __mmask8) -> __m512i;
}
extern "C" {
    pub fn _mm512_sub_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sub_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sub_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sub_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sub_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sub_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sub_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sub_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sub_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sub_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sub_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sub_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_subs_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_subs_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_subs_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_subs_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_subs_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_subs_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_subs_epu8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_subs_epu8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_subs_epu8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_subs_epu16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_subs_epu16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_subs_epu16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_max_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_max_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_max_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_max_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_max_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_max_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_max_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_max_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_max_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_max_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_max_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_max_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_max_epu8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_max_epu8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_max_epu8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_max_epu16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_max_epu16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_max_epu16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_max_epu32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_max_epu32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_max_epu32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_max_epu64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_max_epu64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_max_epu64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_min_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_min_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_min_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_min_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_min_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_min_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_min_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_min_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_min_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_min_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_min_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_min_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_min_epu8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_min_epu8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_min_epu8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_min_epu16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_min_epu16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_min_epu16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_min_epu32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_min_epu32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_min_epu32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_min_epu64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_min_epu64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_min_epu64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mul_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mul_epi32(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mul_epi32(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mul_epu32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mul_epu32(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mul_epu32(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mulhi_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mulhi_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mulhi_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mulhi_epu16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mulhi_epu16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mulhi_epu16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mullo_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mullo_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mullo_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mullo_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mullo_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mullo_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mullo_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mullo_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mullo_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mullox_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mullox_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mulhrs_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mulhrs_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mulhrs_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_load_epi32(arg1: *const ::std::os::raw::c_void) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_load_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_load_epi32(arg1: __mmask16, arg2: *const ::std::os::raw::c_void)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_load_epi64(arg1: *const ::std::os::raw::c_void) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_load_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_load_epi64(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m512i;
}
extern "C" {
    pub fn _mm512_loadu_epi8(arg1: *const ::std::os::raw::c_void) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_loadu_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_loadu_epi8(arg1: __mmask64, arg2: *const ::std::os::raw::c_void)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_loadu_epi16(arg1: *const ::std::os::raw::c_void) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_loadu_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_loadu_epi16(
        arg1: __mmask32,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_loadu_epi32(arg1: *const ::std::os::raw::c_void) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_loadu_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_loadu_epi32(
        arg1: __mmask16,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_loadu_epi64(arg1: *const ::std::os::raw::c_void) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_loadu_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_loadu_epi64(arg1: __mmask8, arg2: *const ::std::os::raw::c_void)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_store_epi32(arg1: *mut ::std::os::raw::c_void, arg2: __m512i);
}
extern "C" {
    pub fn _mm512_mask_store_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_store_epi64(arg1: *mut ::std::os::raw::c_void, arg2: __m512i);
}
extern "C" {
    pub fn _mm512_mask_store_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_storeu_epi8(arg1: *mut ::std::os::raw::c_void, arg2: __m512i);
}
extern "C" {
    pub fn _mm512_mask_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask64,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_storeu_epi16(arg1: *mut ::std::os::raw::c_void, arg2: __m512i);
}
extern "C" {
    pub fn _mm512_mask_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask32,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_storeu_epi32(arg1: *mut ::std::os::raw::c_void, arg2: __m512i);
}
extern "C" {
    pub fn _mm512_mask_storeu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_storeu_epi64(arg1: *mut ::std::os::raw::c_void, arg2: __m512i);
}
extern "C" {
    pub fn _mm512_mask_storeu_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_extracti32x4_epi32(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_extracti32x4_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm512_maskz_extracti32x4_epi32(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm512_extracti32x8_epi32(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_extracti32x8_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_extracti32x8_epi32(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_extracti64x2_epi64(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_extracti64x2_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm512_maskz_extracti64x2_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm512_extracti64x4_epi64(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_extracti64x4_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_extracti64x4_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_inserti32x4(arg1: __m512i, arg2: __m128i, arg3: ::std::os::raw::c_int)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_inserti32x4(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_inserti32x4(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_inserti32x8(arg1: __m512i, arg2: __m256i, arg3: ::std::os::raw::c_int)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_inserti32x8(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_inserti32x8(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_inserti64x2(arg1: __m512i, arg2: __m128i, arg3: ::std::os::raw::c_int)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_inserti64x2(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_inserti64x2(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_inserti64x4(arg1: __m512i, arg2: __m256i, arg3: ::std::os::raw::c_int)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_inserti64x4(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_inserti64x4(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_shuffle_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shuffle_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shuffle_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_shuffle_epi32(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shuffle_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shuffle_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_shuffle_i32x4(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shuffle_i32x4(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shuffle_i32x4(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_shuffle_i64x2(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shuffle_i64x2(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shuffle_i64x2(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_shufflehi_epi16(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shufflehi_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shufflehi_epi16(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_shufflelo_epi16(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shufflelo_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shufflelo_epi16(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mov_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_mov_ps(arg1: __mmask16, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_mov_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_mov_pd(arg1: __mmask8, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_mov_epi8(arg1: __m512i, arg2: __mmask64, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mov_epi8(arg1: __mmask64, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mov_epi16(arg1: __m512i, arg2: __mmask32, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mov_epi16(arg1: __mmask32, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mov_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mov_epi32(arg1: __mmask16, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_mov_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_mov_epi64(arg1: __mmask8, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_movedup_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_movedup_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_movedup_pd(arg1: __mmask8, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_movehdup_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_movehdup_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_movehdup_ps(arg1: __mmask16, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_moveldup_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_moveldup_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_moveldup_ps(arg1: __mmask16, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_movm_epi8(arg1: __mmask64) -> __m512i;
}
extern "C" {
    pub fn _mm512_movm_epi16(arg1: __mmask32) -> __m512i;
}
extern "C" {
    pub fn _mm512_movm_epi32(arg1: __mmask16) -> __m512i;
}
extern "C" {
    pub fn _mm512_movm_epi64(arg1: __mmask8) -> __m512i;
}
extern "C" {
    pub fn _mm512_movepi8_mask(arg1: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_movepi16_mask(arg1: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_movepi32_mask(arg1: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_movepi64_mask(arg1: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_alignr_epi8(arg1: __m512i, arg2: __m512i, arg3: ::std::os::raw::c_int)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_alignr_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_alignr_epi8(
        arg1: __mmask64,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_alignr_epi32(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_alignr_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_alignr_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_alignr_epi64(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_alignr_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_alignr_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_and_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_and_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_and_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_and_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_and_ps(arg1: __m512, arg2: __mmask16, arg3: __m512, arg4: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_and_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_and_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_and_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_and_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_and_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_and_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_and_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_andnot_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_andnot_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_andnot_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_andnot_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_andnot_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_andnot_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_andnot_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_andnot_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_andnot_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_andnot_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_andnot_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_andnot_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_or_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_or_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_or_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_or_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_or_ps(arg1: __m512, arg2: __mmask16, arg3: __m512, arg4: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_or_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_or_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_or_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_or_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_or_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_or_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_or_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_xor_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_xor_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_xor_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_xor_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_xor_ps(arg1: __m512, arg2: __mmask16, arg3: __m512, arg4: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_xor_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_xor_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_xor_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_xor_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_xor_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_xor_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_xor_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_blend_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_blend_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_blend_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_blend_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_blend_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_blend_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sll_epi16(arg1: __m512i, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sll_epi32(arg1: __m512i, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sll_epi64(arg1: __m512i, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_slli_epi16(arg1: __m512i, arg2: ::std::os::raw::c_uint) -> __m512i;
}
extern "C" {
    pub fn _mm512_slli_epi32(arg1: __m512i, arg2: ::std::os::raw::c_uint) -> __m512i;
}
extern "C" {
    pub fn _mm512_slli_epi64(arg1: __m512i, arg2: ::std::os::raw::c_uint) -> __m512i;
}
extern "C" {
    pub fn _mm512_sllv_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sllv_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sllv_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sll_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m128i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sll_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sll_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m128i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sll_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sll_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m128i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sll_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_slli_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_slli_epi16(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_slli_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_slli_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_slli_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_slli_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sllv_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sllv_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sllv_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sllv_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sllv_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sllv_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_srl_epi16(arg1: __m512i, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_srl_epi32(arg1: __m512i, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_srl_epi64(arg1: __m512i, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_srli_epi16(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_srli_epi32(arg1: __m512i, arg2: ::std::os::raw::c_uint) -> __m512i;
}
extern "C" {
    pub fn _mm512_srli_epi64(arg1: __m512i, arg2: ::std::os::raw::c_uint) -> __m512i;
}
extern "C" {
    pub fn _mm512_srlv_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_srlv_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_srlv_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srl_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m128i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srl_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srl_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m128i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srl_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srl_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m128i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srl_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srli_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srli_epi16(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srli_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srli_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srli_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srli_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srlv_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srlv_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srlv_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srlv_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srlv_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srlv_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sra_epi16(arg1: __m512i, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sra_epi32(arg1: __m512i, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sra_epi64(arg1: __m512i, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_srai_epi16(arg1: __m512i, arg2: ::std::os::raw::c_uint) -> __m512i;
}
extern "C" {
    pub fn _mm512_srai_epi32(arg1: __m512i, arg2: ::std::os::raw::c_uint) -> __m512i;
}
extern "C" {
    pub fn _mm512_srai_epi64(arg1: __m512i, arg2: ::std::os::raw::c_uint) -> __m512i;
}
extern "C" {
    pub fn _mm512_srav_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_srav_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_srav_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sra_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m128i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sra_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sra_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m128i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sra_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_sra_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m128i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_sra_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srai_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srai_epi16(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srai_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srai_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srai_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srai_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srav_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srav_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srav_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srav_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_srav_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_srav_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_bslli_epi128(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_bsrli_epi128(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_rol_epi32(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_rol_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_rol_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_rol_epi64(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_rol_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_rol_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_rolv_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_rolv_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_rolv_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_rolv_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_rolv_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_rolv_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_ror_epi32(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_ror_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_ror_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_ror_epi64(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_ror_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_ror_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_rorv_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_rorv_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_rorv_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_rorv_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_rorv_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_rorv_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_unpackhi_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_unpackhi_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_unpackhi_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_unpackhi_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_unpackhi_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_unpackhi_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_unpacklo_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_unpacklo_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_unpacklo_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_unpacklo_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_unpacklo_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_unpacklo_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_unpackhi_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_unpackhi_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_unpackhi_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_unpackhi_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_unpackhi_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_unpackhi_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_unpackhi_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_unpackhi_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_unpackhi_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_unpackhi_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_unpackhi_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_unpackhi_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_unpacklo_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_unpacklo_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_unpacklo_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_unpacklo_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_unpacklo_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_unpacklo_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_unpacklo_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_unpacklo_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_unpacklo_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_unpacklo_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_unpacklo_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_unpacklo_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_getexp_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_getexp_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_getexp_ps(arg1: __mmask16, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_getexp_round_ps(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_getexp_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_getexp_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_getexp_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_getexp_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_getexp_pd(arg1: __mmask8, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_getexp_round_pd(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_getexp_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_getexp_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_getmant_ps(
        arg1: __m512,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_getmant_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_getmant_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_getmant_round_ps(
        arg1: __m512,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_getmant_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_getmant_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_getmant_pd(
        arg1: __m512d,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_getmant_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_getmant_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_getmant_round_pd(
        arg1: __m512d,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_getmant_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_getmant_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_permute_pd(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_permute_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_permute_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_permute_ps(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_permute_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_permute_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_permutevar_pd(arg1: __m512d, arg2: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_permutevar_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512i,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_permutevar_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_permutevar_ps(arg1: __m512, arg2: __m512i) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_permutevar_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512i,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_permutevar_ps(arg1: __mmask16, arg2: __m512, arg3: __m512i) -> __m512;
}
extern "C" {
    pub fn _mm512_permutevar_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_permutevar_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_permutex_pd(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_permutex_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_permutex_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_permutex_epi64(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_permutex_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_permutex_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_permutexvar_pd(arg1: __m512i, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_permutexvar_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_permutexvar_pd(arg1: __mmask8, arg2: __m512i, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_permutexvar_ps(arg1: __m512i, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_permutexvar_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_permutexvar_ps(arg1: __mmask16, arg2: __m512i, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_permutexvar_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_permutexvar_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_permutexvar_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_permutexvar_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_permutexvar_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_permutexvar_epi32(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_permutexvar_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_permutexvar_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_permutexvar_epi64(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_permutex2var_pd(arg1: __m512d, arg2: __m512i, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_permutex2var_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask2_permutex2var_pd(
        arg1: __m512d,
        arg2: __m512i,
        arg3: __mmask8,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_permutex2var_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512i,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_permutex2var_ps(arg1: __m512, arg2: __m512i, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_permutex2var_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask2_permutex2var_ps(
        arg1: __m512,
        arg2: __m512i,
        arg3: __mmask16,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_permutex2var_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512i,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_permutex2var_epi16(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_permutex2var_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask2_permutex2var_epi16(
        arg1: __m512i,
        arg2: __m512i,
        arg3: __mmask32,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_permutex2var_epi16(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_permutex2var_epi32(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_permutex2var_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask2_permutex2var_epi32(
        arg1: __m512i,
        arg2: __m512i,
        arg3: __mmask16,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_permutex2var_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_permutex2var_epi64(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_permutex2var_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask2_permutex2var_epi64(
        arg1: __m512i,
        arg2: __m512i,
        arg3: __mmask8,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_permutex2var_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_compress_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_compress_pd(arg1: __mmask8, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_compress_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_compress_ps(arg1: __mmask16, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_compress_epi8(arg1: __m512i, arg2: __mmask64, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_compress_epi8(arg1: __mmask64, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_compress_epi16(arg1: __m512i, arg2: __mmask32, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_compress_epi16(arg1: __mmask32, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_compress_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_compress_epi32(arg1: __mmask16, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_compress_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_compress_epi64(arg1: __mmask8, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_compressstoreu_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512d,
    );
}
extern "C" {
    pub fn _mm512_mask_compressstoreu_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512,
    );
}
extern "C" {
    pub fn _mm512_mask_compressstoreu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask64,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_mask_compressstoreu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask32,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_mask_compressstoreu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_mask_compressstoreu_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_mask_expand_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_expand_pd(arg1: __mmask8, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_expand_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_expand_ps(arg1: __mmask16, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_expand_epi8(arg1: __m512i, arg2: __mmask64, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_expand_epi8(arg1: __mmask64, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_expand_epi16(arg1: __m512i, arg2: __mmask32, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_expand_epi16(arg1: __mmask32, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_expand_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_expand_epi32(arg1: __mmask16, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_expand_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_expand_epi64(arg1: __mmask8, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_expandloadu_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_expandloadu_pd(
        arg1: __mmask8,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_expandloadu_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_expandloadu_ps(
        arg1: __mmask16,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_expandloadu_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_expandloadu_epi8(
        arg1: __mmask64,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_expandloadu_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_expandloadu_epi16(
        arg1: __mmask32,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_expandloadu_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_expandloadu_epi32(
        arg1: __mmask16,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_expandloadu_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_expandloadu_epi64(
        arg1: __mmask8,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_ternarylogic_epi32(
        arg1: __m512i,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_ternarylogic_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_ternarylogic_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_ternarylogic_epi64(
        arg1: __m512i,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_ternarylogic_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_ternarylogic_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_conflict_epi32(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_conflict_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_conflict_epi32(arg1: __mmask16, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_conflict_epi64(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_conflict_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_conflict_epi64(arg1: __mmask8, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_lzcnt_epi32(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_lzcnt_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_lzcnt_epi32(arg1: __mmask16, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_lzcnt_epi64(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_lzcnt_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_lzcnt_epi64(arg1: __mmask8, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_avg_epu8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_avg_epu8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_avg_epu8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_avg_epu16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_avg_epu16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_avg_epu16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_sad_epu8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_dbsad_epu8(arg1: __m512i, arg2: __m512i, arg3: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_dbsad_epu8(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_dbsad_epu8(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_reduce_add_ps(arg1: __m512) -> f32;
}
extern "C" {
    pub fn _mm512_mask_reduce_add_ps(arg1: __mmask16, arg2: __m512) -> f32;
}
extern "C" {
    pub fn _mm512_reduce_add_pd(arg1: __m512d) -> f64;
}
extern "C" {
    pub fn _mm512_mask_reduce_add_pd(arg1: __mmask8, arg2: __m512d) -> f64;
}
extern "C" {
    pub fn _mm512_reduce_add_epi8(arg1: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_mask_reduce_add_epi8(arg1: __mmask64, arg2: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_reduce_add_epi16(arg1: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_mask_reduce_add_epi16(arg1: __mmask32, arg2: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_reduce_add_epi32(arg1: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_mask_reduce_add_epi32(arg1: __mmask16, arg2: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_reduce_add_epi64(arg1: __m512i) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_mask_reduce_add_epi64(
        arg1: __mmask8,
        arg2: __m512i,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_reduce_add_epu8(arg1: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_mask_reduce_add_epu8(arg1: __mmask64, arg2: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_reduce_add_epu16(arg1: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_mask_reduce_add_epu16(arg1: __mmask32, arg2: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_reduce_mul_ps(arg1: __m512) -> f32;
}
extern "C" {
    pub fn _mm512_mask_reduce_mul_ps(arg1: __mmask16, arg2: __m512) -> f32;
}
extern "C" {
    pub fn _mm512_reduce_mul_pd(arg1: __m512d) -> f64;
}
extern "C" {
    pub fn _mm512_mask_reduce_mul_pd(arg1: __mmask8, arg2: __m512d) -> f64;
}
extern "C" {
    pub fn _mm512_reduce_mul_epi32(arg1: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_mask_reduce_mul_epi32(arg1: __mmask16, arg2: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_reduce_mul_epi64(arg1: __m512i) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_mask_reduce_mul_epi64(
        arg1: __mmask8,
        arg2: __m512i,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_reduce_min_ps(arg1: __m512) -> f32;
}
extern "C" {
    pub fn _mm512_mask_reduce_min_ps(arg1: __mmask16, arg2: __m512) -> f32;
}
extern "C" {
    pub fn _mm512_reduce_min_pd(arg1: __m512d) -> f64;
}
extern "C" {
    pub fn _mm512_mask_reduce_min_pd(arg1: __mmask8, arg2: __m512d) -> f64;
}
extern "C" {
    pub fn _mm512_reduce_min_epi32(arg1: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_mask_reduce_min_epi32(arg1: __mmask16, arg2: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_reduce_min_epi64(arg1: __m512i) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_mask_reduce_min_epi64(
        arg1: __mmask8,
        arg2: __m512i,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_reduce_min_epu32(arg1: __m512i) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm512_mask_reduce_min_epu32(arg1: __mmask16, arg2: __m512i) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm512_reduce_min_epu64(arg1: __m512i) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm512_mask_reduce_min_epu64(
        arg1: __mmask8,
        arg2: __m512i,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm512_reduce_max_ps(arg1: __m512) -> f32;
}
extern "C" {
    pub fn _mm512_mask_reduce_max_ps(arg1: __mmask16, arg2: __m512) -> f32;
}
extern "C" {
    pub fn _mm512_reduce_max_pd(arg1: __m512d) -> f64;
}
extern "C" {
    pub fn _mm512_mask_reduce_max_pd(arg1: __mmask8, arg2: __m512d) -> f64;
}
extern "C" {
    pub fn _mm512_reduce_max_epi32(arg1: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_mask_reduce_max_epi32(arg1: __mmask16, arg2: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_reduce_max_epi64(arg1: __m512i) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_mask_reduce_max_epi64(
        arg1: __mmask8,
        arg2: __m512i,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_reduce_max_epu32(arg1: __m512i) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm512_mask_reduce_max_epu32(arg1: __mmask16, arg2: __m512i) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm512_reduce_max_epu64(arg1: __m512i) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm512_mask_reduce_max_epu64(
        arg1: __mmask8,
        arg2: __m512i,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm512_reduce_and_epi32(arg1: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_mask_reduce_and_epi32(arg1: __mmask16, arg2: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_reduce_and_epi64(arg1: __m512i) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_mask_reduce_and_epi64(
        arg1: __mmask8,
        arg2: __m512i,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_reduce_or_epi32(arg1: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_mask_reduce_or_epi32(arg1: __mmask16, arg2: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_reduce_or_epi64(arg1: __m512i) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_mask_reduce_or_epi64(arg1: __mmask8, arg2: __m512i)
        -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_reduce_xor_epi32(arg1: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_mask_reduce_xor_epi32(arg1: __mmask16, arg2: __m512i) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm512_reduce_xor_epi64(arg1: __m512i) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_mask_reduce_xor_epi64(
        arg1: __mmask8,
        arg2: __m512i,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm512_reduce_pd(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_reduce_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_reduce_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_reduce_round_pd(
        arg1: __m512d,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_reduce_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_reduce_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_reduce_ps(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_reduce_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_reduce_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_reduce_round_ps(
        arg1: __m512,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_reduce_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_reduce_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_roundscale_pd(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_roundscale_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_roundscale_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_roundscale_round_pd(
        arg1: __m512d,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_roundscale_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_roundscale_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_roundscale_ps(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_roundscale_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_roundscale_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_roundscale_round_ps(
        arg1: __m512,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_roundscale_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_roundscale_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_scalef_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_scalef_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_scalef_pd(arg1: __mmask8, arg2: __m512d, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_scalef_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_scalef_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_scalef_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_scalef_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_scalef_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_scalef_ps(arg1: __mmask16, arg2: __m512, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_scalef_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_scalef_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_scalef_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fixupimm_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fixupimm_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fixupimm_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fixupimm_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fixupimm_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_fixupimm_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_fixupimm_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fixupimm_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fixupimm_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_fixupimm_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fixupimm_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_fixupimm_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_stream_pd(arg1: *mut ::std::os::raw::c_void, arg2: __m512d);
}
extern "C" {
    pub fn _mm512_stream_ps(arg1: *mut ::std::os::raw::c_void, arg2: __m512);
}
extern "C" {
    pub fn _mm512_stream_si512(arg1: *mut ::std::os::raw::c_void, arg2: __m512i);
}
extern "C" {
    pub fn _mm512_stream_load_si512(arg1: *const ::std::os::raw::c_void) -> __m512i;
}
extern "C" {
    pub fn _mm512_castpd512_pd128(arg1: __m512d) -> __m128d;
}
extern "C" {
    pub fn _mm512_castps512_ps128(arg1: __m512) -> __m128;
}
extern "C" {
    pub fn _mm512_castsi512_si128(arg1: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_castsi128_si512(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_fpclass_ps_mask(arg1: __m512, arg2: ::std::os::raw::c_int) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_fpclass_ps_mask(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_fpclass_pd_mask(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_fpclass_pd_mask(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm512_range_pd(arg1: __m512d, arg2: __m512d, arg3: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_range_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_range_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_range_round_pd(
        arg1: __m512d,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_range_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_range_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_range_ps(arg1: __m512, arg2: __m512, arg3: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_range_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_range_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_range_round_ps(
        arg1: __m512,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_range_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_range_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_madd_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_madd_epi16(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_madd_epi16(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maddubs_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_maddubs_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_maddubs_epi16(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_packs_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_packs_epi16(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_packs_epi16(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_packs_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_packs_epi32(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_packs_epi32(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_packus_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_packus_epi16(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_packus_epi16(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_packus_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_packus_epi32(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_packus_epi32(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cmp_epi8_mask(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmp_epi8_mask(
        arg1: __mmask64,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmp_epi16_mask(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmp_epi16_mask(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmp_epi32_mask(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmp_epi32_mask(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmp_epi64_mask(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmp_epi64_mask(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmp_epu8_mask(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmp_epu8_mask(
        arg1: __mmask64,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmp_epu16_mask(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmp_epu16_mask(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmp_epu32_mask(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmp_epu32_mask(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmp_epu64_mask(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmp_epu64_mask(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm512_test_epi8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_test_epi8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_test_epi16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_test_epi16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_testn_epi8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_testn_epi8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_testn_epi16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_testn_epi16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm512_test_epi32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_test_epi32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_test_epi64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_test_epi64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_testn_epi32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_testn_epi32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_testn_epi64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_testn_epi64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_kunpackb(arg1: __mmask16, arg2: __mmask16) -> __mmask16;
}
extern "C" {
    pub fn _mm512_kunpackw(arg1: __mmask32, arg2: __mmask32) -> __mmask32;
}
extern "C" {
    pub fn _mm512_kunpackd(arg1: __mmask64, arg2: __mmask64) -> __mmask64;
}
extern "C" {
    pub fn _mm512_testz_and_mask8(arg1: __mmask8, arg2: __mmask8) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_and_mask16(arg1: __mmask16, arg2: __mmask16) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_and_mask32(arg1: __mmask32, arg2: __mmask32) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_and_mask64(arg1: __mmask64, arg2: __mmask64) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_andn_mask8(arg1: __mmask8, arg2: __mmask8) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_andn_mask16(arg1: __mmask16, arg2: __mmask16) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_andn_mask32(arg1: __mmask32, arg2: __mmask32) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_andn_mask64(arg1: __mmask64, arg2: __mmask64) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_or_mask8(arg1: __mmask8, arg2: __mmask8) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_or_mask16(arg1: __mmask16, arg2: __mmask16) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_or_mask32(arg1: __mmask32, arg2: __mmask32) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_or_mask64(arg1: __mmask64, arg2: __mmask64) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_nor_mask8(arg1: __mmask8, arg2: __mmask8) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_nor_mask16(arg1: __mmask16, arg2: __mmask16) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_nor_mask32(arg1: __mmask32, arg2: __mmask32) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_testz_nor_mask64(arg1: __mmask64, arg2: __mmask64) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_i32gather_ps(
        arg1: __m512i,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_i32gather_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_i32scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m512i,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_i32scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_i64gather_pd(
        arg1: __m512i,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_i64gather_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_i64scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m512i,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_i64scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_i32gather_pd(
        arg1: __m256i,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_i32gather_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_i32scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m256i,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_i32scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m512d,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_i32gather_epi32(
        arg1: __m512i,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_i32gather_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_i32scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_i32scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_i32gather_epi64(
        arg1: __m256i,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_i32gather_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_i64gather_epi64(
        arg1: __m512i,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_i64gather_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_i32scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m256i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_i32scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_i64scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_i64scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_i64gather_ps(
        arg1: __m512i,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm512_mask_i64gather_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm512_i64scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m512i,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_i64scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m256,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_i64gather_epi32(
        arg1: __m512i,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_i64gather_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_i64scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m512i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_i64scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_cvtpslo_pd(arg1: __m512) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvtpslo_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvtepi32lo_pd(arg1: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvtepi32lo_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvtepu32lo_pd(arg1: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvtepu32lo_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvtepi32_pd(arg1: __m256i) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvtepi32_pd(arg1: __m512d, arg2: __mmask8, arg3: __m256i) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi32_pd(arg1: __mmask8, arg2: __m256i) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvtepu32_pd(arg1: __m256i) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvtepu32_pd(arg1: __m512d, arg2: __mmask8, arg3: __m256i) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu32_pd(arg1: __mmask8, arg2: __m256i) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvtepi32_ps(arg1: __m512i) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cvtepi32_ps(arg1: __m512, arg2: __mmask16, arg3: __m512i) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi32_ps(arg1: __mmask16, arg2: __m512i) -> __m512;
}
extern "C" {
    pub fn _mm512_cvt_roundepi32_ps(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepi32_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepi32_ps(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_cvtepu32_ps(arg1: __m512i) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cvtepu32_ps(arg1: __m512, arg2: __mmask16, arg3: __m512i) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu32_ps(arg1: __mmask16, arg2: __m512i) -> __m512;
}
extern "C" {
    pub fn _mm512_cvt_roundepu32_ps(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepu32_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepu32_ps(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_cvtph_ps(arg1: __m256i) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cvtph_ps(arg1: __m512, arg2: __mmask16, arg3: __m256i) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_cvtph_ps(arg1: __mmask16, arg2: __m256i) -> __m512;
}
extern "C" {
    pub fn _mm512_cvt_roundph_ps(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundph_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundph_ps(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_cvtps_ph(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtps_ph(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtps_ph(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvt_roundps_ph(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundps_ph(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundps_ph(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvtepi64_ps(arg1: __m512i) -> __m256;
}
extern "C" {
    pub fn _mm512_mask_cvtepi64_ps(arg1: __m256, arg2: __mmask8, arg3: __m512i) -> __m256;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi64_ps(arg1: __mmask8, arg2: __m512i) -> __m256;
}
extern "C" {
    pub fn _mm512_cvt_roundepi64_ps(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepi64_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepi64_ps(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm512_cvtepu64_ps(arg1: __m512i) -> __m256;
}
extern "C" {
    pub fn _mm512_mask_cvtepu64_ps(arg1: __m256, arg2: __mmask8, arg3: __m512i) -> __m256;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu64_ps(arg1: __mmask8, arg2: __m512i) -> __m256;
}
extern "C" {
    pub fn _mm512_cvt_roundepu64_ps(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepu64_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepu64_ps(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm512_cvtepi8_epi32(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi8_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi8_epi32(arg1: __mmask16, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtepi8_epi64(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi8_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi8_epi64(arg1: __mmask8, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtepi16_epi32(arg1: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi16_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi16_epi32(arg1: __mmask16, arg2: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtepi16_epi64(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi16_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi16_epi64(arg1: __mmask8, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtepi32_epi8(arg1: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi32_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi32_epi8(arg1: __mmask16, arg2: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi32_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtsepi32_epi8(arg1: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi32_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_maskz_cvtsepi32_epi8(arg1: __mmask16, arg2: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi32_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtusepi32_epi8(arg1: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi32_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_maskz_cvtusepi32_epi8(arg1: __mmask16, arg2: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi32_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtepi32_epi16(arg1: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi32_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi32_epi16(arg1: __mmask16, arg2: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi32_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtsepi32_epi16(arg1: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi32_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtsepi32_epi16(arg1: __mmask16, arg2: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi32_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtusepi32_epi16(arg1: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi32_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtusepi32_epi16(arg1: __mmask16, arg2: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi32_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtepi32_epi64(arg1: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi32_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi32_epi64(arg1: __mmask8, arg2: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtepi64_epi8(arg1: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi64_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi64_epi8(arg1: __mmask8, arg2: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi64_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtsepi64_epi8(arg1: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi64_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_maskz_cvtsepi64_epi8(arg1: __mmask8, arg2: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi64_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtusepi64_epi8(arg1: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi64_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_maskz_cvtusepi64_epi8(arg1: __mmask8, arg2: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi64_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtepi64_epi16(arg1: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi64_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi64_epi16(arg1: __mmask8, arg2: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi64_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtsepi64_epi16(arg1: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi64_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_maskz_cvtsepi64_epi16(arg1: __mmask8, arg2: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi64_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtusepi64_epi16(arg1: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi64_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_maskz_cvtusepi64_epi16(arg1: __mmask8, arg2: __m512i) -> __m128i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi64_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtepi64_epi32(arg1: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi64_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi64_epi32(arg1: __mmask8, arg2: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi64_storeu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtsepi64_epi32(arg1: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi64_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtsepi64_epi32(arg1: __mmask8, arg2: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi64_storeu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtusepi64_epi32(arg1: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi64_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtusepi64_epi32(arg1: __mmask8, arg2: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi64_storeu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtepu8_epi32(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepu8_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu8_epi32(arg1: __mmask16, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtepu8_epi64(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepu8_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu8_epi64(arg1: __mmask8, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtepu16_epi32(arg1: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepu16_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu16_epi32(arg1: __mmask16, arg2: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtepu16_epi64(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepu16_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu16_epi64(arg1: __mmask8, arg2: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtepu32_epi64(arg1: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepu32_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu32_epi64(arg1: __mmask8, arg2: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtps_epi32(arg1: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtps_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtps_epi32(arg1: __mmask16, arg2: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundps_epi32(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundps_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundps_epi32(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvttps_epi32(arg1: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttps_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttps_epi32(arg1: __mmask16, arg2: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundps_epi32(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundps_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundps_epi32(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtps_epu32(arg1: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtps_epu32(arg1: __m512i, arg2: __mmask16, arg3: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtps_epu32(arg1: __mmask16, arg2: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundps_epu32(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundps_epu32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundps_epu32(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvttps_epu32(arg1: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttps_epu32(arg1: __m512i, arg2: __mmask16, arg3: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttps_epu32(arg1: __mmask16, arg2: __m512) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundps_epu32(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundps_epu32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundps_epu32(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtpd_epi32(arg1: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtpd_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtpd_epi32(arg1: __mmask8, arg2: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvt_roundpd_epi32(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundpd_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundpd_epi32(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvttpd_epi32(arg1: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvttpd_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvttpd_epi32(arg1: __mmask8, arg2: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvtt_roundpd_epi32(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundpd_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundpd_epi32(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvtpd_epu32(arg1: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtpd_epu32(arg1: __m256i, arg2: __mmask8, arg3: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtpd_epu32(arg1: __mmask8, arg2: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvt_roundpd_epu32(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundpd_epu32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundpd_epu32(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvttpd_epu32(arg1: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvttpd_epu32(arg1: __m256i, arg2: __mmask8, arg3: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvttpd_epu32(arg1: __mmask8, arg2: __m512d) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvtt_roundpd_epu32(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundpd_epu32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundpd_epu32(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvtepi8_epi16(arg1: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi8_epi16(arg1: __m512i, arg2: __mmask32, arg3: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi8_epi16(arg1: __mmask32, arg2: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtepu8_epi16(arg1: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtepu8_epi16(arg1: __m512i, arg2: __mmask32, arg3: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu8_epi16(arg1: __mmask32, arg2: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtepi16_epi8(arg1: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi16_epi8(arg1: __m256i, arg2: __mmask32, arg3: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi16_epi8(arg1: __mmask32, arg2: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtepi16_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask32,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtsepi16_epi8(arg1: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi16_epi8(arg1: __m256i, arg2: __mmask32, arg3: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtsepi16_epi8(arg1: __mmask32, arg2: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtsepi16_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask32,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtusepi16_epi8(arg1: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi16_epi8(arg1: __m256i, arg2: __mmask32, arg3: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_maskz_cvtusepi16_epi8(arg1: __mmask32, arg2: __m512i) -> __m256i;
}
extern "C" {
    pub fn _mm512_mask_cvtusepi16_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask32,
        arg3: __m512i,
    );
}
extern "C" {
    pub fn _mm512_cvtepi64_pd(arg1: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvtepi64_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi64_pd(arg1: __mmask8, arg2: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvt_roundepi64_pd(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepi64_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepi64_pd(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvtepu64_pd(arg1: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvtepu64_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu64_pd(arg1: __mmask8, arg2: __m512i) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvt_roundepu64_pd(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepu64_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepu64_pd(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvtpd_epi64(arg1: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtpd_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtpd_epi64(arg1: __mmask8, arg2: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundpd_epi64(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundpd_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundpd_epi64(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtpd_epu64(arg1: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtpd_epu64(arg1: __m512i, arg2: __mmask8, arg3: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtpd_epu64(arg1: __mmask8, arg2: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundpd_epu64(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundpd_epu64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundpd_epu64(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvttpd_epi64(arg1: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttpd_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttpd_epi64(arg1: __mmask8, arg2: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundpd_epi64(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundpd_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundpd_epi64(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvttpd_epu64(arg1: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttpd_epu64(arg1: __m512i, arg2: __mmask8, arg3: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttpd_epu64(arg1: __mmask8, arg2: __m512d) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundpd_epu64(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundpd_epu64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundpd_epu64(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtps_epi64(arg1: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtps_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtps_epi64(arg1: __mmask8, arg2: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundps_epi64(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundps_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundps_epi64(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtps_epu64(arg1: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtps_epu64(arg1: __m512i, arg2: __mmask8, arg3: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtps_epu64(arg1: __mmask8, arg2: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundps_epu64(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundps_epu64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundps_epu64(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvttps_epi64(arg1: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttps_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttps_epi64(arg1: __mmask8, arg2: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundps_epi64(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundps_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundps_epi64(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvttps_epu64(arg1: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttps_epu64(arg1: __m512i, arg2: __mmask8, arg3: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttps_epu64(arg1: __mmask8, arg2: __m256) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundps_epu64(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundps_epu64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundps_epu64(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_cmpeq_epi8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmpge_epi8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmpgt_epi8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmple_epi8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmplt_epi8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmpneq_epi8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmpeq_epu8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmpge_epu8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmpgt_epu8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmple_epu8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmplt_epu8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmpneq_epu8_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmpeq_epi8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmpge_epi8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmpgt_epi8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmple_epi8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmplt_epi8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmpneq_epi8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i)
        -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmpeq_epu8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmpge_epu8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmpgt_epu8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmple_epu8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmplt_epu8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_cmpneq_epu8_mask(arg1: __mmask64, arg2: __m512i, arg3: __m512i)
        -> __mmask64;
}
extern "C" {
    pub fn _mm512_cmpeq_epi16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmpge_epi16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmpgt_epi16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmple_epi16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmplt_epi16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmpneq_epi16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmpeq_epu16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmpge_epu16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmpgt_epu16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmple_epu16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmplt_epu16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmpneq_epu16_mask(arg1: __m512i, arg2: __m512i) -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmpeq_epi16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmpge_epi16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmpgt_epi16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmple_epi16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmplt_epi16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmpneq_epi16_mask(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: __m512i,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmpeq_epu16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmpge_epu16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmpgt_epu16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmple_epu16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmplt_epu16_mask(arg1: __mmask32, arg2: __m512i, arg3: __m512i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmpneq_epu16_mask(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: __m512i,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmpeq_epi32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpge_epi32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpgt_epi32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmple_epi32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmplt_epi32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpneq_epi32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpeq_epu32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpge_epu32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpgt_epu32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmple_epu32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmplt_epu32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpneq_epu32_mask(arg1: __m512i, arg2: __m512i) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpeq_epi32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpge_epi32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpgt_epi32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmple_epi32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmplt_epi32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpneq_epi32_mask(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpeq_epu32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpge_epu32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpgt_epu32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmple_epu32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmplt_epu32_mask(arg1: __mmask16, arg2: __m512i, arg3: __m512i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm512_mask_cmpneq_epu32_mask(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmpeq_epi64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpge_epi64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpgt_epi64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmple_epi64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmplt_epi64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpneq_epi64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpeq_epu64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpge_epu64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpgt_epu64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmple_epu64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmplt_epu64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_cmpneq_epu64_mask(arg1: __m512i, arg2: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpeq_epi64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpge_epi64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpgt_epi64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmple_epi64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmplt_epi64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpneq_epi64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpeq_epu64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpge_epu64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpgt_epu64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmple_epu64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmplt_epu64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm512_mask_cmpneq_epu64_mask(arg1: __mmask8, arg2: __m512i, arg3: __m512i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_abs_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_abs_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_abs_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_abs_epi16(arg1: __mmask16, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_abs_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_abs_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_abs_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_abs_epi32(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_abs_epi64(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_abs_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_abs_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_abs_epi64(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_abs_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_abs_epi64(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_abs_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_abs_epi8(arg1: __mmask16, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_abs_epi8(arg1: __m256i, arg2: __mmask32, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_abs_epi8(arg1: __mmask32, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_add_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_add_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_add_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_add_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_add_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_add_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_add_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_add_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_add_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_add_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_add_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_add_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_add_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_add_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_add_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_add_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_add_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_add_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_add_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_add_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_add_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_add_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_add_ps(arg1: __m256, arg2: __mmask8, arg3: __m256, arg4: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_add_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_adds_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_adds_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_adds_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_adds_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_adds_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_adds_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_adds_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_adds_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_adds_epu16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_adds_epu16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_adds_epu16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_adds_epu16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_adds_epu8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_adds_epu8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_adds_epu8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_adds_epu8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_alignr_epi32(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_alignr_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_alignr_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_alignr_epi32(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_alignr_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_alignr_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_alignr_epi64(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_alignr_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_alignr_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_alignr_epi64(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_alignr_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_alignr_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_alignr_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_alignr_epi8(
        arg1: __mmask16,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_alignr_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_alignr_epi8(
        arg1: __mmask32,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_and_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_and_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_and_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_and_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_and_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_and_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_and_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_and_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_and_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_and_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_and_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_and_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_and_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_and_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_and_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_and_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_and_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_and_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_and_ps(arg1: __m256, arg2: __mmask8, arg3: __m256, arg4: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_and_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_andnot_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_andnot_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_andnot_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_andnot_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_andnot_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_andnot_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_andnot_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_andnot_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_andnot_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_andnot_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_andnot_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_andnot_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_andnot_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_andnot_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_andnot_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_andnot_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_andnot_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_andnot_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_andnot_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_andnot_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_avg_epu16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_avg_epu16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_avg_epu16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_avg_epu16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_avg_epu8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_avg_epu8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_avg_epu8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_avg_epu8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_blend_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_blend_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_blend_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_blend_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_blend_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_blend_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_blend_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_blend_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_blend_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_blend_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_blend_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_blend_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_broadcast_f32x2(arg1: __m128) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_broadcast_f32x2(arg1: __m256, arg2: __mmask8, arg3: __m128) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_broadcast_f32x2(arg1: __mmask8, arg2: __m128) -> __m256;
}
extern "C" {
    pub fn _mm256_broadcast_f32x4(arg1: __m128) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_broadcast_f32x4(arg1: __m256, arg2: __mmask8, arg3: __m128) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_broadcast_f32x4(arg1: __mmask8, arg2: __m128) -> __m256;
}
extern "C" {
    pub fn _mm256_broadcast_f64x2(arg1: __m128d) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_broadcast_f64x2(arg1: __m256d, arg2: __mmask8, arg3: __m128d) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_broadcast_f64x2(arg1: __mmask8, arg2: __m128d) -> __m256d;
}
extern "C" {
    pub fn _mm_broadcast_i32x2(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_broadcast_i32x2(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_broadcast_i32x2(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_broadcast_i32x2(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_broadcast_i32x2(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_broadcast_i32x2(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_broadcast_i32x4(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_broadcast_i32x4(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_broadcast_i32x4(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_broadcast_i64x2(arg1: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_broadcast_i64x2(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_broadcast_i64x2(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_broadcastb_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_broadcastb_epi8(arg1: __mmask16, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_broadcastb_epi8(arg1: __m256i, arg2: __mmask32, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_broadcastb_epi8(arg1: __mmask32, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_broadcastd_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_broadcastd_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_broadcastd_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_broadcastd_epi32(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_broadcastmb_epi64(arg1: __mmask8) -> __m128i;
}
extern "C" {
    pub fn _mm256_broadcastmb_epi64(arg1: __mmask8) -> __m256i;
}
extern "C" {
    pub fn _mm_broadcastmw_epi32(arg1: __mmask16) -> __m128i;
}
extern "C" {
    pub fn _mm256_broadcastmw_epi32(arg1: __mmask16) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_broadcastq_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_broadcastq_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_broadcastq_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_broadcastq_epi64(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_broadcastsd_pd(arg1: __m256d, arg2: __mmask8, arg3: __m128d) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_broadcastsd_pd(arg1: __mmask8, arg2: __m128d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_broadcastss_ps(arg1: __m128, arg2: __mmask8, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_broadcastss_ps(arg1: __mmask8, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_broadcastss_ps(arg1: __m256, arg2: __mmask8, arg3: __m128) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_broadcastss_ps(arg1: __mmask8, arg2: __m128) -> __m256;
}
extern "C" {
    pub fn _mm_mask_broadcastw_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_broadcastw_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_broadcastw_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_broadcastw_epi16(arg1: __mmask16, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_cmp_epi16_mask(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_epi16_mask(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmp_epi16_mask(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmp_epi16_mask(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmp_epi32_mask(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_epi32_mask(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmp_epi32_mask(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmp_epi32_mask(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmp_epi64_mask(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_epi64_mask(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmp_epi64_mask(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmp_epi64_mask(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmp_epi8_mask(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmp_epi8_mask(
        arg1: __mmask16,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmp_epi8_mask(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmp_epi8_mask(
        arg1: __mmask32,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm_cmp_epu16_mask(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_epu16_mask(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmp_epu16_mask(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmp_epu16_mask(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmp_epu32_mask(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_epu32_mask(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmp_epu32_mask(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmp_epu32_mask(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmp_epu64_mask(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_epu64_mask(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmp_epu64_mask(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmp_epu64_mask(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmp_epu8_mask(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmp_epu8_mask(
        arg1: __mmask16,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmp_epu8_mask(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmp_epu8_mask(
        arg1: __mmask32,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm_cmp_pd_mask(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_pd_mask(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmp_pd_mask(
        arg1: __m256d,
        arg2: __m256d,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmp_pd_mask(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmp_ps_mask(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_ps_mask(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmp_ps_mask(arg1: __m256, arg2: __m256, arg3: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmp_ps_mask(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_compress_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_compress_epi8(arg1: __mmask16, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_compress_epi8(arg1: __m256i, arg2: __mmask32, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_compress_epi8(arg1: __mmask32, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_compress_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_compress_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_compress_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_compress_epi16(arg1: __mmask16, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_compress_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_compress_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_compress_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_compress_epi32(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_compress_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_compress_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_compress_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_compress_epi64(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_compress_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_compress_pd(arg1: __mmask8, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_compress_pd(arg1: __m256d, arg2: __mmask8, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_compress_pd(arg1: __mmask8, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_compress_ps(arg1: __m128, arg2: __mmask8, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_compress_ps(arg1: __mmask8, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_compress_ps(arg1: __m256, arg2: __mmask8, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_compress_ps(arg1: __mmask8, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_compressstoreu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_compressstoreu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask32,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_compressstoreu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_compressstoreu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_compressstoreu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_compressstoreu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_compressstoreu_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_compressstoreu_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_compressstoreu_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128d,
    );
}
extern "C" {
    pub fn _mm256_mask_compressstoreu_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256d,
    );
}
extern "C" {
    pub fn _mm_mask_compressstoreu_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128,
    );
}
extern "C" {
    pub fn _mm256_mask_compressstoreu_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256,
    );
}
extern "C" {
    pub fn _mm_conflict_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_conflict_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_conflict_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_conflict_epi32(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_conflict_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_conflict_epi32(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_conflict_epi64(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_conflict_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_conflict_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_conflict_epi64(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_conflict_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_conflict_epi64(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtps_ph(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtps_ph(arg1: __mmask8, arg2: __m128, arg3: ::std::os::raw::c_int)
        -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvt_roundps_ph(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvt_roundps_ph(
        arg1: __mmask8,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtps_ph(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtps_ph(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvt_roundps_ph(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvt_roundps_ph(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtepi16_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi16_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi16_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi16_epi32(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtepi16_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi16_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi16_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi16_epi64(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_cvtepi16_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtepi16_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi16_epi8(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtepi16_epi8(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi16_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi16_epi8(arg1: __mmask16, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtepi16_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtepi16_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_cvtepi32_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtepi32_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi32_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtepi32_epi16(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi32_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi32_epi16(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtepi32_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi32_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi32_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi32_epi64(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_cvtepi32_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtepi32_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi32_epi8(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtepi32_epi8(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi32_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi32_epi8(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtepi32_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_cvtepi32_pd(arg1: __mmask8, arg2: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_cvtepi32_pd(arg1: __m256d, arg2: __mmask8, arg3: __m128i) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi32_pd(arg1: __mmask8, arg2: __m128i) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_cvtepi32_ps(arg1: __m128, arg2: __mmask8, arg3: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvtepi32_ps(arg1: __mmask8, arg2: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_cvtepi32_ps(arg1: __m256, arg2: __mmask8, arg3: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi32_ps(arg1: __mmask8, arg2: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm_mask_cvtepi32_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtepi32_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_cvtepi32_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtepi32_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_cvtepi64_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtepi64_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi64_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtepi64_epi16(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi64_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi64_epi16(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepi64_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtepi64_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi64_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtepi64_epi32(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi64_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi64_epi32(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepi64_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtepi64_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi64_epi8(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtepi64_epi8(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi64_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi64_epi8(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtepi64_pd(arg1: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_cvtepi64_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_cvtepi64_pd(arg1: __mmask8, arg2: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm256_cvtepi64_pd(arg1: __m256i) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_cvtepi64_pd(arg1: __m256d, arg2: __mmask8, arg3: __m256i) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi64_pd(arg1: __mmask8, arg2: __m256i) -> __m256d;
}
extern "C" {
    pub fn _mm_cvtepi64_ps(arg1: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm_mask_cvtepi64_ps(arg1: __m128, arg2: __mmask8, arg3: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvtepi64_ps(arg1: __mmask8, arg2: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm256_cvtepi64_ps(arg1: __m256i) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_cvtepi64_ps(arg1: __m128, arg2: __mmask8, arg3: __m256i) -> __m128;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi64_ps(arg1: __mmask8, arg2: __m256i) -> __m128;
}
extern "C" {
    pub fn _mm_mask_cvtepi64_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtepi64_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_cvtepi64_storeu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtepi64_storeu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_cvtepi64_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtepi64_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_cvtepi8_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi8_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi8_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi8_epi16(arg1: __mmask16, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtepi8_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi8_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi8_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi8_epi32(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtepi8_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepi8_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepi8_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi8_epi64(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtepu16_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepu16_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepu16_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu16_epi32(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtepu16_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepu16_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepu16_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu16_epi64(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtepu32_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepu32_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepu32_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu32_epi64(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_cvtepu32_ps(arg1: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm_mask_cvtepu32_ps(arg1: __m128, arg2: __mmask8, arg3: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvtepu32_ps(arg1: __mmask8, arg2: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm256_cvtepu32_ps(arg1: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_cvtepu32_ps(arg1: __m256, arg2: __mmask8, arg3: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu32_ps(arg1: __mmask8, arg2: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm_cvtepu32_pd(arg1: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_cvtepu32_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_cvtepu32_pd(arg1: __mmask8, arg2: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm256_cvtepu32_pd(arg1: __m128i) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_cvtepu32_pd(arg1: __m256d, arg2: __mmask8, arg3: __m128i) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu32_pd(arg1: __mmask8, arg2: __m128i) -> __m256d;
}
extern "C" {
    pub fn _mm_cvtepu64_pd(arg1: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_cvtepu64_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_cvtepu64_pd(arg1: __mmask8, arg2: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm256_cvtepu64_pd(arg1: __m256i) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_cvtepu64_pd(arg1: __m256d, arg2: __mmask8, arg3: __m256i) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu64_pd(arg1: __mmask8, arg2: __m256i) -> __m256d;
}
extern "C" {
    pub fn _mm_cvtepu64_ps(arg1: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm_mask_cvtepu64_ps(arg1: __m128, arg2: __mmask8, arg3: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvtepu64_ps(arg1: __mmask8, arg2: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm256_cvtepu64_ps(arg1: __m256i) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_cvtepu64_ps(arg1: __m128, arg2: __mmask8, arg3: __m256i) -> __m128;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu64_ps(arg1: __mmask8, arg2: __m256i) -> __m128;
}
extern "C" {
    pub fn _mm_mask_cvtepu8_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepu8_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepu8_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu8_epi16(arg1: __mmask16, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtepu8_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepu8_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepu8_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu8_epi32(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtepu8_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtepu8_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtepu8_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu8_epi64(arg1: __mmask8, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtpd_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtpd_epi32(arg1: __mmask8, arg2: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtpd_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtpd_epi32(arg1: __mmask8, arg2: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtpd_epi64(arg1: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtpd_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtpd_epi64(arg1: __mmask8, arg2: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtpd_epi64(arg1: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvtpd_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtpd_epi64(arg1: __mmask8, arg2: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm_cvtpd_epu32(arg1: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtpd_epu32(arg1: __m128i, arg2: __mmask8, arg3: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtpd_epu32(arg1: __mmask8, arg2: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtpd_epu32(arg1: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtpd_epu32(arg1: __m128i, arg2: __mmask8, arg3: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtpd_epu32(arg1: __mmask8, arg2: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtpd_epu64(arg1: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtpd_epu64(arg1: __m128i, arg2: __mmask8, arg3: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtpd_epu64(arg1: __mmask8, arg2: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtpd_epu64(arg1: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvtpd_epu64(arg1: __m256i, arg2: __mmask8, arg3: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtpd_epu64(arg1: __mmask8, arg2: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtpd_ps(arg1: __m128, arg2: __mmask8, arg3: __m128d) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvtpd_ps(arg1: __mmask8, arg2: __m128d) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_cvtpd_ps(arg1: __m128, arg2: __mmask8, arg3: __m256d) -> __m128;
}
extern "C" {
    pub fn _mm256_maskz_cvtpd_ps(arg1: __mmask8, arg2: __m256d) -> __m128;
}
extern "C" {
    pub fn _mm_mask_cvtph_ps(arg1: __m128, arg2: __mmask8, arg3: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvtph_ps(arg1: __mmask8, arg2: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_cvtph_ps(arg1: __m256, arg2: __mmask8, arg3: __m128i) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_cvtph_ps(arg1: __mmask8, arg2: __m128i) -> __m256;
}
extern "C" {
    pub fn _mm_mask_cvtps_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtps_epi32(arg1: __mmask8, arg2: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtps_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtps_epi32(arg1: __mmask8, arg2: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm_cvtps_epi64(arg1: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtps_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtps_epi64(arg1: __mmask8, arg2: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtps_epi64(arg1: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvtps_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtps_epi64(arg1: __mmask8, arg2: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm_cvtps_epu32(arg1: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtps_epu32(arg1: __m128i, arg2: __mmask8, arg3: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtps_epu32(arg1: __mmask8, arg2: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtps_epu32(arg1: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvtps_epu32(arg1: __m256i, arg2: __mmask8, arg3: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtps_epu32(arg1: __mmask8, arg2: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm_cvtps_epu64(arg1: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtps_epu64(arg1: __m128i, arg2: __mmask8, arg3: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtps_epu64(arg1: __mmask8, arg2: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtps_epu64(arg1: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvtps_epu64(arg1: __m256i, arg2: __mmask8, arg3: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtps_epu64(arg1: __mmask8, arg2: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvtps_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_cvtps_pd(arg1: __mmask8, arg2: __m128) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_cvtps_pd(arg1: __m256d, arg2: __mmask8, arg3: __m128) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_cvtps_pd(arg1: __mmask8, arg2: __m128) -> __m256d;
}
extern "C" {
    pub fn _mm_cvtsepi16_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtsepi16_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtsepi16_epi8(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtsepi16_epi8(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtsepi16_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtsepi16_epi8(arg1: __mmask16, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtsepi16_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtsepi16_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_cvtsepi32_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtsepi32_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtsepi32_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtsepi32_epi16(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtsepi32_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtsepi32_epi16(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtsepi32_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtsepi32_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtsepi32_epi8(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtsepi32_epi8(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtsepi32_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtsepi32_epi8(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtsepi32_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtsepi32_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_cvtsepi32_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtsepi32_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_cvtsepi64_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtsepi64_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtsepi64_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtsepi64_epi16(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtsepi64_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtsepi64_epi16(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtsepi64_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtsepi64_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtsepi64_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtsepi64_epi32(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtsepi64_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtsepi64_epi32(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtsepi64_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtsepi64_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtsepi64_epi8(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtsepi64_epi8(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtsepi64_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtsepi64_epi8(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtsepi64_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtsepi64_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_cvtsepi64_storeu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtsepi64_storeu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_cvtsepi64_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtsepi64_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_cvttpd_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttpd_epi32(arg1: __mmask8, arg2: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvttpd_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvttpd_epi32(arg1: __mmask8, arg2: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm_cvttpd_epi64(arg1: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttpd_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttpd_epi64(arg1: __mmask8, arg2: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttpd_epi64(arg1: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvttpd_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttpd_epi64(arg1: __mmask8, arg2: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm_cvttpd_epu32(arg1: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttpd_epu32(arg1: __m128i, arg2: __mmask8, arg3: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttpd_epu32(arg1: __mmask8, arg2: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttpd_epu32(arg1: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvttpd_epu32(arg1: __m128i, arg2: __mmask8, arg3: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvttpd_epu32(arg1: __mmask8, arg2: __m256d) -> __m128i;
}
extern "C" {
    pub fn _mm_cvttpd_epu64(arg1: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttpd_epu64(arg1: __m128i, arg2: __mmask8, arg3: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttpd_epu64(arg1: __mmask8, arg2: __m128d) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttpd_epu64(arg1: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvttpd_epu64(arg1: __m256i, arg2: __mmask8, arg3: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttpd_epu64(arg1: __mmask8, arg2: __m256d) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_cvttps_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttps_epi32(arg1: __mmask8, arg2: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvttps_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttps_epi32(arg1: __mmask8, arg2: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm_cvttps_epi64(arg1: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttps_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttps_epi64(arg1: __mmask8, arg2: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttps_epi64(arg1: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvttps_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttps_epi64(arg1: __mmask8, arg2: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm_cvttps_epu32(arg1: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttps_epu32(arg1: __m128i, arg2: __mmask8, arg3: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttps_epu32(arg1: __mmask8, arg2: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttps_epu32(arg1: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvttps_epu32(arg1: __m256i, arg2: __mmask8, arg3: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttps_epu32(arg1: __mmask8, arg2: __m256) -> __m256i;
}
extern "C" {
    pub fn _mm_cvttps_epu64(arg1: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttps_epu64(arg1: __m128i, arg2: __mmask8, arg3: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttps_epu64(arg1: __mmask8, arg2: __m128) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttps_epu64(arg1: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvttps_epu64(arg1: __m256i, arg2: __mmask8, arg3: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttps_epu64(arg1: __mmask8, arg2: __m128) -> __m256i;
}
extern "C" {
    pub fn _mm_cvtusepi16_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtusepi16_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtusepi16_epi8(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtusepi16_epi8(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtusepi16_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtusepi16_epi8(arg1: __mmask16, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtusepi16_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtusepi16_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_cvtusepi32_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtusepi32_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtusepi32_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtusepi32_epi16(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtusepi32_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtusepi32_epi16(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtusepi32_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtusepi32_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtusepi32_epi8(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtusepi32_epi8(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtusepi32_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtusepi32_epi8(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtusepi32_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtusepi32_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_cvtusepi32_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtusepi32_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_cvtusepi64_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtusepi64_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtusepi64_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtusepi64_epi16(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtusepi64_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtusepi64_epi16(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtusepi64_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtusepi64_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtusepi64_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtusepi64_epi32(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtusepi64_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtusepi64_epi32(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtusepi64_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtusepi64_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtusepi64_epi8(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtusepi64_epi8(arg1: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_cvtusepi64_epi8(arg1: __m128i, arg2: __mmask8, arg3: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_cvtusepi64_epi8(arg1: __mmask8, arg2: __m256i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtusepi64_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtusepi64_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_cvtusepi64_storeu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtusepi64_storeu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_cvtusepi64_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
    );
}
extern "C" {
    pub fn _mm256_mask_cvtusepi64_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_dbsad_epu8(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_dbsad_epu8(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_dbsad_epu8(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_dbsad_epu8(arg1: __m256i, arg2: __m256i, arg3: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_dbsad_epu8(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_dbsad_epu8(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_div_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_div_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_div_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_div_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_div_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_div_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_div_ps(arg1: __m256, arg2: __mmask8, arg3: __m256, arg4: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_div_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_expand_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_expand_epi8(arg1: __mmask16, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_expand_epi8(arg1: __m256i, arg2: __mmask32, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_expand_epi8(arg1: __mmask32, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_expand_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_expand_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_expand_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_expand_epi16(arg1: __mmask16, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_expand_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_expand_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_expand_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_expand_epi32(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_expand_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_expand_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_expand_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_expand_epi64(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_expand_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_expand_pd(arg1: __mmask8, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_expand_pd(arg1: __m256d, arg2: __mmask8, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_expand_pd(arg1: __mmask8, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_expand_ps(arg1: __m128, arg2: __mmask8, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_expand_ps(arg1: __mmask8, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_expand_ps(arg1: __m256, arg2: __mmask8, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_expand_ps(arg1: __mmask8, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_expandloadu_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_expandloadu_epi8(
        arg1: __mmask16,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_expandloadu_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_expandloadu_epi8(
        arg1: __mmask32,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_expandloadu_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_expandloadu_epi16(
        arg1: __mmask8,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_expandloadu_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_expandloadu_epi16(
        arg1: __mmask16,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_expandloadu_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_expandloadu_epi32(
        arg1: __mmask8,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_expandloadu_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_expandloadu_epi32(
        arg1: __mmask8,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_expandloadu_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_expandloadu_epi64(
        arg1: __mmask8,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_expandloadu_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_expandloadu_epi64(
        arg1: __mmask8,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_expandloadu_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_expandloadu_pd(arg1: __mmask8, arg2: *const ::std::os::raw::c_void)
        -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_expandloadu_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_expandloadu_pd(
        arg1: __mmask8,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_expandloadu_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_expandloadu_ps(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_expandloadu_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_expandloadu_ps(
        arg1: __mmask8,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_extractf32x4_ps(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_extractf32x4_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_maskz_extractf32x4_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_extractf64x2_pd(arg1: __m256d, arg2: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_extractf64x2_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_maskz_extractf64x2_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_extracti32x4_epi32(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_extracti32x4_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_extracti32x4_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_extracti64x2_epi64(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_extracti64x2_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_maskz_extracti64x2_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_fixupimm_pd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_fixupimm_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fixupimm_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_fixupimm_pd(
        arg1: __m256d,
        arg2: __m256d,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_fixupimm_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_fixupimm_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_fixupimm_ps(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_fixupimm_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fixupimm_ps(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_fixupimm_ps(
        arg1: __m256,
        arg2: __m256,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_fixupimm_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_fixupimm_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm_mask_fmadd_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fmadd_pd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fmadd_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_fmadd_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask3_fmadd_pd(
        arg1: __m256d,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __mmask8,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_fmadd_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_fmadd_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fmadd_ps(arg1: __m128, arg2: __m128, arg3: __m128, arg4: __mmask8) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fmadd_ps(arg1: __mmask8, arg2: __m128, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_fmadd_ps(arg1: __m256, arg2: __mmask8, arg3: __m256, arg4: __m256)
        -> __m256;
}
extern "C" {
    pub fn _mm256_mask3_fmadd_ps(
        arg1: __m256,
        arg2: __m256,
        arg3: __m256,
        arg4: __mmask8,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_fmadd_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm_mask_fmaddsub_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fmaddsub_pd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fmaddsub_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_fmaddsub_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask3_fmaddsub_pd(
        arg1: __m256d,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __mmask8,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_fmaddsub_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_fmaddsub_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128)
        -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fmaddsub_ps(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128,
        arg4: __mmask8,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fmaddsub_ps(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: __m128,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_fmaddsub_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_mask3_fmaddsub_ps(
        arg1: __m256,
        arg2: __m256,
        arg3: __m256,
        arg4: __mmask8,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_fmaddsub_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm_mask_fmsub_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fmsub_pd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fmsub_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_fmsub_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask3_fmsub_pd(
        arg1: __m256d,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __mmask8,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_fmsub_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_fmsub_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fmsub_ps(arg1: __m128, arg2: __m128, arg3: __m128, arg4: __mmask8) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fmsub_ps(arg1: __mmask8, arg2: __m128, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_fmsub_ps(arg1: __m256, arg2: __mmask8, arg3: __m256, arg4: __m256)
        -> __m256;
}
extern "C" {
    pub fn _mm256_mask3_fmsub_ps(
        arg1: __m256,
        arg2: __m256,
        arg3: __m256,
        arg4: __mmask8,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_fmsub_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm_mask_fmsubadd_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fmsubadd_pd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fmsubadd_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_fmsubadd_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask3_fmsubadd_pd(
        arg1: __m256d,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __mmask8,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_fmsubadd_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_fmsubadd_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128)
        -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fmsubadd_ps(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128,
        arg4: __mmask8,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fmsubadd_ps(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: __m128,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_fmsubadd_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_mask3_fmsubadd_ps(
        arg1: __m256,
        arg2: __m256,
        arg3: __m256,
        arg4: __mmask8,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_fmsubadd_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm_mask_fnmadd_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fnmadd_pd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fnmadd_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_fnmadd_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask3_fnmadd_pd(
        arg1: __m256d,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __mmask8,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_fnmadd_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_fnmadd_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fnmadd_ps(arg1: __m128, arg2: __m128, arg3: __m128, arg4: __mmask8) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fnmadd_ps(arg1: __mmask8, arg2: __m128, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_fnmadd_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_mask3_fnmadd_ps(
        arg1: __m256,
        arg2: __m256,
        arg3: __m256,
        arg4: __mmask8,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_fnmadd_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm_mask_fnmsub_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fnmsub_pd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fnmsub_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_fnmsub_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask3_fnmsub_pd(
        arg1: __m256d,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __mmask8,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_fnmsub_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_fnmsub_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fnmsub_ps(arg1: __m128, arg2: __m128, arg3: __m128, arg4: __mmask8) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fnmsub_ps(arg1: __mmask8, arg2: __m128, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_fnmsub_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_mask3_fnmsub_ps(
        arg1: __m256,
        arg2: __m256,
        arg3: __m256,
        arg4: __mmask8,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_fnmsub_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm_fpclass_pd_mask(arg1: __m128d, arg2: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_fpclass_pd_mask(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_fpclass_pd_mask(arg1: __m256d, arg2: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_fpclass_pd_mask(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_fpclass_ps_mask(arg1: __m128, arg2: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_fpclass_ps_mask(
        arg1: __mmask8,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_fpclass_ps_mask(arg1: __m256, arg2: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_fpclass_ps_mask(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_getexp_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_getexp_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_getexp_pd(arg1: __mmask8, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_getexp_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_getexp_pd(arg1: __m256d, arg2: __mmask8, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_getexp_pd(arg1: __mmask8, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_getexp_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask_getexp_ps(arg1: __m128, arg2: __mmask8, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_getexp_ps(arg1: __mmask8, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_getexp_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_getexp_ps(arg1: __m256, arg2: __mmask8, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_getexp_ps(arg1: __mmask8, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_getmant_pd(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_getmant_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_getmant_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_getmant_pd(
        arg1: __m256d,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_getmant_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_getmant_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_getmant_ps(
        arg1: __m128,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_getmant_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_getmant_ps(
        arg1: __mmask8,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_getmant_ps(
        arg1: __m256,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_getmant_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_getmant_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm_mmask_i32gather_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mmask_i32gather_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mmask_i32gather_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mmask_i32gather_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mmask_i32gather_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_mmask_i32gather_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_mmask_i32gather_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_mmask_i32gather_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm_i32scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_mask_i32scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_i32scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_mask_i32scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_i32scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_mask_i32scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_i32scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m128i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_mask_i32scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_i32scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m128i,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_mask_i32scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_i32scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m128i,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_mask_i32scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m256d,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_i32scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m128i,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_mask_i32scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_i32scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m256i,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_mask_i32scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_mmask_i64gather_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mmask_i64gather_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_mmask_i64gather_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mmask_i64gather_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mmask_i64gather_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_mmask_i64gather_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_mmask_i64gather_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_mmask_i64gather_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: *const ::std::os::raw::c_void,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_i64scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_mask_i64scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_i64scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m256i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_mask_i64scatter_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_i64scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_mask_i64scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_i64scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_mask_i64scatter_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_i64scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m128i,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_mask_i64scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_i64scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m256i,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_mask_i64scatter_pd(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256d,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_i64scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m128i,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_mask_i64scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_i64scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __m256i,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_mask_i64scatter_ps(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm256_insertf32x4(arg1: __m256, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_insertf32x4(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_insertf32x4(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_insertf64x2(arg1: __m256d, arg2: __m128d, arg3: ::std::os::raw::c_int)
        -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_insertf64x2(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_insertf64x2(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_inserti32x4(arg1: __m256i, arg2: __m128i, arg3: ::std::os::raw::c_int)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_inserti32x4(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_inserti32x4(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_inserti64x2(arg1: __m256i, arg2: __m128i, arg3: ::std::os::raw::c_int)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_inserti64x2(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_inserti64x2(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_load_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_load_epi32(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_load_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_load_epi32(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_load_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_load_epi64(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_load_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_load_epi64(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_load_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_load_pd(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_load_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_load_pd(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_load_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_load_ps(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_load_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_load_ps(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m256;
}
extern "C" {
    pub fn _mm_loadu_epi16(arg1: *const ::std::os::raw::c_void) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_loadu_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_loadu_epi16(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m128i;
}
extern "C" {
    pub fn _mm256_loadu_epi16(arg1: *const ::std::os::raw::c_void) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_loadu_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_loadu_epi16(
        arg1: __mmask16,
        arg2: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_loadu_epi32(arg1: *const ::std::os::raw::c_void) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_loadu_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_loadu_epi32(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m128i;
}
extern "C" {
    pub fn _mm256_loadu_epi32(arg1: *const ::std::os::raw::c_void) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_loadu_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_loadu_epi32(arg1: __mmask8, arg2: *const ::std::os::raw::c_void)
        -> __m256i;
}
extern "C" {
    pub fn _mm_loadu_epi64(arg1: *const ::std::os::raw::c_void) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_loadu_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_loadu_epi64(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m128i;
}
extern "C" {
    pub fn _mm256_loadu_epi64(arg1: *const ::std::os::raw::c_void) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_loadu_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_loadu_epi64(arg1: __mmask8, arg2: *const ::std::os::raw::c_void)
        -> __m256i;
}
extern "C" {
    pub fn _mm_loadu_epi8(arg1: *const ::std::os::raw::c_void) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_loadu_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_loadu_epi8(arg1: __mmask16, arg2: *const ::std::os::raw::c_void) -> __m128i;
}
extern "C" {
    pub fn _mm256_loadu_epi8(arg1: *const ::std::os::raw::c_void) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_loadu_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_loadu_epi8(arg1: __mmask32, arg2: *const ::std::os::raw::c_void)
        -> __m256i;
}
extern "C" {
    pub fn _mm_mask_loadu_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_loadu_pd(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_loadu_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_loadu_pd(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_loadu_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_loadu_ps(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_loadu_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_loadu_ps(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m256;
}
extern "C" {
    pub fn _mm_lzcnt_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_lzcnt_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_lzcnt_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_lzcnt_epi32(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_lzcnt_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_lzcnt_epi32(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_lzcnt_epi64(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_lzcnt_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_lzcnt_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_lzcnt_epi64(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_lzcnt_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_lzcnt_epi64(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_madd_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_madd_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_madd_epi16(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_madd_epi16(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_maddubs_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_maddubs_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_maddubs_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_maddubs_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_max_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_max_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_max_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_max_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_max_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_max_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_max_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_max_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_max_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_max_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_max_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_max_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_max_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_max_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_max_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_max_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_max_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_max_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_max_epu16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_max_epu16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_max_epu16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_max_epu16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_max_epu32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_max_epu32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_max_epu32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_max_epu32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_max_epu64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_max_epu64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_max_epu64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_max_epu64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_max_epu64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_max_epu64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_max_epu8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_max_epu8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_max_epu8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_max_epu8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_max_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_max_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_max_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_max_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_max_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_max_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_max_ps(arg1: __m256, arg2: __mmask8, arg3: __m256, arg4: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_max_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_min_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_min_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_min_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_min_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_min_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_min_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_min_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_min_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_min_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_min_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_min_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_min_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_min_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_min_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_min_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_min_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_min_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_min_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_min_epu16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_min_epu16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_min_epu16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_min_epu16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_min_epu32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_min_epu32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_min_epu32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_min_epu32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_min_epu64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_min_epu64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_min_epu64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_min_epu64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_min_epu64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_min_epu64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_min_epu8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_min_epu8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_min_epu8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_min_epu8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_min_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_min_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_min_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_min_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_min_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_min_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_min_ps(arg1: __m256, arg2: __mmask8, arg3: __m256, arg4: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_min_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_mov_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mov_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mov_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mov_epi16(arg1: __mmask16, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mov_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mov_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mov_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mov_epi32(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mov_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mov_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mov_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mov_epi64(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mov_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mov_epi8(arg1: __mmask16, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mov_epi8(arg1: __m256i, arg2: __mmask32, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mov_epi8(arg1: __mmask32, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mov_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_mov_pd(arg1: __mmask8, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_mov_pd(arg1: __m256d, arg2: __mmask8, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_mov_pd(arg1: __mmask8, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_mov_ps(arg1: __m128, arg2: __mmask8, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_mov_ps(arg1: __mmask8, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_mov_ps(arg1: __m256, arg2: __mmask8, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_mov_ps(arg1: __mmask8, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_movedup_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_movedup_pd(arg1: __mmask8, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_movedup_pd(arg1: __m256d, arg2: __mmask8, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_movedup_pd(arg1: __mmask8, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_movehdup_ps(arg1: __m128, arg2: __mmask8, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_movehdup_ps(arg1: __mmask8, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_movehdup_ps(arg1: __m256, arg2: __mmask8, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_movehdup_ps(arg1: __mmask8, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_moveldup_ps(arg1: __m128, arg2: __mmask8, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_moveldup_ps(arg1: __mmask8, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_moveldup_ps(arg1: __m256, arg2: __mmask8, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_moveldup_ps(arg1: __mmask8, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_movepi16_mask(arg1: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_movepi16_mask(arg1: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm_movepi32_mask(arg1: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_movepi32_mask(arg1: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm_movepi64_mask(arg1: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_movepi64_mask(arg1: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm_movepi8_mask(arg1: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_movepi8_mask(arg1: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm_movm_epi16(arg1: __mmask8) -> __m128i;
}
extern "C" {
    pub fn _mm256_movm_epi16(arg1: __mmask16) -> __m256i;
}
extern "C" {
    pub fn _mm_movm_epi32(arg1: __mmask8) -> __m128i;
}
extern "C" {
    pub fn _mm256_movm_epi32(arg1: __mmask8) -> __m256i;
}
extern "C" {
    pub fn _mm_movm_epi64(arg1: __mmask8) -> __m128i;
}
extern "C" {
    pub fn _mm256_movm_epi64(arg1: __mmask8) -> __m256i;
}
extern "C" {
    pub fn _mm_movm_epi8(arg1: __mmask16) -> __m128i;
}
extern "C" {
    pub fn _mm256_movm_epi8(arg1: __mmask32) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mul_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mul_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mul_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mul_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mul_epu32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mul_epu32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mul_epu32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mul_epu32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mul_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_mul_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_mul_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_mul_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_mul_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_mul_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_mul_ps(arg1: __m256, arg2: __mmask8, arg3: __m256, arg4: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_mul_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_mulhi_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mulhi_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mulhi_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mulhi_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mulhi_epu16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mulhi_epu16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mulhi_epu16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mulhi_epu16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mulhrs_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mulhrs_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mulhrs_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mulhrs_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mullo_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mullo_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mullo_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mullo_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mullo_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mullo_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mullo_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mullo_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_mullo_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_mullo_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mullo_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_mullo_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_mullo_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mullo_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_or_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_or_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_or_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_or_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_or_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_or_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_or_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_or_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_or_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_or_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_or_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_or_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_or_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_or_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_or_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_or_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_or_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_or_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_or_ps(arg1: __m256, arg2: __mmask8, arg3: __m256, arg4: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_or_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_packs_epi16(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_packs_epi16(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_packs_epi16(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_packs_epi16(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_packs_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_packs_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_packs_epi32(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_packs_epi32(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_packus_epi16(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_packus_epi16(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_packus_epi16(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_packus_epi16(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_packus_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_packus_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_packus_epi32(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_packus_epi32(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_permute_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_permute_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_permute_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_permute_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_permute_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_permute_ps(
        arg1: __mmask8,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_permute_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_permute_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm_mask_permutevar_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128i,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_permutevar_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128i) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_permutevar_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256i,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_permutevar_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256i) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_permutevar_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128i,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_permutevar_ps(arg1: __mmask8, arg2: __m128, arg3: __m128i) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_permutevar_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256i,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_permutevar_ps(arg1: __mmask8, arg2: __m256, arg3: __m256i) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_permutex_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_permutex_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_permutex_epi64(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_permutex_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_permutex_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_permutex_pd(arg1: __m256d, arg2: ::std::os::raw::c_int) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_permutex2var_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_mask2_permutex2var_epi16(
        arg1: __m128i,
        arg2: __m128i,
        arg3: __mmask8,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_permutex2var_epi16(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_permutex2var_epi16(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_permutex2var_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask2_permutex2var_epi16(
        arg1: __m256i,
        arg2: __m256i,
        arg3: __mmask16,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_permutex2var_epi16(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_permutex2var_epi16(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_permutex2var_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_mask2_permutex2var_epi32(
        arg1: __m128i,
        arg2: __m128i,
        arg3: __mmask8,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_permutex2var_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_permutex2var_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_permutex2var_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask2_permutex2var_epi32(
        arg1: __m256i,
        arg2: __m256i,
        arg3: __mmask8,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_permutex2var_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_permutex2var_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_permutex2var_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_mask2_permutex2var_epi64(
        arg1: __m128i,
        arg2: __m128i,
        arg3: __mmask8,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_permutex2var_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_permutex2var_epi64(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_permutex2var_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask2_permutex2var_epi64(
        arg1: __m256i,
        arg2: __m256i,
        arg3: __mmask8,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_permutex2var_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_permutex2var_epi64(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_permutex2var_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask2_permutex2var_pd(
        arg1: __m128d,
        arg2: __m128i,
        arg3: __mmask8,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_permutex2var_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128i,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_permutex2var_pd(arg1: __m128d, arg2: __m128i, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_permutex2var_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask2_permutex2var_pd(
        arg1: __m256d,
        arg2: __m256i,
        arg3: __mmask8,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_permutex2var_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256i,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_permutex2var_pd(arg1: __m256d, arg2: __m256i, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_permutex2var_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask2_permutex2var_ps(
        arg1: __m128,
        arg2: __m128i,
        arg3: __mmask8,
        arg4: __m128,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_permutex2var_ps(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128i,
        arg4: __m128,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_permutex2var_ps(arg1: __m128, arg2: __m128i, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_permutex2var_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_mask2_permutex2var_ps(
        arg1: __m256,
        arg2: __m256i,
        arg3: __mmask8,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_permutex2var_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256i,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_permutex2var_ps(arg1: __m256, arg2: __m256i, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_permutexvar_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_permutexvar_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_permutexvar_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_permutexvar_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_permutexvar_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_permutexvar_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_permutexvar_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_permutexvar_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_permutexvar_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_permutexvar_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_permutexvar_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_permutexvar_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_permutexvar_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_permutexvar_pd(arg1: __mmask8, arg2: __m256i, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_permutexvar_pd(arg1: __m256i, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_permutexvar_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_permutexvar_ps(arg1: __mmask8, arg2: __m256i, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_permutexvar_ps(arg1: __m256i, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_range_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_range_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_range_pd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_range_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
        arg5: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_range_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_range_pd(arg1: __m256d, arg2: __m256d, arg3: ::std::os::raw::c_int) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_range_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_range_ps(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_range_ps(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_range_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256,
        arg5: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_range_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_range_ps(arg1: __m256, arg2: __m256, arg3: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm_mask_rcp14_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_rcp14_pd(arg1: __mmask8, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_rcp14_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_rcp14_pd(arg1: __m256d, arg2: __mmask8, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_rcp14_pd(arg1: __mmask8, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_rcp14_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_rcp14_ps(arg1: __m128, arg2: __mmask8, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_rcp14_ps(arg1: __mmask8, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_rcp14_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_rcp14_ps(arg1: __m256, arg2: __mmask8, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_rcp14_ps(arg1: __mmask8, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_rcp14_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_reduce_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_reduce_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_reduce_pd(arg1: __m128d, arg2: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_reduce_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_reduce_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_reduce_pd(arg1: __m256d, arg2: ::std::os::raw::c_int) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_reduce_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_reduce_ps(arg1: __mmask8, arg2: __m128, arg3: ::std::os::raw::c_int)
        -> __m128;
}
extern "C" {
    pub fn _mm_reduce_ps(arg1: __m128, arg2: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_reduce_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_reduce_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_reduce_ps(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm_mask_rol_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_rol_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_rol_epi32(arg1: __m128i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_rol_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_rol_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_rol_epi32(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_rol_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_rol_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_rol_epi64(arg1: __m128i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_rol_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_rol_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_rol_epi64(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_rolv_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_rolv_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rolv_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_rolv_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_rolv_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rolv_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_rolv_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_rolv_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rolv_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_rolv_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_rolv_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rolv_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_ror_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_ror_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_ror_epi32(arg1: __m128i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_ror_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_ror_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_ror_epi32(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_ror_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_ror_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_ror_epi64(arg1: __m128i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_ror_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_ror_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_ror_epi64(arg1: __m256i, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_rorv_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_rorv_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rorv_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_rorv_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_rorv_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rorv_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_rorv_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_rorv_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rorv_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_rorv_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_rorv_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_rorv_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_roundscale_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_roundscale_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_roundscale_pd(arg1: __m128d, arg2: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_roundscale_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_roundscale_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_roundscale_pd(arg1: __m256d, arg2: ::std::os::raw::c_int) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_roundscale_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_roundscale_ps(
        arg1: __mmask8,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_roundscale_ps(arg1: __m128, arg2: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_roundscale_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_roundscale_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_roundscale_ps(arg1: __m256, arg2: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm_mask_rsqrt14_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_rsqrt14_pd(arg1: __mmask8, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_rsqrt14_pd(arg1: __m256d, arg2: __mmask8, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_rsqrt14_pd(arg1: __mmask8, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_rsqrt14_ps(arg1: __m128, arg2: __mmask8, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_rsqrt14_ps(arg1: __mmask8, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_rsqrt14_ps(arg1: __m256, arg2: __mmask8, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_rsqrt14_ps(arg1: __mmask8, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_scalef_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_scalef_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_scalef_pd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_scalef_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_scalef_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_scalef_pd(arg1: __m256d, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_scalef_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_scalef_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_scalef_ps(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_scalef_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_scalef_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_scalef_ps(arg1: __m256, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_set1_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: ::std::os::raw::c_short,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_set1_epi16(arg1: __mmask8, arg2: ::std::os::raw::c_short) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_set1_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: ::std::os::raw::c_short,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_set1_epi16(arg1: __mmask16, arg2: ::std::os::raw::c_short) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_set1_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_set1_epi32(arg1: __mmask8, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_set1_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_set1_epi32(arg1: __mmask8, arg2: ::std::os::raw::c_int) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_set1_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: ::std::os::raw::c_longlong,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_set1_epi64(arg1: __mmask8, arg2: ::std::os::raw::c_longlong) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_set1_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: ::std::os::raw::c_longlong,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_set1_epi64(arg1: __mmask8, arg2: ::std::os::raw::c_longlong) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_set1_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: ::std::os::raw::c_char,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_set1_epi8(arg1: __mmask16, arg2: ::std::os::raw::c_char) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_set1_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: ::std::os::raw::c_char,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_set1_epi8(arg1: __mmask32, arg2: ::std::os::raw::c_char) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_shuffle_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shuffle_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_shuffle_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shuffle_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_shuffle_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shuffle_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_shuffle_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shuffle_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shuffle_f32x4(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256,
        arg5: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_shuffle_f32x4(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_shuffle_f32x4(arg1: __m256, arg2: __m256, arg3: ::std::os::raw::c_int) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_shuffle_f64x2(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
        arg5: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_shuffle_f64x2(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_shuffle_f64x2(
        arg1: __m256d,
        arg2: __m256d,
        arg3: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_shuffle_i32x4(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shuffle_i32x4(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_shuffle_i32x4(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shuffle_i64x2(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shuffle_i64x2(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_shuffle_i64x2(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_shuffle_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_shuffle_pd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_shuffle_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
        arg5: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_shuffle_pd(
        arg1: __mmask8,
        arg2: __m256d,
        arg3: __m256d,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_shuffle_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_shuffle_ps(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_shuffle_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256,
        arg5: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_shuffle_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm_mask_shufflehi_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shufflehi_epi16(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_shufflehi_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shufflehi_epi16(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_shufflelo_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shufflelo_epi16(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_shufflelo_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shufflelo_epi16(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sll_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sll_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sll_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m128i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sll_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sll_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sll_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sll_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m128i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sll_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sll_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sll_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sll_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m128i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sll_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_slli_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_slli_epi16(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_slli_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_slli_epi16(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_slli_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_slli_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_slli_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_slli_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_slli_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_slli_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_slli_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_slli_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sllv_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sllv_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sllv_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sllv_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sllv_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sllv_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sllv_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sllv_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sllv_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sllv_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sllv_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sllv_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sllv_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sllv_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sqrt_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_sqrt_pd(arg1: __mmask8, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_sqrt_pd(arg1: __m256d, arg2: __mmask8, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_sqrt_pd(arg1: __mmask8, arg2: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_sqrt_ps(arg1: __m128, arg2: __mmask8, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_sqrt_ps(arg1: __mmask8, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_sqrt_ps(arg1: __m256, arg2: __mmask8, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_sqrt_ps(arg1: __mmask8, arg2: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_sra_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sra_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sra_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m128i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sra_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sra_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sra_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sra_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m128i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sra_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sra_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sra_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sra_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sra_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m128i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sra_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm256_sra_epi64(arg1: __m256i, arg2: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srai_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srai_epi16(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srai_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srai_epi16(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srai_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srai_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srai_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srai_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srai_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srai_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_srai_epi64(arg1: __m128i, arg2: ::std::os::raw::c_uint) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srai_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srai_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_srai_epi64(arg1: __m256i, arg2: ::std::os::raw::c_uint) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srav_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srav_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_srav_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srav_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srav_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_srav_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srav_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srav_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srav_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srav_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srav_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srav_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_srav_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srav_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srav_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_srav_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srl_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srl_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srl_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m128i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srl_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srl_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srl_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srl_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m128i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srl_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srl_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srl_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srl_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m128i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srl_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m128i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srli_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srli_epi16(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srli_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srli_epi16(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srli_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srli_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srli_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srli_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srli_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srli_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srli_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srli_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: ::std::os::raw::c_uint,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srlv_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srlv_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_srlv_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srlv_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srlv_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_srlv_epi16(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srlv_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srlv_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srlv_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srlv_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_srlv_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_srlv_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_srlv_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_srlv_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_store_epi32(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m128i);
}
extern "C" {
    pub fn _mm256_mask_store_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_store_epi64(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m128i);
}
extern "C" {
    pub fn _mm256_mask_store_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_store_pd(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m128d);
}
extern "C" {
    pub fn _mm256_mask_store_pd(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m256d);
}
extern "C" {
    pub fn _mm_mask_store_ps(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m128);
}
extern "C" {
    pub fn _mm256_mask_store_ps(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m256);
}
extern "C" {
    pub fn _mm_storeu_epi16(arg1: *mut ::std::os::raw::c_void, arg2: __m128i);
}
extern "C" {
    pub fn _mm256_storeu_epi16(arg1: *mut ::std::os::raw::c_void, arg2: __m256i);
}
extern "C" {
    pub fn _mm_mask_storeu_epi16(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m128i);
}
extern "C" {
    pub fn _mm256_mask_storeu_epi16(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask16,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_storeu_epi32(arg1: *mut ::std::os::raw::c_void, arg2: __m128i);
}
extern "C" {
    pub fn _mm256_storeu_epi32(arg1: *mut ::std::os::raw::c_void, arg2: __m256i);
}
extern "C" {
    pub fn _mm_mask_storeu_epi32(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m128i);
}
extern "C" {
    pub fn _mm256_mask_storeu_epi32(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_storeu_epi64(arg1: *mut ::std::os::raw::c_void, arg2: __m128i);
}
extern "C" {
    pub fn _mm256_storeu_epi64(arg1: *mut ::std::os::raw::c_void, arg2: __m256i);
}
extern "C" {
    pub fn _mm_mask_storeu_epi64(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m128i);
}
extern "C" {
    pub fn _mm256_mask_storeu_epi64(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask8,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_storeu_epi8(arg1: *mut ::std::os::raw::c_void, arg2: __m128i);
}
extern "C" {
    pub fn _mm256_storeu_epi8(arg1: *mut ::std::os::raw::c_void, arg2: __m256i);
}
extern "C" {
    pub fn _mm_mask_storeu_epi8(arg1: *mut ::std::os::raw::c_void, arg2: __mmask16, arg3: __m128i);
}
extern "C" {
    pub fn _mm256_mask_storeu_epi8(
        arg1: *mut ::std::os::raw::c_void,
        arg2: __mmask32,
        arg3: __m256i,
    );
}
extern "C" {
    pub fn _mm_mask_storeu_pd(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m128d);
}
extern "C" {
    pub fn _mm256_mask_storeu_pd(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m256d);
}
extern "C" {
    pub fn _mm_mask_storeu_ps(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m128);
}
extern "C" {
    pub fn _mm256_mask_storeu_ps(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m256);
}
extern "C" {
    pub fn _mm_mask_sub_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sub_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sub_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sub_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sub_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sub_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sub_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sub_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sub_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sub_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sub_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sub_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sub_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_sub_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_sub_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_sub_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_sub_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_sub_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_sub_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_sub_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_sub_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_sub_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_sub_ps(arg1: __m256, arg2: __mmask8, arg3: __m256, arg4: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_sub_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_subs_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_subs_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_subs_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_subs_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_subs_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_subs_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_subs_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_subs_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_subs_epu16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_subs_epu16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_subs_epu16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_subs_epu16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_subs_epu8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_subs_epu8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_subs_epu8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_subs_epu8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_ternarylogic_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_ternarylogic_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_ternarylogic_epi32(
        arg1: __m128i,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_ternarylogic_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_ternarylogic_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_ternarylogic_epi32(
        arg1: __m256i,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_ternarylogic_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_ternarylogic_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_ternarylogic_epi64(
        arg1: __m128i,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_ternarylogic_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_ternarylogic_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_ternarylogic_epi64(
        arg1: __m256i,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_test_epi16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_test_epi16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_test_epi16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_test_epi16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_test_epi32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_test_epi32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_test_epi32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_test_epi32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_test_epi64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_test_epi64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_test_epi64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_test_epi64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_test_epi8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_test_epi8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_test_epi8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_test_epi8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm_mask_testn_epi16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_testn_epi16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_testn_epi16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm256_testn_epi16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_testn_epi32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_testn_epi32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_testn_epi32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_testn_epi32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_testn_epi64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_testn_epi64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_testn_epi64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_testn_epi64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_testn_epi8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_testn_epi8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_testn_epi8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_testn_epi8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm_mask_unpackhi_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_unpackhi_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_unpackhi_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_unpackhi_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_unpackhi_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_unpackhi_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_unpackhi_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_unpackhi_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_unpackhi_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_unpackhi_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_unpackhi_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_unpackhi_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_unpackhi_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_unpackhi_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_unpackhi_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_unpackhi_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_unpackhi_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_unpackhi_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_unpackhi_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_unpackhi_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_unpackhi_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128)
        -> __m128;
}
extern "C" {
    pub fn _mm_maskz_unpackhi_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_unpackhi_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_unpackhi_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_mask_unpacklo_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_unpacklo_epi16(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_unpacklo_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_unpacklo_epi16(arg1: __mmask16, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_unpacklo_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_unpacklo_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_unpacklo_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_unpacklo_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_unpacklo_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_unpacklo_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_unpacklo_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_unpacklo_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_unpacklo_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_unpacklo_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_mask_unpacklo_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_unpacklo_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_unpacklo_pd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_unpacklo_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_unpacklo_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_unpacklo_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_unpacklo_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128)
        -> __m128;
}
extern "C" {
    pub fn _mm_maskz_unpacklo_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_unpacklo_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_unpacklo_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_xor_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_xor_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_xor_epi32(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_xor_epi32(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_xor_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_xor_epi32(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_xor_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_xor_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_xor_epi64(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_xor_epi64(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_xor_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_xor_epi64(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm_mask_xor_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_xor_pd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm256_mask_xor_pd(
        arg1: __m256d,
        arg2: __mmask8,
        arg3: __m256d,
        arg4: __m256d,
    ) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_xor_pd(arg1: __mmask8, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm_mask_xor_ps(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_xor_ps(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm256_mask_xor_ps(arg1: __m256, arg2: __mmask8, arg3: __m256, arg4: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_xor_ps(arg1: __mmask8, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm_cmpeq_epi8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmpge_epi8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmpgt_epi8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmple_epi8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmplt_epi8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmpneq_epi8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmpeq_epu8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmpge_epu8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmpgt_epu8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmple_epu8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmplt_epu8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmpneq_epu8_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmpeq_epi8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmpge_epi8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmpgt_epi8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmple_epi8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmplt_epi8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmpneq_epi8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmpeq_epu8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmpge_epu8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmpgt_epu8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmple_epu8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmplt_epu8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_cmpneq_epu8_mask(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_cmpeq_epi16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpge_epi16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpgt_epi16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmple_epi16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmplt_epi16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpneq_epi16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpeq_epu16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpge_epu16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpgt_epu16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmple_epu16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmplt_epu16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpneq_epu16_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpeq_epi16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpge_epi16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpgt_epi16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmple_epi16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmplt_epi16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpneq_epi16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpeq_epu16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpge_epu16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpgt_epu16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmple_epu16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmplt_epu16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpneq_epu16_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpeq_epi32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpge_epi32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpgt_epi32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmple_epi32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmplt_epi32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpneq_epi32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpeq_epu32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpge_epu32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpgt_epu32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmple_epu32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmplt_epu32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpneq_epu32_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpeq_epi32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpge_epi32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpgt_epi32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmple_epi32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmplt_epi32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpneq_epi32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpeq_epu32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpge_epu32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpgt_epu32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmple_epu32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmplt_epu32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpneq_epu32_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpeq_epi64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpge_epi64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpgt_epi64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmple_epi64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmplt_epi64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpneq_epi64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpeq_epu64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpge_epu64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpgt_epu64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmple_epu64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmplt_epu64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmpneq_epu64_mask(arg1: __m128i, arg2: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpeq_epi64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpge_epi64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpgt_epi64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmple_epi64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmplt_epi64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpneq_epi64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpeq_epu64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpge_epu64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpgt_epu64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmple_epu64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmplt_epu64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmpneq_epu64_mask(arg1: __mmask8, arg2: __m128i, arg3: __m128i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpeq_epi8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmpge_epi8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmpgt_epi8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmple_epi8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmplt_epi8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmpneq_epi8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmpeq_epu8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmpge_epu8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmpgt_epu8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmple_epu8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmplt_epu8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmpneq_epu8_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmpeq_epi8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmpge_epi8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmpgt_epi8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmple_epi8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmplt_epi8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmpneq_epi8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmpeq_epu8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmpge_epu8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmpgt_epu8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmple_epu8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmplt_epu8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_cmpneq_epu8_mask(arg1: __mmask32, arg2: __m256i, arg3: __m256i)
        -> __mmask32;
}
extern "C" {
    pub fn _mm256_cmpeq_epi16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmpge_epi16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmpgt_epi16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmple_epi16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmplt_epi16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmpneq_epi16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmpeq_epu16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmpge_epu16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmpgt_epu16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmple_epu16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmplt_epu16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmpneq_epu16_mask(arg1: __m256i, arg2: __m256i) -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmpeq_epi16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmpge_epi16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmpgt_epi16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmple_epi16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmplt_epi16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmpneq_epi16_mask(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: __m256i,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmpeq_epu16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmpge_epu16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmpgt_epu16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmple_epu16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmplt_epu16_mask(arg1: __mmask16, arg2: __m256i, arg3: __m256i)
        -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmpneq_epu16_mask(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: __m256i,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm256_cmpeq_epi32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpge_epi32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpgt_epi32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmple_epi32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmplt_epi32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpneq_epi32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpeq_epu32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpge_epu32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpgt_epu32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmple_epu32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmplt_epu32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpneq_epu32_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpeq_epi32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpge_epi32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpgt_epi32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmple_epi32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmplt_epi32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpneq_epi32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpeq_epu32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpge_epu32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpgt_epu32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmple_epu32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmplt_epu32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpneq_epu32_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpeq_epi64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpge_epi64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpgt_epi64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmple_epi64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmplt_epi64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpneq_epi64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpeq_epu64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpge_epu64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpgt_epu64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmple_epu64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmplt_epu64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmpneq_epu64_mask(arg1: __m256i, arg2: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpeq_epi64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpge_epi64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpgt_epi64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmple_epi64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmplt_epi64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpneq_epi64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpeq_epu64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpge_epu64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpgt_epu64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmple_epu64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmplt_epu64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm256_mask_cmpneq_epu64_mask(arg1: __mmask8, arg2: __m256i, arg3: __m256i) -> __mmask8;
}
extern "C" {
    pub fn _mm_add_round_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_add_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_add_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_add_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_add_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_add_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_add_sd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_add_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_add_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_add_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cmp_round_sd_mask(
        arg1: __m128d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_round_sd_mask(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmp_round_ss_mask(
        arg1: __m128,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_round_ss_mask(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmp_sd_mask(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_sd_mask(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmp_ss_mask(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_ss_mask(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_comi_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comi_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvt_roundi32_ss(
        arg1: __m128,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_cvt_roundsd_i32(arg1: __m128d, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvt_roundsd_si32(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvt_roundsd_ss(arg1: __m128, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_cvt_roundsd_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvt_roundsd_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_cvt_roundsd_u32(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvt_roundsi32_ss(
        arg1: __m128,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_cvt_roundss_i32(arg1: __m128, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvt_roundss_sd(arg1: __m128d, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_cvt_roundss_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_cvt_roundss_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_cvt_roundss_si32(arg1: __m128, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvt_roundss_u32(arg1: __m128, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvt_roundu32_ss(
        arg1: __m128,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_cvti32_sd(arg1: __m128d, arg2: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_cvti32_ss(arg1: __m128, arg2: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_cvtsd_i32(arg1: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_mask_cvtsd_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128d) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvtsd_ss(arg1: __mmask8, arg2: __m128, arg3: __m128d) -> __m128;
}
extern "C" {
    pub fn _mm_cvtsd_u32(arg1: __m128d) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvtss_i32(arg1: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_mask_cvtss_sd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128)
        -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_cvtss_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128) -> __m128d;
}
extern "C" {
    pub fn _mm_cvtss_u32(arg1: __m128) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvtt_roundsd_i32(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvtt_roundsd_si32(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvtt_roundsd_u32(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvtt_roundss_i32(arg1: __m128, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvtt_roundss_si32(
        arg1: __m128,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvtt_roundss_u32(
        arg1: __m128,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvttsd_i32(arg1: __m128d) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvttsd_u32(arg1: __m128d) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvttss_i32(arg1: __m128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvttss_u32(arg1: __m128) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvtu32_sd(arg1: __m128d, arg2: ::std::os::raw::c_uint) -> __m128d;
}
extern "C" {
    pub fn _mm_cvtu32_ss(arg1: __m128, arg2: ::std::os::raw::c_uint) -> __m128;
}
extern "C" {
    pub fn _mm_div_round_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_div_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_div_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_div_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_div_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_div_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_div_sd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_div_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_div_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_div_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fixupimm_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_fixupimm_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fixupimm_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_fixupimm_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_fixupimm_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fixupimm_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_fixupimm_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_fixupimm_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fixupimm_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_fixupimm_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_fixupimm_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fixupimm_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_fmadd_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_fmadd_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fmadd_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fmadd_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_fmadd_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_fmadd_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fmadd_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fmadd_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_fmadd_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fmadd_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fmadd_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_fmadd_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fmadd_ss(arg1: __m128, arg2: __m128, arg3: __m128, arg4: __mmask8) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fmadd_ss(arg1: __mmask8, arg2: __m128, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fmsub_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_fmsub_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fmsub_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fmsub_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_fmsub_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_fmsub_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fmsub_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fmsub_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_fmsub_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fmsub_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fmsub_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_fmsub_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fmsub_ss(arg1: __m128, arg2: __m128, arg3: __m128, arg4: __mmask8) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fmsub_ss(arg1: __mmask8, arg2: __m128, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fnmadd_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_fnmadd_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fnmadd_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fnmadd_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_fnmadd_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_fnmadd_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fnmadd_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fnmadd_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_fnmadd_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fnmadd_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fnmadd_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_fnmadd_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fnmadd_ss(arg1: __m128, arg2: __m128, arg3: __m128, arg4: __mmask8) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fnmadd_ss(arg1: __mmask8, arg2: __m128, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fnmsub_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_fnmsub_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fnmsub_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fnmsub_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_fnmsub_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_fnmsub_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fnmsub_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fnmsub_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_fnmsub_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask3_fnmsub_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __mmask8,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_fnmsub_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_fnmsub_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask3_fnmsub_ss(arg1: __m128, arg2: __m128, arg3: __m128, arg4: __mmask8) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_fnmsub_ss(arg1: __mmask8, arg2: __m128, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_fpclass_sd_mask(arg1: __m128d, arg2: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_fpclass_sd_mask(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_fpclass_ss_mask(arg1: __m128, arg2: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_fpclass_ss_mask(
        arg1: __mmask8,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_getexp_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_getexp_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_getexp_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_getexp_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_getexp_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_getexp_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_getexp_sd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_getexp_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_getexp_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_getexp_ss(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask_getexp_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_getexp_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_getmant_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_getmant_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_getmant_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_getmant_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_getmant_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_getmant_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_getmant_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_getmant_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_getmant_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_getmant_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_getmant_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_getmant_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_load_sd(arg1: __m128d, arg2: __mmask8, arg3: *const f64) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_load_sd(arg1: __mmask8, arg2: *const f64) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_load_ss(arg1: __m128, arg2: __mmask8, arg3: *const f32) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_load_ss(arg1: __mmask8, arg2: *const f32) -> __m128;
}
extern "C" {
    pub fn _mm_mask_max_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_max_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_max_round_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_max_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_max_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_max_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_max_sd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_max_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_max_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_max_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask_min_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_min_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_min_round_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_min_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_min_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_min_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_min_sd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_min_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_min_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_min_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask_move_sd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d)
        -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_move_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_move_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_move_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask_mul_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_mul_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mul_round_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_mul_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_mul_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mul_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_mul_sd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_mul_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_mul_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_mul_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_range_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_range_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_range_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_range_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_range_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_range_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_range_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_range_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_range_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_range_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_range_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_range_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_rcp14_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_rcp14_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_rcp14_sd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_rcp14_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_rcp14_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_rcp14_ss(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask_rcp28_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_rcp28_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_rcp28_round_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int)
        -> __m128d;
}
extern "C" {
    pub fn _mm_mask_rcp28_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_rcp28_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_rcp28_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_rcp28_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_rcp28_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_rcp28_sd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_rcp28_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_rcp28_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_rcp28_ss(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask_reduce_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_reduce_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_reduce_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_reduce_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_reduce_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_reduce_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_reduce_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_reduce_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_reduce_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_reduce_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_reduce_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_reduce_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_roundscale_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_roundscale_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_roundscale_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_roundscale_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_roundscale_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_roundscale_round_ss(
        arg1: __m128,
        arg2: __m128,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_mask_roundscale_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_roundscale_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_roundscale_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_roundscale_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_roundscale_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_roundscale_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_rsqrt14_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_rsqrt14_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_rsqrt14_sd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_rsqrt14_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_rsqrt14_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_rsqrt14_ss(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask_rsqrt28_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_rsqrt28_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_rsqrt28_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_rsqrt28_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_rsqrt28_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_rsqrt28_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_rsqrt28_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_rsqrt28_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_rsqrt28_sd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_rsqrt28_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_rsqrt28_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_rsqrt28_ss(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask_scalef_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_scalef_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_scalef_round_sd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_scalef_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_scalef_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_scalef_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_scalef_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_scalef_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_scalef_sd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_scalef_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_scalef_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_scalef_ss(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask_sqrt_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_sqrt_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_sqrt_round_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_sqrt_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_sqrt_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_sqrt_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_sqrt_sd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d)
        -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_sqrt_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_sqrt_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_sqrt_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_mask_store_sd(arg1: *mut f64, arg2: __mmask8, arg3: __m128d);
}
extern "C" {
    pub fn _mm_mask_store_ss(arg1: *mut f32, arg2: __mmask8, arg3: __m128);
}
extern "C" {
    pub fn _mm_mask_sub_round_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_sub_round_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_sub_round_sd(arg1: __m128d, arg2: __m128d, arg3: ::std::os::raw::c_int) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_sub_round_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_sub_round_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_sub_round_ss(arg1: __m128, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_sub_sd(arg1: __m128d, arg2: __mmask8, arg3: __m128d, arg4: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_sub_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_sub_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_sub_ss(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_cvtsd_u64(arg1: __m128d) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvtss_u64(arg1: __m128) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvttsd_u64(arg1: __m128d) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvttss_u64(arg1: __m128) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvt_roundsd_u64(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvt_roundss_u64(
        arg1: __m128,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvtt_roundsd_u64(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvtt_roundss_u64(
        arg1: __m128,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvti64_sd(arg1: __m128d, arg2: ::std::os::raw::c_longlong) -> __m128d;
}
extern "C" {
    pub fn _mm_cvti64_ss(arg1: __m128, arg2: ::std::os::raw::c_longlong) -> __m128;
}
extern "C" {
    pub fn _mm_cvtsd_i64(arg1: __m128d) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtss_i64(arg1: __m128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvttsd_i64(arg1: __m128d) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvttss_i64(arg1: __m128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtt_roundsd_i64(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtt_roundsd_si64(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtt_roundss_i64(
        arg1: __m128,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtt_roundss_si64(
        arg1: __m128,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtu64_sd(arg1: __m128d, arg2: ::std::os::raw::c_ulonglong) -> __m128d;
}
extern "C" {
    pub fn _mm_cvtu64_ss(arg1: __m128, arg2: ::std::os::raw::c_ulonglong) -> __m128;
}
extern "C" {
    pub fn _mm_cvt_roundi64_sd(
        arg1: __m128d,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_cvt_roundi64_ss(
        arg1: __m128,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_cvt_roundsd_i64(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvt_roundsd_si64(
        arg1: __m128d,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvt_roundsi64_sd(
        arg1: __m128d,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_cvt_roundsi64_ss(
        arg1: __m128,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_cvt_roundss_i64(
        arg1: __m128,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvt_roundss_si64(
        arg1: __m128,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvt_roundu64_sd(
        arg1: __m128d,
        arg2: ::std::os::raw::c_ulonglong,
        arg3: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_cvt_roundu64_ss(
        arg1: __m128,
        arg2: ::std::os::raw::c_ulonglong,
        arg3: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm512_zextpd128_pd512(arg1: __m128d) -> __m512d;
}
extern "C" {
    pub fn _mm512_zextpd256_pd512(arg1: __m256d) -> __m512d;
}
extern "C" {
    pub fn _mm512_zextps128_ps512(arg1: __m128) -> __m512;
}
extern "C" {
    pub fn _mm512_zextps256_ps512(arg1: __m256) -> __m512;
}
extern "C" {
    pub fn _mm512_zextsi128_si512(arg1: __m128i) -> __m512i;
}
extern "C" {
    pub fn _mm512_zextsi256_si512(arg1: __m256i) -> __m512i;
}
extern "C" {
    pub fn _mm_madd52hi_epu64(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_madd52hi_epu64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_madd52hi_epu64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_madd52hi_epu64(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_madd52hi_epu64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_madd52hi_epu64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_madd52hi_epu64(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_madd52hi_epu64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_madd52hi_epu64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_madd52lo_epu64(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_madd52lo_epu64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_madd52lo_epu64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_madd52lo_epu64(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_madd52lo_epu64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_madd52lo_epu64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_madd52lo_epu64(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_madd52lo_epu64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_madd52lo_epu64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_permutexvar_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_permutexvar_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_permutexvar_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_permutexvar_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_permutexvar_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_permutexvar_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm512_permutexvar_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_permutexvar_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_permutexvar_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm_permutex2var_epi8(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_permutex2var_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_mask2_permutex2var_epi8(
        arg1: __m128i,
        arg2: __m128i,
        arg3: __mmask16,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_permutex2var_epi8(
        arg1: __mmask16,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_permutex2var_epi8(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_permutex2var_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask2_permutex2var_epi8(
        arg1: __m256i,
        arg2: __m256i,
        arg3: __mmask32,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_permutex2var_epi8(
        arg1: __mmask32,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_permutex2var_epi8(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_permutex2var_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask2_permutex2var_epi8(
        arg1: __m512i,
        arg2: __m512i,
        arg3: __mmask64,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_permutex2var_epi8(
        arg1: __mmask64,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_multishift_epi64_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_multishift_epi64_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_multishift_epi64_epi8(
        arg1: __mmask16,
        arg2: __m128i,
        arg3: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_multishift_epi64_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_multishift_epi64_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_multishift_epi64_epi8(
        arg1: __mmask32,
        arg2: __m256i,
        arg3: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_multishift_epi64_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_multishift_epi64_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_multishift_epi64_epi8(
        arg1: __mmask64,
        arg2: __m512i,
        arg3: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_dpbusd_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_dpbusd_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_dpbusd_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_dpbusd_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_dpbusd_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_dpbusd_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_dpbusd_epi32(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_dpbusd_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_dpbusd_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_dpbusds_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_dpbusds_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_dpbusds_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_dpbusds_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_dpbusds_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_dpbusds_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_dpbusds_epi32(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_dpbusds_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_dpbusds_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_dpwssd_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_dpwssd_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_dpwssd_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_dpwssd_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_dpwssd_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_dpwssd_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_dpwssd_epi32(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_dpwssd_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_dpwssd_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_dpwssds_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_dpwssds_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_dpwssds_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_dpwssds_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_dpwssds_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_dpwssds_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_dpwssds_epi32(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_dpwssds_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_dpwssds_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm256_aesenc_epi128(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm512_aesenc_epi128(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm256_aesenclast_epi128(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm512_aesenclast_epi128(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm256_aesdec_epi128(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm512_aesdec_epi128(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm256_aesdeclast_epi128(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm512_aesdeclast_epi128(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm256_clmulepi64_epi128(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_clmulepi64_epi128(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_popcnt_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_popcnt_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_popcnt_epi32(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_popcnt_epi32(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_popcnt_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_popcnt_epi32(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm512_popcnt_epi32(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_popcnt_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_popcnt_epi32(arg1: __mmask16, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm_popcnt_epi64(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_popcnt_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_popcnt_epi64(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_popcnt_epi64(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_popcnt_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_popcnt_epi64(arg1: __mmask8, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm512_popcnt_epi64(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_popcnt_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_popcnt_epi64(arg1: __mmask8, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm_popcnt_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_popcnt_epi8(arg1: __m128i, arg2: __mmask16, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_popcnt_epi8(arg1: __mmask16, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_popcnt_epi8(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_popcnt_epi8(arg1: __m256i, arg2: __mmask32, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_popcnt_epi8(arg1: __mmask32, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm512_popcnt_epi8(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_popcnt_epi8(arg1: __m512i, arg2: __mmask64, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_popcnt_epi8(arg1: __mmask64, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm_popcnt_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_popcnt_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_popcnt_epi16(arg1: __mmask8, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_popcnt_epi16(arg1: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_popcnt_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_popcnt_epi16(arg1: __mmask16, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm512_popcnt_epi16(arg1: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_popcnt_epi16(arg1: __m512i, arg2: __mmask32, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_popcnt_epi16(arg1: __mmask32, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm_bitshuffle_epi64_mask(arg1: __m128i, arg2: __m128i) -> __mmask16;
}
extern "C" {
    pub fn _mm_mask_bitshuffle_epi64_mask(
        arg1: __mmask16,
        arg2: __m128i,
        arg3: __m128i,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm256_bitshuffle_epi64_mask(arg1: __m256i, arg2: __m256i) -> __mmask32;
}
extern "C" {
    pub fn _mm256_mask_bitshuffle_epi64_mask(
        arg1: __mmask32,
        arg2: __m256i,
        arg3: __m256i,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm512_bitshuffle_epi64_mask(arg1: __m512i, arg2: __m512i) -> __mmask64;
}
extern "C" {
    pub fn _mm512_mask_bitshuffle_epi64_mask(
        arg1: __mmask64,
        arg2: __m512i,
        arg3: __m512i,
    ) -> __mmask64;
}
extern "C" {
    pub fn _mm_gf2p8affineinv_epi64_epi8(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_gf2p8affineinv_epi64_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_gf2p8affineinv_epi64_epi8(
        arg1: __mmask16,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_gf2p8affineinv_epi64_epi8(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_gf2p8affineinv_epi64_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_gf2p8affineinv_epi64_epi8(
        arg1: __mmask32,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_gf2p8affineinv_epi64_epi8(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_gf2p8affineinv_epi64_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_gf2p8affineinv_epi64_epi8(
        arg1: __mmask64,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_gf2p8affine_epi64_epi8(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_gf2p8affine_epi64_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_gf2p8affine_epi64_epi8(
        arg1: __mmask16,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_gf2p8affine_epi64_epi8(
        arg1: __m256i,
        arg2: __m256i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_gf2p8affine_epi64_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_gf2p8affine_epi64_epi8(
        arg1: __mmask32,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_gf2p8affine_epi64_epi8(
        arg1: __m512i,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_gf2p8affine_epi64_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_gf2p8affine_epi64_epi8(
        arg1: __mmask64,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_gf2p8mul_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_gf2p8mul_epi8(
        arg1: __m128i,
        arg2: __mmask16,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_gf2p8mul_epi8(arg1: __mmask16, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm256_gf2p8mul_epi8(arg1: __m256i, arg2: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_gf2p8mul_epi8(
        arg1: __m256i,
        arg2: __mmask32,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_gf2p8mul_epi8(arg1: __mmask32, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm512_gf2p8mul_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_gf2p8mul_epi8(
        arg1: __m512i,
        arg2: __mmask64,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_gf2p8mul_epi8(arg1: __mmask64, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm_shldi_epi16(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shldi_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shldi_epi16(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shldi_epi16(arg1: __m256i, arg2: __m256i, arg3: ::std::os::raw::c_int)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shldi_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shldi_epi16(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shldi_epi16(arg1: __m512i, arg2: __m512i, arg3: ::std::os::raw::c_int)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shldi_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shldi_epi16(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_shldi_epi32(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shldi_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shldi_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shldi_epi32(arg1: __m256i, arg2: __m256i, arg3: ::std::os::raw::c_int)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shldi_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shldi_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shldi_epi32(arg1: __m512i, arg2: __m512i, arg3: ::std::os::raw::c_int)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shldi_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shldi_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_shldi_epi64(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shldi_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shldi_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shldi_epi64(arg1: __m256i, arg2: __m256i, arg3: ::std::os::raw::c_int)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shldi_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shldi_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shldi_epi64(arg1: __m512i, arg2: __m512i, arg3: ::std::os::raw::c_int)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shldi_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shldi_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_shldv_epi16(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shldv_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shldv_epi16(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shldv_epi16(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shldv_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shldv_epi16(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shldv_epi16(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shldv_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shldv_epi16(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_shldv_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shldv_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shldv_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shldv_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shldv_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shldv_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shldv_epi32(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shldv_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shldv_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_shldv_epi64(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shldv_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shldv_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shldv_epi64(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shldv_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shldv_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shldv_epi64(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shldv_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shldv_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_shrdi_epi16(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shrdi_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shrdi_epi16(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shrdi_epi16(arg1: __m256i, arg2: __m256i, arg3: ::std::os::raw::c_int)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shrdi_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shrdi_epi16(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shrdi_epi16(arg1: __m512i, arg2: __m512i, arg3: ::std::os::raw::c_int)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shrdi_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shrdi_epi16(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_shrdi_epi32(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shrdi_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shrdi_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shrdi_epi32(arg1: __m256i, arg2: __m256i, arg3: ::std::os::raw::c_int)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shrdi_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shrdi_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shrdi_epi32(arg1: __m512i, arg2: __m512i, arg3: ::std::os::raw::c_int)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shrdi_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shrdi_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_shrdi_epi64(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shrdi_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
        arg5: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shrdi_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shrdi_epi64(arg1: __m256i, arg2: __m256i, arg3: ::std::os::raw::c_int)
        -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shrdi_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
        arg5: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shrdi_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shrdi_epi64(arg1: __m512i, arg2: __m512i, arg3: ::std::os::raw::c_int)
        -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shrdi_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
        arg5: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shrdi_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_shrdv_epi16(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shrdv_epi16(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shrdv_epi16(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shrdv_epi16(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shrdv_epi16(
        arg1: __m256i,
        arg2: __mmask16,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shrdv_epi16(
        arg1: __mmask16,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shrdv_epi16(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shrdv_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shrdv_epi16(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_shrdv_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shrdv_epi32(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shrdv_epi32(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shrdv_epi32(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shrdv_epi32(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shrdv_epi32(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shrdv_epi32(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shrdv_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shrdv_epi32(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_shrdv_epi64(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_shrdv_epi64(
        arg1: __m128i,
        arg2: __mmask8,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_shrdv_epi64(
        arg1: __mmask8,
        arg2: __m128i,
        arg3: __m128i,
        arg4: __m128i,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm256_shrdv_epi64(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_shrdv_epi64(
        arg1: __m256i,
        arg2: __mmask8,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_shrdv_epi64(
        arg1: __mmask8,
        arg2: __m256i,
        arg3: __m256i,
        arg4: __m256i,
    ) -> __m256i;
}
extern "C" {
    pub fn _mm512_shrdv_epi64(arg1: __m512i, arg2: __m512i, arg3: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_shrdv_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_shrdv_epi64(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_div_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_div_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_div_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_div_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_div_epu8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_div_epu16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_div_epu32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_div_epu64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_div_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_div_epu32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_rem_epi8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_rem_epi16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_rem_epi32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_rem_epi64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_rem_epu8(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_rem_epu16(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_rem_epu32(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_rem_epu64(arg1: __m512i, arg2: __m512i) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_rem_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_rem_epu32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: __m512i,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_sin_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_sin_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_sin_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_sin_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_cos_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cos_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_cos_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cos_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_sincos_ps(arg1: *mut __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_sincos_ps(
        arg1: *mut __m512,
        arg2: __m512,
        arg3: __m512,
        arg4: __mmask16,
        arg5: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_sincos_pd(arg1: *mut __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_sincos_pd(
        arg1: *mut __m512d,
        arg2: __m512d,
        arg3: __m512d,
        arg4: __mmask8,
        arg5: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_tan_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_tan_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_tan_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_tan_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_asin_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_asin_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_asin_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_asin_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_acos_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_acos_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_acos_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_acos_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_atan_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_atan_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_atan_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_atan_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_atan2_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_atan2_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_atan2_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_atan2_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_sind_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_sind_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_sind_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_sind_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_cosd_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cosd_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_cosd_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cosd_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_tand_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_tand_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_tand_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_tand_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_sinh_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_sinh_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_sinh_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_sinh_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_cosh_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cosh_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_cosh_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cosh_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_tanh_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_tanh_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_tanh_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_tanh_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_asinh_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_asinh_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_asinh_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_asinh_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_acosh_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_acosh_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_acosh_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_acosh_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_atanh_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_atanh_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_atanh_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_atanh_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_log_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_log_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_log_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_log_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_log1p_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_log1p_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_log1p_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_log1p_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_log10_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_log10_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_log10_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_log10_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_log2_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_log2_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_log2_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_log2_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_logb_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_logb_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_logb_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_logb_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_exp_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_exp_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_exp_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_exp_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_exp10_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_exp10_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_exp10_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_exp10_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_exp2_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_exp2_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_exp2_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_exp2_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_expm1_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_expm1_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_expm1_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_expm1_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_pow_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_pow_ps(arg1: __m512, arg2: __mmask16, arg3: __m512, arg4: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_pow_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_pow_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_trunc_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_trunc_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_trunc_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_trunc_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_floor_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_floor_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_floor_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_floor_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_ceil_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_ceil_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_ceil_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_ceil_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_svml_round_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_svml_round_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_svml_round_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_svml_round_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_fmod_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_fmod_ps(arg1: __m512, arg2: __mmask16, arg3: __m512, arg4: __m512)
        -> __m512;
}
extern "C" {
    pub fn _mm512_fmod_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_fmod_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_rint_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_rint_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_rint_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_rint_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_invsqrt_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_invsqrt_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_invsqrt_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_invsqrt_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_cbrt_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cbrt_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_cbrt_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cbrt_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_invcbrt_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_invcbrt_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_invcbrt_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_invcbrt_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_hypot_ps(arg1: __m512, arg2: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_hypot_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_hypot_pd(arg1: __m512d, arg2: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_hypot_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: __m512d,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_cdfnorm_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cdfnorm_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_cdfnorm_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cdfnorm_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_cdfnorminv_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cdfnorminv_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_cdfnorminv_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cdfnorminv_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_erf_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_erf_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_erf_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_erf_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_erfc_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_erfc_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_erfc_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_erfc_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_erfcinv_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_erfcinv_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_erfcinv_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_erfcinv_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_erfinv_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_erfinv_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_erfinv_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_erfinv_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_nearbyint_ps(arg1: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_nearbyint_ps(arg1: __m512, arg2: __mmask16, arg3: __m512) -> __m512;
}
extern "C" {
    pub fn _mm512_nearbyint_pd(arg1: __m512d) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_nearbyint_pd(arg1: __m512d, arg2: __mmask8, arg3: __m512d) -> __m512d;
}
pub type __m128bh = __m128i;
pub type __m256bh = __m256i;
pub type __m512bh = __m512i;
pub type __bfloat16 = ::std::os::raw::c_ushort;
extern "C" {
    pub fn _mm_cvtneps_pbh(arg1: __m128) -> __m128bh;
}
extern "C" {
    pub fn _mm_mask_cvtneps_pbh(arg1: __m128bh, arg2: __mmask8, arg3: __m128) -> __m128bh;
}
extern "C" {
    pub fn _mm_maskz_cvtneps_pbh(arg1: __mmask8, arg2: __m128) -> __m128bh;
}
extern "C" {
    pub fn _mm_cvtne2ps_pbh(arg1: __m128, arg2: __m128) -> __m128bh;
}
extern "C" {
    pub fn _mm_mask_cvtne2ps_pbh(
        arg1: __m128bh,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128,
    ) -> __m128bh;
}
extern "C" {
    pub fn _mm_maskz_cvtne2ps_pbh(arg1: __mmask8, arg2: __m128, arg3: __m128) -> __m128bh;
}
extern "C" {
    pub fn _mm_dpbf16_ps(arg1: __m128, arg2: __m128bh, arg3: __m128bh) -> __m128;
}
extern "C" {
    pub fn _mm_mask_dpbf16_ps(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128bh,
        arg4: __m128bh,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_dpbf16_ps(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128bh,
        arg4: __m128bh,
    ) -> __m128;
}
extern "C" {
    pub fn _mm256_cvtneps_pbh(arg1: __m256) -> __m128bh;
}
extern "C" {
    pub fn _mm256_mask_cvtneps_pbh(arg1: __m128bh, arg2: __mmask8, arg3: __m256) -> __m128bh;
}
extern "C" {
    pub fn _mm256_maskz_cvtneps_pbh(arg1: __mmask8, arg2: __m256) -> __m128bh;
}
extern "C" {
    pub fn _mm256_cvtne2ps_pbh(arg1: __m256, arg2: __m256) -> __m256bh;
}
extern "C" {
    pub fn _mm256_mask_cvtne2ps_pbh(
        arg1: __m256bh,
        arg2: __mmask16,
        arg3: __m256,
        arg4: __m256,
    ) -> __m256bh;
}
extern "C" {
    pub fn _mm256_maskz_cvtne2ps_pbh(arg1: __mmask16, arg2: __m256, arg3: __m256) -> __m256bh;
}
extern "C" {
    pub fn _mm256_dpbf16_ps(arg1: __m256, arg2: __m256bh, arg3: __m256bh) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_dpbf16_ps(
        arg1: __m256,
        arg2: __mmask8,
        arg3: __m256bh,
        arg4: __m256bh,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_dpbf16_ps(
        arg1: __mmask8,
        arg2: __m256,
        arg3: __m256bh,
        arg4: __m256bh,
    ) -> __m256;
}
extern "C" {
    pub fn _mm512_cvtneps_pbh(arg1: __m512) -> __m256bh;
}
extern "C" {
    pub fn _mm512_mask_cvtneps_pbh(arg1: __m256bh, arg2: __mmask16, arg3: __m512) -> __m256bh;
}
extern "C" {
    pub fn _mm512_maskz_cvtneps_pbh(arg1: __mmask16, arg2: __m512) -> __m256bh;
}
extern "C" {
    pub fn _mm512_cvtne2ps_pbh(arg1: __m512, arg2: __m512) -> __m512bh;
}
extern "C" {
    pub fn _mm512_mask_cvtne2ps_pbh(
        arg1: __m512bh,
        arg2: __mmask32,
        arg3: __m512,
        arg4: __m512,
    ) -> __m512bh;
}
extern "C" {
    pub fn _mm512_maskz_cvtne2ps_pbh(arg1: __mmask32, arg2: __m512, arg3: __m512) -> __m512bh;
}
extern "C" {
    pub fn _mm512_dpbf16_ps(arg1: __m512, arg2: __m512bh, arg3: __m512bh) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_dpbf16_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512bh,
        arg4: __m512bh,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_dpbf16_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: __m512bh,
        arg4: __m512bh,
    ) -> __m512;
}
extern "C" {
    pub fn _mm_cvtness_sbh(arg1: f32) -> __bfloat16;
}
extern "C" {
    pub fn _mm_cvtsbh_ss(arg1: __bfloat16) -> f32;
}
extern "C" {
    pub fn _mm_cvtpbh_ps(arg1: __m128bh) -> __m128;
}
extern "C" {
    pub fn _mm_mask_cvtpbh_ps(arg1: __m128, arg2: __mmask8, arg3: __m128bh) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvtpbh_ps(arg1: __mmask8, arg2: __m128bh) -> __m128;
}
extern "C" {
    pub fn _mm256_cvtpbh_ps(arg1: __m128bh) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_cvtpbh_ps(arg1: __m256, arg2: __mmask8, arg3: __m128bh) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_cvtpbh_ps(arg1: __mmask8, arg2: __m128bh) -> __m256;
}
extern "C" {
    pub fn _mm512_cvtpbh_ps(arg1: __m256bh) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cvtpbh_ps(arg1: __m512, arg2: __mmask16, arg3: __m256bh) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_cvtpbh_ps(arg1: __mmask16, arg2: __m256bh) -> __m512;
}
extern "C" {
    pub fn _kadd_mask8(arg1: __mmask8, arg2: __mmask8) -> __mmask8;
}
extern "C" {
    pub fn _kadd_mask16(arg1: __mmask16, arg2: __mmask16) -> __mmask16;
}
extern "C" {
    pub fn _kadd_mask32(arg1: __mmask32, arg2: __mmask32) -> __mmask32;
}
extern "C" {
    pub fn _kadd_mask64(arg1: __mmask64, arg2: __mmask64) -> __mmask64;
}
extern "C" {
    pub fn _kand_mask8(arg1: __mmask8, arg2: __mmask8) -> __mmask8;
}
extern "C" {
    pub fn _kand_mask16(arg1: __mmask16, arg2: __mmask16) -> __mmask16;
}
extern "C" {
    pub fn _kand_mask32(arg1: __mmask32, arg2: __mmask32) -> __mmask32;
}
extern "C" {
    pub fn _kand_mask64(arg1: __mmask64, arg2: __mmask64) -> __mmask64;
}
extern "C" {
    pub fn _kandn_mask8(arg1: __mmask8, arg2: __mmask8) -> __mmask8;
}
extern "C" {
    pub fn _kandn_mask16(arg1: __mmask16, arg2: __mmask16) -> __mmask16;
}
extern "C" {
    pub fn _kandn_mask32(arg1: __mmask32, arg2: __mmask32) -> __mmask32;
}
extern "C" {
    pub fn _kandn_mask64(arg1: __mmask64, arg2: __mmask64) -> __mmask64;
}
extern "C" {
    pub fn _knot_mask8(arg1: __mmask8) -> __mmask8;
}
extern "C" {
    pub fn _knot_mask16(arg1: __mmask16) -> __mmask16;
}
extern "C" {
    pub fn _knot_mask32(arg1: __mmask32) -> __mmask32;
}
extern "C" {
    pub fn _knot_mask64(arg1: __mmask64) -> __mmask64;
}
extern "C" {
    pub fn _kor_mask8(arg1: __mmask8, arg2: __mmask8) -> __mmask8;
}
extern "C" {
    pub fn _kor_mask16(arg1: __mmask16, arg2: __mmask16) -> __mmask16;
}
extern "C" {
    pub fn _kor_mask32(arg1: __mmask32, arg2: __mmask32) -> __mmask32;
}
extern "C" {
    pub fn _kor_mask64(arg1: __mmask64, arg2: __mmask64) -> __mmask64;
}
extern "C" {
    pub fn _kxnor_mask8(arg1: __mmask8, arg2: __mmask8) -> __mmask8;
}
extern "C" {
    pub fn _kxnor_mask16(arg1: __mmask16, arg2: __mmask16) -> __mmask16;
}
extern "C" {
    pub fn _kxnor_mask32(arg1: __mmask32, arg2: __mmask32) -> __mmask32;
}
extern "C" {
    pub fn _kxnor_mask64(arg1: __mmask64, arg2: __mmask64) -> __mmask64;
}
extern "C" {
    pub fn _kxor_mask8(arg1: __mmask8, arg2: __mmask8) -> __mmask8;
}
extern "C" {
    pub fn _kxor_mask16(arg1: __mmask16, arg2: __mmask16) -> __mmask16;
}
extern "C" {
    pub fn _kxor_mask32(arg1: __mmask32, arg2: __mmask32) -> __mmask32;
}
extern "C" {
    pub fn _kxor_mask64(arg1: __mmask64, arg2: __mmask64) -> __mmask64;
}
extern "C" {
    pub fn _kshiftli_mask8(arg1: __mmask8, arg2: ::std::os::raw::c_uint) -> __mmask8;
}
extern "C" {
    pub fn _kshiftli_mask16(arg1: __mmask16, arg2: ::std::os::raw::c_uint) -> __mmask16;
}
extern "C" {
    pub fn _kshiftli_mask32(arg1: __mmask32, arg2: ::std::os::raw::c_uint) -> __mmask32;
}
extern "C" {
    pub fn _kshiftli_mask64(arg1: __mmask64, arg2: ::std::os::raw::c_uint) -> __mmask64;
}
extern "C" {
    pub fn _kshiftri_mask8(arg1: __mmask8, arg2: ::std::os::raw::c_uint) -> __mmask8;
}
extern "C" {
    pub fn _kshiftri_mask16(arg1: __mmask16, arg2: ::std::os::raw::c_uint) -> __mmask16;
}
extern "C" {
    pub fn _kshiftri_mask32(arg1: __mmask32, arg2: ::std::os::raw::c_uint) -> __mmask32;
}
extern "C" {
    pub fn _kshiftri_mask64(arg1: __mmask64, arg2: ::std::os::raw::c_uint) -> __mmask64;
}
extern "C" {
    pub fn _load_mask8(arg1: *mut __mmask8) -> __mmask8;
}
extern "C" {
    pub fn _load_mask16(arg1: *mut __mmask16) -> __mmask16;
}
extern "C" {
    pub fn _load_mask32(arg1: *mut __mmask32) -> __mmask32;
}
extern "C" {
    pub fn _load_mask64(arg1: *mut __mmask64) -> __mmask64;
}
extern "C" {
    pub fn _store_mask8(arg1: *mut __mmask8, arg2: __mmask8);
}
extern "C" {
    pub fn _store_mask16(arg1: *mut __mmask16, arg2: __mmask16);
}
extern "C" {
    pub fn _store_mask32(arg1: *mut __mmask32, arg2: __mmask32);
}
extern "C" {
    pub fn _store_mask64(arg1: *mut __mmask64, arg2: __mmask64);
}
extern "C" {
    pub fn _cvtmask8_u32(arg1: __mmask8) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _cvtmask16_u32(arg1: __mmask16) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _cvtmask32_u32(arg1: __mmask32) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _cvtmask64_u64(arg1: __mmask64) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _cvtu32_mask8(arg1: ::std::os::raw::c_uint) -> __mmask8;
}
extern "C" {
    pub fn _cvtu32_mask16(arg1: ::std::os::raw::c_uint) -> __mmask16;
}
extern "C" {
    pub fn _cvtu32_mask32(arg1: ::std::os::raw::c_uint) -> __mmask32;
}
extern "C" {
    pub fn _cvtu64_mask64(arg1: ::std::os::raw::c_ulonglong) -> __mmask64;
}
extern "C" {
    pub fn _mm512_kmov(arg1: __mmask16) -> __mmask16;
}
extern "C" {
    pub fn _kortest_mask8_u8(
        arg1: __mmask8,
        arg2: __mmask8,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _kortest_mask16_u8(
        arg1: __mmask16,
        arg2: __mmask16,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _kortest_mask32_u8(
        arg1: __mmask32,
        arg2: __mmask32,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _kortest_mask64_u8(
        arg1: __mmask64,
        arg2: __mmask64,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _ktest_mask8_u8(
        arg1: __mmask8,
        arg2: __mmask8,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _ktest_mask16_u8(
        arg1: __mmask16,
        arg2: __mmask16,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _ktest_mask32_u8(
        arg1: __mmask32,
        arg2: __mmask32,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _ktest_mask64_u8(
        arg1: __mmask64,
        arg2: __mmask64,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _mm512_mask_exp2a23_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_exp2a23_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_exp2a23_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_exp2a23_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_rcp28_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_rcp28_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_rcp28_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_rcp28_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_rsqrt28_round_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_rsqrt28_round_ps(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_rsqrt28_round_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_rsqrt28_round_pd(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_prefetch_i32gather_pd(
        vindex: __m256i,
        base_addr: *const ::std::os::raw::c_void,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_prefetch_i32gather_ps(
        index: __m512i,
        mv: *const ::std::os::raw::c_void,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_prefetch_i32scatter_pd(
        base_addr: *mut ::std::os::raw::c_void,
        vindex: __m256i,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_prefetch_i32scatter_ps(
        mv: *mut ::std::os::raw::c_void,
        index: __m512i,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_prefetch_i64gather_pd(
        vindex: __m512i,
        base_addr: *const ::std::os::raw::c_void,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_prefetch_i64gather_ps(
        vindex: __m512i,
        base_addr: *const ::std::os::raw::c_void,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_prefetch_i64scatter_pd(
        base_addr: *mut ::std::os::raw::c_void,
        vindex: __m512i,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_prefetch_i64scatter_ps(
        base_addr: *mut ::std::os::raw::c_void,
        vindex: __m512i,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_prefetch_i32gather_pd(
        vindex: __m256i,
        mask: __mmask8,
        base_addr: *const ::std::os::raw::c_void,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_prefetch_i32gather_ps(
        vindex: __m512i,
        mask: __mmask16,
        base_addr: *const ::std::os::raw::c_void,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_prefetch_i32scatter_pd(
        base_addr: *mut ::std::os::raw::c_void,
        mask: __mmask8,
        vinde: __m256i,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_prefetch_i32scatter_ps(
        mv: *mut ::std::os::raw::c_void,
        k: __mmask16,
        index: __m512i,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_prefetch_i64gather_pd(
        vindex: __m512i,
        mask: __mmask8,
        base_addr: *const ::std::os::raw::c_void,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_prefetch_i64gather_ps(
        vindex: __m512i,
        mask: __mmask8,
        base_addr: *const ::std::os::raw::c_void,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_prefetch_i64scatter_pd(
        base_addr: *mut ::std::os::raw::c_void,
        mask: __mmask8,
        vindex: __m512i,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm512_mask_prefetch_i64scatter_ps(
        base_addr: *mut ::std::os::raw::c_void,
        mask: __mmask8,
        vindex: __m512i,
        scale: ::std::os::raw::c_int,
        hint: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _mm_2intersect_epi32(
        arg1: __m128i,
        arg2: __m128i,
        arg3: *mut __mmask8,
        arg4: *mut __mmask8,
    );
}
extern "C" {
    pub fn _mm256_2intersect_epi32(
        arg1: __m256i,
        arg2: __m256i,
        arg3: *mut __mmask8,
        arg4: *mut __mmask8,
    );
}
extern "C" {
    pub fn _mm512_2intersect_epi32(
        arg1: __m512i,
        arg2: __m512i,
        arg3: *mut __mmask16,
        arg4: *mut __mmask16,
    );
}
extern "C" {
    pub fn _mm_2intersect_epi64(
        arg1: __m128i,
        arg2: __m128i,
        arg3: *mut __mmask8,
        arg4: *mut __mmask8,
    );
}
extern "C" {
    pub fn _mm256_2intersect_epi64(
        arg1: __m256i,
        arg2: __m256i,
        arg3: *mut __mmask8,
        arg4: *mut __mmask8,
    );
}
extern "C" {
    pub fn _mm512_2intersect_epi64(
        arg1: __m512i,
        arg2: __m512i,
        arg3: *mut __mmask8,
        arg4: *mut __mmask8,
    );
}
pub type __tile = ::std::os::raw::c_int;
extern "C" {
    pub fn _tile_loadconfig(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _tile_storeconfig(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _tile_release();
}
extern "C" {
    pub fn _tile_loadd(
        dst: __tile,
        base: *const ::std::os::raw::c_void,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _tile_stream_loadd(
        dst: __tile,
        base: *const ::std::os::raw::c_void,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _tile_stored(
        src: __tile,
        base: *mut ::std::os::raw::c_void,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _tile_zero(dst: __tile);
}
extern "C" {
    pub fn _tile_dpbf16ps(dst: __tile, src1: __tile, src2: __tile);
}
extern "C" {
    pub fn _tile_dpfp16ps(dst: __tile, src1: __tile, src2: __tile);
}
extern "C" {
    pub fn _tile_dpbssd(dst: __tile, src1: __tile, src2: __tile);
}
extern "C" {
    pub fn _tile_dpbsud(dst: __tile, src1: __tile, src2: __tile);
}
extern "C" {
    pub fn _tile_dpbusd(dst: __tile, src1: __tile, src2: __tile);
}
extern "C" {
    pub fn _tile_dpbuud(dst: __tile, src1: __tile, src2: __tile);
}
pub type __m128h = __m128i;
pub type __m256h = __m256i;
pub type __m512h = __m512i;
extern "C" {
    pub fn _mm_add_ph(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_add_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_add_ph(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_add_ph(arg1: __m256h, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_add_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_add_ph(arg1: __mmask16, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_add_ph(arg1: __m512h, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_add_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_add_ph(arg1: __mmask32, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_add_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_add_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_add_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_add_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_add_sh(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_add_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_add_round_sh(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_add_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_add_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_cmp_ph_mask(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_ph_mask(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_cmp_ph_mask(
        arg1: __m256h,
        arg2: __m256h,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_cmp_ph_mask(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: __m256h,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_cmp_ph_mask(
        arg1: __m512h,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmp_ph_mask(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm512_cmp_round_ph_mask(
        arg1: __m512h,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_cmp_round_ph_mask(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm_cmp_sh_mask(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_sh_mask(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_cmp_round_sh_mask(
        arg1: __m128h,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_cmp_round_sh_mask(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_comi_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_comi_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvtepi32_ph(arg1: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_cvtepi32_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_cvtepi32_ph(arg1: __mmask8, arg2: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm256_cvtepi32_ph(arg1: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm256_mask_cvtepi32_ph(arg1: __m128h, arg2: __mmask8, arg3: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi32_ph(arg1: __mmask8, arg2: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm512_cvtepi32_ph(arg1: __m512i) -> __m256h;
}
extern "C" {
    pub fn _mm512_mask_cvtepi32_ph(arg1: __m256h, arg2: __mmask16, arg3: __m512i) -> __m256h;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi32_ph(arg1: __mmask16, arg2: __m512i) -> __m256h;
}
extern "C" {
    pub fn _mm512_cvt_roundepi32_ph(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m256h;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepi32_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepi32_ph(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm_cvtpd_ph(arg1: __m128d) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_cvtpd_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128d) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_cvtpd_ph(arg1: __mmask8, arg2: __m128d) -> __m128h;
}
extern "C" {
    pub fn _mm256_cvtpd_ph(arg1: __m256d) -> __m128h;
}
extern "C" {
    pub fn _mm256_mask_cvtpd_ph(arg1: __m128h, arg2: __mmask8, arg3: __m256d) -> __m128h;
}
extern "C" {
    pub fn _mm256_maskz_cvtpd_ph(arg1: __mmask8, arg2: __m256d) -> __m128h;
}
extern "C" {
    pub fn _mm512_cvtpd_ph(arg1: __m512d) -> __m128h;
}
extern "C" {
    pub fn _mm512_mask_cvtpd_ph(arg1: __m128h, arg2: __mmask8, arg3: __m512d) -> __m128h;
}
extern "C" {
    pub fn _mm512_maskz_cvtpd_ph(arg1: __mmask8, arg2: __m512d) -> __m128h;
}
extern "C" {
    pub fn _mm512_cvt_roundpd_ph(arg1: __m512d, arg2: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundpd_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m512d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundpd_ph(
        arg1: __mmask8,
        arg2: __m512d,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_cvtph_epi32(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtph_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtph_epi32(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtph_epi32(arg1: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvtph_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtph_epi32(arg1: __mmask8, arg2: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvtph_epi32(arg1: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtph_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtph_epi32(arg1: __mmask16, arg2: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundph_epi32(arg1: __m256h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundph_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundph_epi32(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvtph_pd(arg1: __m128h) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_cvtph_pd(arg1: __m128d, arg2: __mmask8, arg3: __m128h) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_cvtph_pd(arg1: __mmask8, arg2: __m128h) -> __m128d;
}
extern "C" {
    pub fn _mm256_cvtph_pd(arg1: __m128h) -> __m256d;
}
extern "C" {
    pub fn _mm256_mask_cvtph_pd(arg1: __m256d, arg2: __mmask8, arg3: __m128h) -> __m256d;
}
extern "C" {
    pub fn _mm256_maskz_cvtph_pd(arg1: __mmask8, arg2: __m128h) -> __m256d;
}
extern "C" {
    pub fn _mm512_cvtph_pd(arg1: __m128h) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvtph_pd(arg1: __m512d, arg2: __mmask8, arg3: __m128h) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_cvtph_pd(arg1: __mmask8, arg2: __m128h) -> __m512d;
}
extern "C" {
    pub fn _mm512_cvt_roundph_pd(arg1: __m128h, arg2: ::std::os::raw::c_int) -> __m512d;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundph_pd(
        arg1: __m512d,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundph_pd(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512d;
}
extern "C" {
    pub fn _mm_cvtxph_ps(arg1: __m128h) -> __m128;
}
extern "C" {
    pub fn _mm_mask_cvtxph_ps(arg1: __m128, arg2: __mmask8, arg3: __m128h) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvtxph_ps(arg1: __mmask8, arg2: __m128h) -> __m128;
}
extern "C" {
    pub fn _mm256_cvtxph_ps(arg1: __m128h) -> __m256;
}
extern "C" {
    pub fn _mm256_mask_cvtxph_ps(arg1: __m256, arg2: __mmask8, arg3: __m128h) -> __m256;
}
extern "C" {
    pub fn _mm256_maskz_cvtxph_ps(arg1: __mmask8, arg2: __m128h) -> __m256;
}
extern "C" {
    pub fn _mm512_cvtxph_ps(arg1: __m256h) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cvtxph_ps(arg1: __m512, arg2: __mmask16, arg3: __m256h) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_cvtxph_ps(arg1: __mmask16, arg2: __m256h) -> __m512;
}
extern "C" {
    pub fn _mm512_cvtx_roundph_ps(arg1: __m256h, arg2: ::std::os::raw::c_int) -> __m512;
}
extern "C" {
    pub fn _mm512_mask_cvtx_roundph_ps(
        arg1: __m512,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm512_maskz_cvtx_roundph_ps(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512;
}
extern "C" {
    pub fn _mm_cvtph_epi64(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtph_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtph_epi64(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtph_epi64(arg1: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvtph_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtph_epi64(arg1: __mmask8, arg2: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvtph_epi64(arg1: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtph_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtph_epi64(arg1: __mmask8, arg2: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundph_epi64(arg1: __m128h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundph_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundph_epi64(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvtph_epu32(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtph_epu32(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtph_epu32(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtph_epu32(arg1: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvtph_epu32(arg1: __m256i, arg2: __mmask8, arg3: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtph_epu32(arg1: __mmask8, arg2: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvtph_epu32(arg1: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtph_epu32(arg1: __m512i, arg2: __mmask16, arg3: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtph_epu32(arg1: __mmask16, arg2: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundph_epu32(arg1: __m256h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundph_epu32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundph_epu32(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvtph_epu64(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtph_epu64(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtph_epu64(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtph_epu64(arg1: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvtph_epu64(arg1: __m256i, arg2: __mmask8, arg3: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtph_epu64(arg1: __mmask8, arg2: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvtph_epu64(arg1: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtph_epu64(arg1: __m512i, arg2: __mmask8, arg3: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtph_epu64(arg1: __mmask8, arg2: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundph_epu64(arg1: __m128h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundph_epu64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundph_epu64(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvtph_epu16(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtph_epu16(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtph_epu16(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtph_epu16(arg1: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvtph_epu16(arg1: __m256i, arg2: __mmask16, arg3: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtph_epu16(arg1: __mmask16, arg2: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvtph_epu16(arg1: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtph_epu16(arg1: __m512i, arg2: __mmask32, arg3: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtph_epu16(arg1: __mmask32, arg2: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundph_epu16(arg1: __m512h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundph_epu16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundph_epu16(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvtph_epi16(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvtph_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvtph_epi16(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvtph_epi16(arg1: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvtph_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvtph_epi16(arg1: __mmask16, arg2: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvtph_epi16(arg1: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtph_epi16(arg1: __m512i, arg2: __mmask32, arg3: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtph_epi16(arg1: __mmask32, arg2: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvt_roundph_epi16(arg1: __m512h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundph_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundph_epi16(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvtxps_ph(arg1: __m128) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_cvtxps_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_cvtxps_ph(arg1: __mmask8, arg2: __m128) -> __m128h;
}
extern "C" {
    pub fn _mm256_cvtxps_ph(arg1: __m256) -> __m128h;
}
extern "C" {
    pub fn _mm256_mask_cvtxps_ph(arg1: __m128h, arg2: __mmask8, arg3: __m256) -> __m128h;
}
extern "C" {
    pub fn _mm256_maskz_cvtxps_ph(arg1: __mmask8, arg2: __m256) -> __m128h;
}
extern "C" {
    pub fn _mm512_cvtxps_ph(arg1: __m512) -> __m256h;
}
extern "C" {
    pub fn _mm512_mask_cvtxps_ph(arg1: __m256h, arg2: __mmask16, arg3: __m512) -> __m256h;
}
extern "C" {
    pub fn _mm512_maskz_cvtxps_ph(arg1: __mmask16, arg2: __m512) -> __m256h;
}
extern "C" {
    pub fn _mm512_cvtx_roundps_ph(arg1: __m512, arg2: ::std::os::raw::c_int) -> __m256h;
}
extern "C" {
    pub fn _mm512_mask_cvtx_roundps_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m512,
        arg4: ::std::os::raw::c_int,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_maskz_cvtx_roundps_ph(
        arg1: __mmask16,
        arg2: __m512,
        arg3: ::std::os::raw::c_int,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm_cvtepi64_ph(arg1: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_cvtepi64_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_cvtepi64_ph(arg1: __mmask8, arg2: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm256_cvtepi64_ph(arg1: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm256_mask_cvtepi64_ph(arg1: __m128h, arg2: __mmask8, arg3: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi64_ph(arg1: __mmask8, arg2: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm512_cvtepi64_ph(arg1: __m512i) -> __m128h;
}
extern "C" {
    pub fn _mm512_mask_cvtepi64_ph(arg1: __m128h, arg2: __mmask8, arg3: __m512i) -> __m128h;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi64_ph(arg1: __mmask8, arg2: __m512i) -> __m128h;
}
extern "C" {
    pub fn _mm512_cvt_roundepi64_ph(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepi64_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepi64_ph(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_cvtsd_sh(arg1: __m128h, arg2: __m128d) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_cvtsd_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128d,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_cvtsd_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128d) -> __m128h;
}
extern "C" {
    pub fn _mm_cvt_roundsd_sh(arg1: __m128h, arg2: __m128d, arg3: ::std::os::raw::c_int)
        -> __m128h;
}
extern "C" {
    pub fn _mm_mask_cvt_roundsd_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128d,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_cvt_roundsd_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128d,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_cvtsh_sd(arg1: __m128d, arg2: __m128h) -> __m128d;
}
extern "C" {
    pub fn _mm_mask_cvtsh_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128h,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_cvtsh_sd(arg1: __mmask8, arg2: __m128d, arg3: __m128h) -> __m128d;
}
extern "C" {
    pub fn _mm_cvt_roundsh_sd(arg1: __m128d, arg2: __m128h, arg3: ::std::os::raw::c_int)
        -> __m128d;
}
extern "C" {
    pub fn _mm_mask_cvt_roundsh_sd(
        arg1: __m128d,
        arg2: __mmask8,
        arg3: __m128d,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_maskz_cvt_roundsh_sd(
        arg1: __mmask8,
        arg2: __m128d,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm_cvtsh_i32(arg1: __m128h) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvtsh_i64(arg1: __m128h) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvt_roundsh_i32(arg1: __m128h, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvt_roundsh_i64(
        arg1: __m128h,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtsh_ss(arg1: __m128, arg2: __m128h) -> __m128;
}
extern "C" {
    pub fn _mm_mask_cvtsh_ss(arg1: __m128, arg2: __mmask8, arg3: __m128, arg4: __m128h) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvtsh_ss(arg1: __mmask8, arg2: __m128, arg3: __m128h) -> __m128;
}
extern "C" {
    pub fn _mm_cvt_roundsh_ss(arg1: __m128, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __m128;
}
extern "C" {
    pub fn _mm_mask_cvt_roundsh_ss(
        arg1: __m128,
        arg2: __mmask8,
        arg3: __m128,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_maskz_cvt_roundsh_ss(
        arg1: __mmask8,
        arg2: __m128,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_cvtsh_u32(arg1: __m128h) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvtsh_u64(arg1: __m128h) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvt_roundsh_u32(
        arg1: __m128h,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvt_roundsh_u64(
        arg1: __m128h,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvti32_sh(arg1: __m128h, arg2: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_cvti64_sh(arg1: __m128h, arg2: ::std::os::raw::c_longlong) -> __m128h;
}
extern "C" {
    pub fn _mm_cvt_roundi32_sh(
        arg1: __m128h,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_cvt_roundi64_sh(
        arg1: __m128h,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_cvtss_sh(arg1: __m128h, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_cvtss_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_cvtss_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_cvt_roundss_sh(arg1: __m128h, arg2: __m128, arg3: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_cvt_roundss_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_cvt_roundss_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_cvttph_epi32(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttph_epi32(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttph_epi32(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttph_epi32(arg1: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvttph_epi32(arg1: __m256i, arg2: __mmask8, arg3: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttph_epi32(arg1: __mmask8, arg2: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvttph_epi32(arg1: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttph_epi32(arg1: __m512i, arg2: __mmask16, arg3: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttph_epi32(arg1: __mmask16, arg2: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundph_epi32(arg1: __m256h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundph_epi32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundph_epi32(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvttph_epi64(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttph_epi64(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttph_epi64(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttph_epi64(arg1: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvttph_epi64(arg1: __m256i, arg2: __mmask8, arg3: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttph_epi64(arg1: __mmask8, arg2: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvttph_epi64(arg1: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttph_epi64(arg1: __m512i, arg2: __mmask8, arg3: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttph_epi64(arg1: __mmask8, arg2: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundph_epi64(arg1: __m128h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundph_epi64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundph_epi64(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvttph_epu32(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttph_epu32(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttph_epu32(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttph_epu32(arg1: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvttph_epu32(arg1: __m256i, arg2: __mmask8, arg3: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttph_epu32(arg1: __mmask8, arg2: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvttph_epu32(arg1: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttph_epu32(arg1: __m512i, arg2: __mmask16, arg3: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttph_epu32(arg1: __mmask16, arg2: __m256h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundph_epu32(arg1: __m256h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundph_epu32(
        arg1: __m512i,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundph_epu32(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvttph_epu64(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttph_epu64(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttph_epu64(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttph_epu64(arg1: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvttph_epu64(arg1: __m256i, arg2: __mmask8, arg3: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttph_epu64(arg1: __mmask8, arg2: __m128h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvttph_epu64(arg1: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttph_epu64(arg1: __m512i, arg2: __mmask8, arg3: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttph_epu64(arg1: __mmask8, arg2: __m128h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundph_epu64(arg1: __m128h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundph_epu64(
        arg1: __m512i,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundph_epu64(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvttph_epu16(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttph_epu16(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttph_epu16(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttph_epu16(arg1: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvttph_epu16(arg1: __m256i, arg2: __mmask16, arg3: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttph_epu16(arg1: __mmask16, arg2: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvttph_epu16(arg1: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttph_epu16(arg1: __m512i, arg2: __mmask32, arg3: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttph_epu16(arg1: __mmask32, arg2: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundph_epu16(arg1: __m512h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundph_epu16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundph_epu16(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvttph_epi16(arg1: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_mask_cvttph_epi16(arg1: __m128i, arg2: __mmask8, arg3: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm_maskz_cvttph_epi16(arg1: __mmask8, arg2: __m128h) -> __m128i;
}
extern "C" {
    pub fn _mm256_cvttph_epi16(arg1: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm256_mask_cvttph_epi16(arg1: __m256i, arg2: __mmask16, arg3: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm256_maskz_cvttph_epi16(arg1: __mmask16, arg2: __m256h) -> __m256i;
}
extern "C" {
    pub fn _mm512_cvttph_epi16(arg1: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvttph_epi16(arg1: __m512i, arg2: __mmask32, arg3: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvttph_epi16(arg1: __mmask32, arg2: __m512h) -> __m512i;
}
extern "C" {
    pub fn _mm512_cvtt_roundph_epi16(arg1: __m512h, arg2: ::std::os::raw::c_int) -> __m512i;
}
extern "C" {
    pub fn _mm512_mask_cvtt_roundph_epi16(
        arg1: __m512i,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm512_maskz_cvtt_roundph_epi16(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512i;
}
extern "C" {
    pub fn _mm_cvttsh_i32(arg1: __m128h) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvttsh_i64(arg1: __m128h) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtt_roundsh_i32(
        arg1: __m128h,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_cvtt_roundsh_i64(
        arg1: __m128h,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvttsh_u32(arg1: __m128h) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvttsh_u64(arg1: __m128h) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvtt_roundsh_u32(
        arg1: __m128h,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_cvtt_roundsh_u64(
        arg1: __m128h,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_cvtepu32_ph(arg1: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_cvtepu32_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_cvtepu32_ph(arg1: __mmask8, arg2: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm256_cvtepu32_ph(arg1: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm256_mask_cvtepu32_ph(arg1: __m128h, arg2: __mmask8, arg3: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu32_ph(arg1: __mmask8, arg2: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm512_cvtepu32_ph(arg1: __m512i) -> __m256h;
}
extern "C" {
    pub fn _mm512_mask_cvtepu32_ph(arg1: __m256h, arg2: __mmask16, arg3: __m512i) -> __m256h;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu32_ph(arg1: __mmask16, arg2: __m512i) -> __m256h;
}
extern "C" {
    pub fn _mm512_cvt_roundepu32_ph(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m256h;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepu32_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepu32_ph(
        arg1: __mmask16,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm_cvtepu64_ph(arg1: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_cvtepu64_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_cvtepu64_ph(arg1: __mmask8, arg2: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm256_cvtepu64_ph(arg1: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm256_mask_cvtepu64_ph(arg1: __m128h, arg2: __mmask8, arg3: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu64_ph(arg1: __mmask8, arg2: __m256i) -> __m128h;
}
extern "C" {
    pub fn _mm512_cvtepu64_ph(arg1: __m512i) -> __m128h;
}
extern "C" {
    pub fn _mm512_mask_cvtepu64_ph(arg1: __m128h, arg2: __mmask8, arg3: __m512i) -> __m128h;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu64_ph(arg1: __mmask8, arg2: __m512i) -> __m128h;
}
extern "C" {
    pub fn _mm512_cvt_roundepu64_ph(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepu64_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepu64_ph(
        arg1: __mmask8,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_cvtu32_sh(arg1: __m128h, arg2: ::std::os::raw::c_uint) -> __m128h;
}
extern "C" {
    pub fn _mm_cvtu64_sh(arg1: __m128h, arg2: ::std::os::raw::c_ulonglong) -> __m128h;
}
extern "C" {
    pub fn _mm_cvt_roundu32_sh(
        arg1: __m128h,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_cvt_roundu64_sh(
        arg1: __m128h,
        arg2: ::std::os::raw::c_ulonglong,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_cvtepu16_ph(arg1: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_cvtepu16_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_cvtepu16_ph(arg1: __mmask8, arg2: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm256_cvtepu16_ph(arg1: __m256i) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_cvtepu16_ph(arg1: __m256h, arg2: __mmask16, arg3: __m256i) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_cvtepu16_ph(arg1: __mmask16, arg2: __m256i) -> __m256h;
}
extern "C" {
    pub fn _mm512_cvtepu16_ph(arg1: __m512i) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_cvtepu16_ph(arg1: __m512h, arg2: __mmask32, arg3: __m512i) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_cvtepu16_ph(arg1: __mmask32, arg2: __m512i) -> __m512h;
}
extern "C" {
    pub fn _mm512_cvt_roundepu16_ph(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepu16_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepu16_ph(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_cvtepi16_ph(arg1: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_cvtepi16_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_cvtepi16_ph(arg1: __mmask8, arg2: __m128i) -> __m128h;
}
extern "C" {
    pub fn _mm256_cvtepi16_ph(arg1: __m256i) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_cvtepi16_ph(arg1: __m256h, arg2: __mmask16, arg3: __m256i) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_cvtepi16_ph(arg1: __mmask16, arg2: __m256i) -> __m256h;
}
extern "C" {
    pub fn _mm512_cvtepi16_ph(arg1: __m512i) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_cvtepi16_ph(arg1: __m512h, arg2: __mmask32, arg3: __m512i) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_cvtepi16_ph(arg1: __mmask32, arg2: __m512i) -> __m512h;
}
extern "C" {
    pub fn _mm512_cvt_roundepi16_ph(arg1: __m512i, arg2: ::std::os::raw::c_int) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_cvt_roundepi16_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512i,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_cvt_roundepi16_ph(
        arg1: __mmask32,
        arg2: __m512i,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_div_ph(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_div_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_div_ph(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_div_ph(arg1: __m256h, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_div_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_div_ph(arg1: __mmask16, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_div_ph(arg1: __m512h, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_div_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_div_ph(arg1: __mmask32, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_div_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_div_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_div_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_div_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_div_sh(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_div_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_div_round_sh(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_div_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_div_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fmaddsub_ph(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmaddsub_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fmaddsub_ph(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmaddsub_ph(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm256_fmaddsub_ph(arg1: __m256h, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_fmaddsub_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask3_fmaddsub_ph(
        arg1: __m256h,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __mmask16,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_fmaddsub_ph(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_fmaddsub_ph(arg1: __m512h, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmaddsub_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fmaddsub_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmaddsub_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_fmaddsub_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmaddsub_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fmaddsub_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmaddsub_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_fmsubadd_ph(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmsubadd_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fmsubadd_ph(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmsubadd_ph(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm256_fmsubadd_ph(arg1: __m256h, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_fmsubadd_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask3_fmsubadd_ph(
        arg1: __m256h,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __mmask16,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_fmsubadd_ph(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_fmsubadd_ph(arg1: __m512h, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmsubadd_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fmsubadd_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmsubadd_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_fmsubadd_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmsubadd_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fmsubadd_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmsubadd_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_fpclass_ph_mask(arg1: __m128h, arg2: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_fpclass_ph_mask(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm256_fpclass_ph_mask(arg1: __m256h, arg2: ::std::os::raw::c_int) -> __mmask16;
}
extern "C" {
    pub fn _mm256_mask_fpclass_ph_mask(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask16;
}
extern "C" {
    pub fn _mm512_fpclass_ph_mask(arg1: __m512h, arg2: ::std::os::raw::c_int) -> __mmask32;
}
extern "C" {
    pub fn _mm512_mask_fpclass_ph_mask(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask32;
}
extern "C" {
    pub fn _mm_fpclass_sh_mask(arg1: __m128h, arg2: ::std::os::raw::c_int) -> __mmask8;
}
extern "C" {
    pub fn _mm_mask_fpclass_sh_mask(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __mmask8;
}
extern "C" {
    pub fn _mm_fmadd_pch(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmadd_pch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fmadd_pch(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmadd_pch(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm256_fmadd_pch(arg1: __m256h, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_fmadd_pch(
        arg1: __m256h,
        arg2: __mmask8,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask3_fmadd_pch(
        arg1: __m256h,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __mmask8,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_fmadd_pch(
        arg1: __mmask8,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_fmadd_pch(arg1: __m512h, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmadd_pch(
        arg1: __m512h,
        arg2: __mmask16,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fmadd_pch(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask16,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmadd_pch(
        arg1: __mmask16,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_fmadd_round_pch(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmadd_round_pch(
        arg1: __m512h,
        arg2: __mmask16,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fmadd_round_pch(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask16,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmadd_round_pch(
        arg1: __mmask16,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_fcmadd_pch(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fcmadd_pch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fcmadd_pch(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fcmadd_pch(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm256_fcmadd_pch(arg1: __m256h, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_fcmadd_pch(
        arg1: __m256h,
        arg2: __mmask8,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask3_fcmadd_pch(
        arg1: __m256h,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __mmask8,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_fcmadd_pch(
        arg1: __mmask8,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_fcmadd_pch(arg1: __m512h, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fcmadd_pch(
        arg1: __m512h,
        arg2: __mmask16,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fcmadd_pch(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask16,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fcmadd_pch(
        arg1: __mmask16,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_fcmadd_round_pch(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fcmadd_round_pch(
        arg1: __m512h,
        arg2: __mmask16,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fcmadd_round_pch(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask16,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fcmadd_round_pch(
        arg1: __mmask16,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_fcmadd_sch(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fcmadd_sch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fcmadd_sch(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fcmadd_sch(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fcmadd_round_sch(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fcmadd_round_sch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fcmadd_round_sch(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fcmadd_round_sch(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fmadd_sch(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmadd_sch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fmadd_sch(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmadd_sch(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fmadd_round_sch(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmadd_round_sch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fmadd_round_sch(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmadd_round_sch(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fcmul_pch(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fcmul_pch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fcmul_pch(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_fcmul_pch(arg1: __m256h, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_fcmul_pch(
        arg1: __m256h,
        arg2: __mmask8,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_fcmul_pch(arg1: __mmask8, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_fcmul_pch(arg1: __m512h, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fcmul_pch(
        arg1: __m512h,
        arg2: __mmask16,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fcmul_pch(arg1: __mmask16, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_fcmul_round_pch(
        arg1: __m512h,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fcmul_round_pch(
        arg1: __m512h,
        arg2: __mmask16,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fcmul_round_pch(
        arg1: __mmask16,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_fmul_pch(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmul_pch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmul_pch(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_fmul_pch(arg1: __m256h, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_fmul_pch(
        arg1: __m256h,
        arg2: __mmask8,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_fmul_pch(arg1: __mmask8, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_fmul_pch(arg1: __m512h, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmul_pch(
        arg1: __m512h,
        arg2: __mmask16,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmul_pch(arg1: __mmask16, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_fmul_round_pch(
        arg1: __m512h,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmul_round_pch(
        arg1: __m512h,
        arg2: __mmask16,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmul_round_pch(
        arg1: __mmask16,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_fcmul_sch(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fcmul_sch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fcmul_sch(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_fcmul_round_sch(
        arg1: __m128h,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fcmul_round_sch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fcmul_round_sch(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fmul_sch(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmul_sch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmul_sch(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_fmul_round_sch(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int)
        -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmul_round_sch(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmul_round_sch(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fnmadd_ph(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fnmadd_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fnmadd_ph(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fnmadd_ph(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm256_fnmadd_ph(arg1: __m256h, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_fnmadd_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask3_fnmadd_ph(
        arg1: __m256h,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __mmask16,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_fnmadd_ph(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_fnmadd_ph(arg1: __m512h, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fnmadd_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fnmadd_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fnmadd_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_fnmadd_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fnmadd_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fnmadd_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fnmadd_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_fmadd_ph(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmadd_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fmadd_ph(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmadd_ph(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm256_fmadd_ph(arg1: __m256h, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_fmadd_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask3_fmadd_ph(
        arg1: __m256h,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __mmask16,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_fmadd_ph(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_fmadd_ph(arg1: __m512h, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmadd_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fmadd_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmadd_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_fmadd_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmadd_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fmadd_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmadd_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_fnmadd_sh(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fnmadd_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fnmadd_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fnmadd_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fnmadd_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fnmadd_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fnmadd_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fnmadd_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fmadd_sh(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmadd_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fmadd_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmadd_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fmadd_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmadd_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fmadd_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmadd_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fnmsub_ph(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fnmsub_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fnmsub_ph(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fnmsub_ph(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm256_fnmsub_ph(arg1: __m256h, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_fnmsub_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask3_fnmsub_ph(
        arg1: __m256h,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __mmask16,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_fnmsub_ph(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_fnmsub_ph(arg1: __m512h, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fnmsub_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fnmsub_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fnmsub_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_fnmsub_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fnmsub_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fnmsub_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fnmsub_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_fmsub_ph(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmsub_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fmsub_ph(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmsub_ph(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm256_fmsub_ph(arg1: __m256h, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_fmsub_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask3_fmsub_ph(
        arg1: __m256h,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __mmask16,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_fmsub_ph(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_fmsub_ph(arg1: __m512h, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmsub_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fmsub_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmsub_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_fmsub_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_fmsub_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask3_fmsub_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __mmask32,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_fmsub_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_fnmsub_sh(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fnmsub_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fnmsub_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fnmsub_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fnmsub_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fnmsub_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fnmsub_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fnmsub_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fmsub_sh(arg1: __m128h, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmsub_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fmsub_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmsub_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_fmsub_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_fmsub_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask3_fmsub_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __mmask8,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_fmsub_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_getexp_ph(arg1: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_getexp_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_getexp_ph(arg1: __mmask8, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_getexp_ph(arg1: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_getexp_ph(arg1: __m256h, arg2: __mmask16, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_getexp_ph(arg1: __mmask16, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_getexp_ph(arg1: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_getexp_ph(arg1: __m512h, arg2: __mmask32, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_getexp_ph(arg1: __mmask32, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_getexp_round_ph(arg1: __m512h, arg2: ::std::os::raw::c_int) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_getexp_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_getexp_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_getexp_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_getexp_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_getexp_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_getexp_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_getexp_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_getexp_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_getmant_ph(
        arg1: __m128h,
        arg2: _MM_MANTISSA_NORM_ENUM,
        arg3: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_getmant_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: _MM_MANTISSA_NORM_ENUM,
        arg5: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_getmant_ph(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: _MM_MANTISSA_NORM_ENUM,
        arg4: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm256_getmant_ph(
        arg1: __m256h,
        arg2: _MM_MANTISSA_NORM_ENUM,
        arg3: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_getmant_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: _MM_MANTISSA_NORM_ENUM,
        arg5: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_getmant_ph(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: _MM_MANTISSA_NORM_ENUM,
        arg4: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_getmant_ph(
        arg1: __m512h,
        arg2: _MM_MANTISSA_NORM_ENUM,
        arg3: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_getmant_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: _MM_MANTISSA_NORM_ENUM,
        arg5: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_getmant_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: _MM_MANTISSA_NORM_ENUM,
        arg4: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_getmant_round_ph(
        arg1: __m512h,
        arg2: _MM_MANTISSA_NORM_ENUM,
        arg3: _MM_MANTISSA_SIGN_ENUM,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_getmant_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: _MM_MANTISSA_NORM_ENUM,
        arg5: _MM_MANTISSA_SIGN_ENUM,
        arg6: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_getmant_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: _MM_MANTISSA_NORM_ENUM,
        arg4: _MM_MANTISSA_SIGN_ENUM,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_getmant_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: _MM_MANTISSA_NORM_ENUM,
        arg4: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_getmant_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: _MM_MANTISSA_NORM_ENUM,
        arg6: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_getmant_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: _MM_MANTISSA_NORM_ENUM,
        arg5: _MM_MANTISSA_SIGN_ENUM,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_getmant_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: _MM_MANTISSA_NORM_ENUM,
        arg4: _MM_MANTISSA_SIGN_ENUM,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_getmant_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: _MM_MANTISSA_NORM_ENUM,
        arg6: _MM_MANTISSA_SIGN_ENUM,
        arg7: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_getmant_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: _MM_MANTISSA_NORM_ENUM,
        arg5: _MM_MANTISSA_SIGN_ENUM,
        arg6: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_max_ph(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_max_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_max_ph(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_max_ph(arg1: __m256h, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_max_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_max_ph(arg1: __mmask16, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_max_ph(arg1: __m512h, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_max_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_max_ph(arg1: __mmask32, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_max_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_max_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_max_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_max_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_max_sh(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_max_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_max_round_sh(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_max_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_max_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_min_ph(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_min_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_min_ph(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_min_ph(arg1: __m256h, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_min_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_min_ph(arg1: __mmask16, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_min_ph(arg1: __m512h, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_min_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_min_ph(arg1: __mmask32, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_min_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_min_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_min_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_min_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_min_sh(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_min_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_min_round_sh(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_min_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_min_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_load_sh(arg1: *const ::std::os::raw::c_void) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_load_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: *const ::std::os::raw::c_void,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_load_sh(arg1: __mmask8, arg2: *const ::std::os::raw::c_void) -> __m128h;
}
extern "C" {
    pub fn _mm_store_sh(arg1: *mut ::std::os::raw::c_void, arg2: __m128h);
}
extern "C" {
    pub fn _mm_mask_store_sh(arg1: *mut ::std::os::raw::c_void, arg2: __mmask8, arg3: __m128h);
}
extern "C" {
    pub fn _mm_move_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_move_sh(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h)
        -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_move_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_cvtsi16_si128(arg1: ::std::os::raw::c_short) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtsi128_si16(arg1: __m128i) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _mm_mul_ph(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_mul_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_mul_ph(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_mul_ph(arg1: __m256h, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_mul_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_mul_ph(arg1: __mmask16, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_mul_ph(arg1: __m512h, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_mul_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_mul_ph(arg1: __mmask32, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mul_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_mul_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_mul_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_mul_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_mul_sh(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_mul_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mul_round_sh(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_mul_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_mul_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_rcp_ph(arg1: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_rcp_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_rcp_ph(arg1: __mmask8, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_rcp_ph(arg1: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_rcp_ph(arg1: __m256h, arg2: __mmask16, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_rcp_ph(arg1: __mmask16, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_rcp_ph(arg1: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_rcp_ph(arg1: __m512h, arg2: __mmask32, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_rcp_ph(arg1: __mmask32, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm_rcp_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_rcp_sh(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_rcp_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_reduce_ph(arg1: __m128h, arg2: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_reduce_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_reduce_ph(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm256_reduce_ph(arg1: __m256h, arg2: ::std::os::raw::c_int) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_reduce_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: ::std::os::raw::c_int,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_reduce_ph(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: ::std::os::raw::c_int,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_reduce_ph(arg1: __m512h, arg2: ::std::os::raw::c_int) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_reduce_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_reduce_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_reduce_round_ph(
        arg1: __m512h,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_reduce_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_reduce_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_reduce_sh(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_reduce_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_reduce_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_reduce_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_reduce_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_reduce_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_roundscale_ph(arg1: __m128h, arg2: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_roundscale_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_roundscale_ph(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm256_roundscale_ph(arg1: __m256h, arg2: ::std::os::raw::c_int) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_roundscale_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: ::std::os::raw::c_int,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_roundscale_ph(
        arg1: __mmask16,
        arg2: __m256h,
        arg3: ::std::os::raw::c_int,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm512_roundscale_ph(arg1: __m512h, arg2: ::std::os::raw::c_int) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_roundscale_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_roundscale_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_roundscale_round_ph(
        arg1: __m512h,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_roundscale_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_roundscale_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_roundscale_sh(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_roundscale_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_roundscale_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_roundscale_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_roundscale_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_roundscale_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_rsqrt_ph(arg1: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_rsqrt_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_rsqrt_ph(arg1: __mmask8, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_rsqrt_ph(arg1: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_rsqrt_ph(arg1: __m256h, arg2: __mmask16, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_rsqrt_ph(arg1: __mmask16, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_rsqrt_ph(arg1: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_rsqrt_ph(arg1: __m512h, arg2: __mmask32, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_rsqrt_ph(arg1: __mmask32, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm_rsqrt_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_rsqrt_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_rsqrt_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_scalef_ph(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_scalef_ph(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_scalef_ph(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_scalef_ph(arg1: __m256h, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_scalef_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_scalef_ph(arg1: __mmask16, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_scalef_ph(arg1: __m512h, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_scalef_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_scalef_ph(arg1: __mmask32, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_scalef_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_scalef_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_scalef_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_scalef_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_scalef_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_scalef_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_scalef_round_sh(
        arg1: __m128h,
        arg2: __m128h,
        arg3: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_scalef_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_scalef_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_sqrt_ph(arg1: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_sqrt_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_sqrt_ph(arg1: __mmask8, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_sqrt_ph(arg1: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_sqrt_ph(arg1: __m256h, arg2: __mmask16, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_sqrt_ph(arg1: __mmask16, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_sqrt_ph(arg1: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_sqrt_ph(arg1: __m512h, arg2: __mmask32, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_sqrt_ph(arg1: __mmask32, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_sqrt_round_ph(arg1: __m512h, arg2: ::std::os::raw::c_int) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_sqrt_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_sqrt_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_sqrt_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_sqrt_sh(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h)
        -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_sqrt_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_sqrt_round_sh(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_sqrt_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_sqrt_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_sub_ph(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_sub_ph(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_sub_ph(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_sub_ph(arg1: __m256h, arg2: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm256_mask_sub_ph(
        arg1: __m256h,
        arg2: __mmask16,
        arg3: __m256h,
        arg4: __m256h,
    ) -> __m256h;
}
extern "C" {
    pub fn _mm256_maskz_sub_ph(arg1: __mmask16, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_sub_ph(arg1: __m512h, arg2: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_sub_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_sub_ph(arg1: __mmask32, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm512_sub_round_ph(
        arg1: __m512h,
        arg2: __m512h,
        arg3: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_mask_sub_round_ph(
        arg1: __m512h,
        arg2: __mmask32,
        arg3: __m512h,
        arg4: __m512h,
        arg5: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm512_maskz_sub_round_ph(
        arg1: __mmask32,
        arg2: __m512h,
        arg3: __m512h,
        arg4: ::std::os::raw::c_int,
    ) -> __m512h;
}
extern "C" {
    pub fn _mm_sub_sh(arg1: __m128h, arg2: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_sub_sh(arg1: __m128h, arg2: __mmask8, arg3: __m128h, arg4: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_sub_sh(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm_sub_round_sh(arg1: __m128h, arg2: __m128h, arg3: ::std::os::raw::c_int) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_sub_round_sh(
        arg1: __m128h,
        arg2: __mmask8,
        arg3: __m128h,
        arg4: __m128h,
        arg5: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_maskz_sub_round_sh(
        arg1: __mmask8,
        arg2: __m128h,
        arg3: __m128h,
        arg4: ::std::os::raw::c_int,
    ) -> __m128h;
}
extern "C" {
    pub fn _mm_mask_blend_ph(arg1: __mmask8, arg2: __m128h, arg3: __m128h) -> __m128h;
}
extern "C" {
    pub fn _mm256_mask_blend_ph(arg1: __mmask16, arg2: __m256h, arg3: __m256h) -> __m256h;
}
extern "C" {
    pub fn _mm512_mask_blend_ph(arg1: __mmask32, arg2: __m512h, arg3: __m512h) -> __m512h;
}
extern "C" {
    pub fn _mm_macc_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_macc_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_macc_ss(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_macc_sd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maddsub_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_maddsub_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_msubadd_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_msubadd_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_msub_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_msub_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_msub_ss(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_msub_sd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_nmacc_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_nmacc_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_nmacc_ss(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_nmacc_sd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_nmsub_ps(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_nmsub_pd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_nmsub_ss(arg1: __m128, arg2: __m128, arg3: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_nmsub_sd(arg1: __m128d, arg2: __m128d, arg3: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_maccs_epi16(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_macc_epi16(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maccsd_epi16(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maccd_epi16(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maccs_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_macc_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maccslo_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_macclo_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maccshi_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_macchi_epi32(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maddsd_epi16(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_maddd_epi16(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddw_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddd_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddq_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddd_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddq_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddq_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddw_epu8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddd_epu8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddq_epu8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddd_epu16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddq_epu16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_haddq_epu32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_hsubw_epi8(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_hsubd_epi16(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_hsubq_epi32(arg1: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_cmov_si128(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_perm_epi8(arg1: __m128i, arg2: __m128i, arg3: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rot_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rot_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rot_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_rot_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_roti_epi8(arg1: __m128i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_roti_epi16(arg1: __m128i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_roti_epi32(arg1: __m128i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_roti_epi64(arg1: __m128i, arg2: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_shl_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_shl_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_shl_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_shl_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sha_epi8(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sha_epi16(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sha_epi32(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_sha_epi64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_com_epu8(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_com_epu16(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_com_epu32(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_com_epu64(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_com_epi8(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_com_epi16(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_com_epi32(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_com_epi64(arg1: __m128i, arg2: __m128i, arg3: ::std::os::raw::c_int) -> __m128i;
}
extern "C" {
    pub fn _mm_frcz_ps(arg1: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_frcz_pd(arg1: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_frcz_ss(arg1: __m128, arg2: __m128) -> __m128;
}
extern "C" {
    pub fn _mm_frcz_sd(arg1: __m128d, arg2: __m128d) -> __m128d;
}
extern "C" {
    pub fn _mm_permute2_ps(
        arg1: __m128,
        arg2: __m128,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128;
}
extern "C" {
    pub fn _mm_permute2_pd(
        arg1: __m128d,
        arg2: __m128d,
        arg3: __m128i,
        arg4: ::std::os::raw::c_int,
    ) -> __m128d;
}
extern "C" {
    pub fn _mm256_macc_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_macc_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_maddsub_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_maddsub_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_msubadd_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_msubadd_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_msub_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_msub_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_nmacc_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_nmacc_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_nmsub_ps(arg1: __m256, arg2: __m256, arg3: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_nmsub_pd(arg1: __m256d, arg2: __m256d, arg3: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_cmov_si256(arg1: __m256i, arg2: __m256i, arg3: __m256i) -> __m256i;
}
extern "C" {
    pub fn _mm256_frcz_ps(arg1: __m256) -> __m256;
}
extern "C" {
    pub fn _mm256_frcz_pd(arg1: __m256d) -> __m256d;
}
extern "C" {
    pub fn _mm256_permute2_ps(
        arg1: __m256,
        arg2: __m256,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256;
}
extern "C" {
    pub fn _mm256_permute2_pd(
        arg1: __m256d,
        arg2: __m256d,
        arg3: __m256i,
        arg4: ::std::os::raw::c_int,
    ) -> __m256d;
}
extern "C" {
    pub fn __llwpcb(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn __slwpcb() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __lwpval32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn __lwpins32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __lwpval64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn __lwpins64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _andn_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _andn_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _bextri_u32(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _blcfill_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _blsfill_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _blcs_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _tzmsk_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _blcic_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _blsic_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _t1mskc_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _blcmsk_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _blci_u32(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _bextri_u64(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _blcfill_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _blsfill_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _blcs_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _tzmsk_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _blcic_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _blsic_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _t1mskc_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _blcmsk_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _blci_u64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _mm_monitorx(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn _mm_mwaitx(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn _mm_clzero(arg1: *const ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmp_seg {
    pub rmp_gpa: ::std::os::raw::c_ulonglong,
    pub rmp_entry: ::std::os::raw::c_char,
    pub rmp_pageSize: ::std::os::raw::c_char,
    pub rmp_pageMark: ::std::os::raw::c_char,
    pub rmp_reserved: ::std::os::raw::c_char,
    pub rmp_ASID: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rmp_seg() {
    const UNINIT: ::std::mem::MaybeUninit<rmp_seg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<rmp_seg>(),
        16usize,
        concat!("Size of: ", stringify!(rmp_seg))
    );
    assert_eq!(
        ::std::mem::align_of::<rmp_seg>(),
        8usize,
        concat!("Alignment of ", stringify!(rmp_seg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmp_gpa) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rmp_seg),
            "::",
            stringify!(rmp_gpa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmp_entry) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rmp_seg),
            "::",
            stringify!(rmp_entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmp_pageSize) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(rmp_seg),
            "::",
            stringify!(rmp_pageSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmp_pageMark) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(rmp_seg),
            "::",
            stringify!(rmp_pageMark)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmp_reserved) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(rmp_seg),
            "::",
            stringify!(rmp_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmp_ASID) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rmp_seg),
            "::",
            stringify!(rmp_ASID)
        )
    );
}
extern "C" {
    pub fn __rmpupdate(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: *mut rmp_seg,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __pvalidate(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __psmash(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __rmpadjust(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __rmpquery(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __svm_invlpgb(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn __svm_tlbsync();
}
extern "C" {
    pub fn _AddressOfReturnAddress() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _cvt_dtoi_fast(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _cvt_dtoi_sat(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _cvt_dtoi_sent(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _cvt_dtoll_fast(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _cvt_dtoll_sat(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _cvt_dtoll_sent(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _cvt_dtoui_fast(arg1: f64) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _cvt_dtoui_sat(arg1: f64) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _cvt_dtoui_sent(arg1: f64) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _cvt_dtoull_fast(arg1: f64) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _cvt_dtoull_sat(arg1: f64) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _cvt_dtoull_sent(arg1: f64) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _cvt_ftoi_fast(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _cvt_ftoi_sat(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _cvt_ftoi_sent(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _cvt_ftoll_fast(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _cvt_ftoll_sat(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _cvt_ftoll_sent(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _cvt_ftoui_fast(arg1: f32) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _cvt_ftoui_sat(arg1: f32) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _cvt_ftoui_sent(arg1: f32) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _cvt_ftoull_fast(arg1: f32) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _cvt_ftoull_sat(arg1: f32) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _cvt_ftoull_sent(arg1: f32) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _interlockedadd(
        _Addend: *mut ::std::os::raw::c_long,
        _Value: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _interlockedadd64(
        _Addend: *mut ::std::os::raw::c_longlong,
        _Value: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedAnd16_np(
        _Value: *mut ::std::os::raw::c_short,
        _Mask: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedAnd64_np(
        _Value: *mut ::std::os::raw::c_longlong,
        _Mask: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedAnd8_np(
        _Value: *mut ::std::os::raw::c_char,
        _Mask: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn _InterlockedAnd_np(
        _Value: *mut ::std::os::raw::c_long,
        _Mask: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _interlockedbittestandset(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _InterlockedCompareExchange128_np(
        _Destination: *mut ::std::os::raw::c_longlong,
        _ExchangeHigh: ::std::os::raw::c_longlong,
        _ExchangeLow: ::std::os::raw::c_longlong,
        _ComparandResult: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _InterlockedCompareExchange16_np(
        _Destination: *mut ::std::os::raw::c_short,
        _Exchange: ::std::os::raw::c_short,
        _Comparand: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedCompareExchange64_np(
        _Destination: *mut ::std::os::raw::c_longlong,
        _Exchange: ::std::os::raw::c_longlong,
        _Comparand: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedCompareExchangePointer(
        _Destination: *mut *mut ::std::os::raw::c_void,
        _Exchange: *mut ::std::os::raw::c_void,
        _Comparand: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _InterlockedCompareExchangePointer_np(
        _Destination: *mut *mut ::std::os::raw::c_void,
        _Exchange: *mut ::std::os::raw::c_void,
        _Comparand: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _InterlockedCompareExchange_np(
        _Destination: *mut ::std::os::raw::c_long,
        _Exchange: ::std::os::raw::c_long,
        _Comparand: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedExchangePointer(
        _Target: *mut *mut ::std::os::raw::c_void,
        _Value: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _InterlockedOr16_np(
        _Value: *mut ::std::os::raw::c_short,
        _Mask: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedOr64_np(
        _Value: *mut ::std::os::raw::c_longlong,
        _Mask: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedOr8_np(
        _Value: *mut ::std::os::raw::c_char,
        _Mask: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn _InterlockedOr_np(
        _Value: *mut ::std::os::raw::c_long,
        _Mask: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _InterlockedXor16_np(
        _Value: *mut ::std::os::raw::c_short,
        _Mask: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _InterlockedXor64_np(
        _Value: *mut ::std::os::raw::c_longlong,
        _Mask: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _InterlockedXor8_np(
        _Value: *mut ::std::os::raw::c_char,
        _Mask: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn _InterlockedXor_np(
        _Value: *mut ::std::os::raw::c_long,
        _Mask: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ReadBarrier();
}
extern "C" {
    pub fn _ReturnAddress() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _WriteBarrier();
}
extern "C" {
    pub fn __addgsbyte(arg1: ::std::os::raw::c_ulong, arg2: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn __addgsdword(arg1: ::std::os::raw::c_ulong, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __addgsqword(arg1: ::std::os::raw::c_ulong, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn __addgsword(arg1: ::std::os::raw::c_ulong, arg2: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn __clts();
}
extern "C" {
    pub fn __code_seg(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn __cpuid(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn __cpuidex(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn __debugbreak();
}
extern "C" {
    pub fn __emul(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __emulu(
        arg1: ::std::os::raw::c_uint,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __fastfail(arg1: ::std::os::raw::c_uint) -> !;
}
extern "C" {
    pub fn __faststorefence();
}
extern "C" {
    pub fn __getcallerseflags() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn __halt();
}
extern "C" {
    pub fn __inbyte(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __inbytestring(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __incgsbyte(arg1: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __incgsdword(arg1: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __incgsqword(arg1: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __incgsword(arg1: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __indword(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __indwordstring(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __int2c() -> !;
}
extern "C" {
    pub fn __invlpg(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn __inword(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __inwordstring(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __lidt(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn __ll_lshift(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __ll_rshift(
        arg1: ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __movsb(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: usize,
    );
}
extern "C" {
    pub fn __movsd(
        arg1: *mut ::std::os::raw::c_ulong,
        arg2: *const ::std::os::raw::c_ulong,
        arg3: usize,
    );
}
extern "C" {
    pub fn __movsq(
        arg1: *mut ::std::os::raw::c_ulonglong,
        arg2: *const ::std::os::raw::c_ulonglong,
        arg3: usize,
    );
}
extern "C" {
    pub fn __movsw(
        arg1: *mut ::std::os::raw::c_ushort,
        arg2: *const ::std::os::raw::c_ushort,
        arg3: usize,
    );
}
extern "C" {
    pub fn __mulh(
        arg1: ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __nop();
}
extern "C" {
    pub fn __nvreg_restore_fence();
}
extern "C" {
    pub fn __nvreg_save_fence();
}
extern "C" {
    pub fn __outbyte(arg1: ::std::os::raw::c_ushort, arg2: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn __outbytestring(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __outdword(arg1: ::std::os::raw::c_ushort, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __outdwordstring(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __outword(arg1: ::std::os::raw::c_ushort, arg2: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn __outwordstring(
        arg1: ::std::os::raw::c_ushort,
        arg2: *mut ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn __rdtsc() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __rdtscp(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __readcr0() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __readcr2() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __readcr3() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __readcr4() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __readcr8() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __readdr(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __readeflags() -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __readgsbyte(arg1: ::std::os::raw::c_ulong) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __readgsdword(arg1: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __readgsqword(arg1: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __readgsword(arg1: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __readmsr(arg1: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __readpmc(arg1: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __segmentlimit(arg1: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __sidt(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn __stosb(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn __stosd(arg1: *mut ::std::os::raw::c_ulong, arg2: ::std::os::raw::c_ulong, arg3: usize);
}
extern "C" {
    pub fn __stosq(
        arg1: *mut ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_ulonglong,
        arg3: usize,
    );
}
extern "C" {
    pub fn __stosw(
        arg1: *mut ::std::os::raw::c_ushort,
        arg2: ::std::os::raw::c_ushort,
        arg3: usize,
    );
}
extern "C" {
    pub fn __svm_clgi();
}
extern "C" {
    pub fn __svm_invlpga(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn __svm_skinit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn __svm_stgi();
}
extern "C" {
    pub fn __svm_vmload(arg1: usize);
}
extern "C" {
    pub fn __svm_vmrun(arg1: usize);
}
extern "C" {
    pub fn __svm_vmsave(arg1: usize);
}
extern "C" {
    pub fn __ud2() -> !;
}
extern "C" {
    pub fn __ull_rshift(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __umulh(
        arg1: ::std::os::raw::c_ulonglong,
        arg2: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn __vmx_off();
}
extern "C" {
    pub fn __vmx_on(arg1: *mut ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __vmx_vmclear(arg1: *mut ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __vmx_vmlaunch() -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __vmx_vmptrld(arg1: *mut ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __vmx_vmptrst(arg1: *mut ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn __vmx_vmread(arg1: usize, arg2: *mut usize) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __vmx_vmresume() -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __vmx_vmwrite(arg1: usize, arg2: usize) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __wbinvd();
}
extern "C" {
    pub fn __writecr0(arg1: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn __writecr2(arg1: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn __writecr3(arg1: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn __writecr4(arg1: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn __writecr8(arg1: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn __writedr(arg1: ::std::os::raw::c_uint, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn __writeeflags(arg1: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn __writegsbyte(arg1: ::std::os::raw::c_ulong, arg2: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn __writegsdword(arg1: ::std::os::raw::c_ulong, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn __writegsqword(arg1: ::std::os::raw::c_ulong, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn __writegsword(arg1: ::std::os::raw::c_ulong, arg2: ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn __writemsr(arg1: ::std::os::raw::c_ulong, arg2: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn _bittest64(
        arg1: *const ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _bittestandcomplement(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _bittestandcomplement64(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _bittestandreset(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _bittestandreset64(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _bittestandset(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _bittestandset64(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _byteswap_uint64(arg1: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _byteswap_ulong(arg1: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _byteswap_ushort(arg1: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _disable();
}
extern "C" {
    pub fn _enable();
}
extern "C" {
    pub fn _interlockedbittestandreset(
        arg1: *mut ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _interlockedbittestandreset64(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _interlockedbittestandset64(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _lrotl(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _lrotr(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _m_prefetch(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _m_prefetchw(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _mm_clflushopt(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _mm_clwb(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _mm_cvtsd_si64x(arg1: __m128d) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtsi128_si64x(arg1: __m128i) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvtsi64x_sd(arg1: __m128d, arg2: ::std::os::raw::c_longlong) -> __m128d;
}
extern "C" {
    pub fn _mm_cvtsi64x_si128(arg1: ::std::os::raw::c_longlong) -> __m128i;
}
extern "C" {
    pub fn _mm_cvtsi64x_ss(arg1: __m128, arg2: ::std::os::raw::c_longlong) -> __m128;
}
extern "C" {
    pub fn _mm_cvtss_si64x(arg1: __m128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvttsd_si64x(arg1: __m128d) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_cvttss_si64x(arg1: __m128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _mm_extract_si64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_extracti_si64(
        arg1: __m128i,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_insert_si64(arg1: __m128i, arg2: __m128i) -> __m128i;
}
extern "C" {
    pub fn _mm_inserti_si64(
        arg1: __m128i,
        arg2: __m128i,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_setr_epi64x(
        arg1: ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    ) -> __m128i;
}
extern "C" {
    pub fn _mm_stream_sd(arg1: *mut f64, arg2: __m128d);
}
extern "C" {
    pub fn _mm_stream_si64x(
        arg1: *mut ::std::os::raw::c_longlong,
        arg2: ::std::os::raw::c_longlong,
    );
}
extern "C" {
    pub fn _mm_stream_ss(arg1: *mut f32, arg2: __m128);
}
extern "C" {
    pub fn _mul128(
        _Multiplier: ::std::os::raw::c_longlong,
        _Multiplicand: ::std::os::raw::c_longlong,
        _HighProduct: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _setjmpex(arg1: *mut _JBTYPE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _rsm();
}
extern "C" {
    pub fn _lgdt(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _sgdt(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _clac();
}
extern "C" {
    pub fn _stac();
}
extern "C" {
    pub fn _addcarry_u8(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_uchar,
        arg4: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _subborrow_u8(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_uchar,
        arg4: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _addcarry_u16(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ushort,
        arg4: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _subborrow_u16(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_ushort,
        arg3: ::std::os::raw::c_ushort,
        arg4: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _addcarry_u32(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _subborrow_u32(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_uint,
        arg4: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _AddressOfNextInstruction() -> *mut ::std::os::raw::c_void;
}
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort_s(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn bsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    );
}
extern "C" {
    pub fn _lfind_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _itow_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ltow_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ultow_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstod(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstod_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstol(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wcstol_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoll(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoll_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoul(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _wcstoul_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoull(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoull_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstold(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstold_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstof(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn _wcstof_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn _wtof(_String: *const wchar_t) -> f64;
}
extern "C" {
    pub fn _wtof_l(_String: *const wchar_t, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _wtoi(_String: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtoi_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtol(_String: *const wchar_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtol_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtoll(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoll_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _i64tow_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64tow(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ui64tow_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64tow(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtoi64(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoi64_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoui64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoui64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wfullpath(
        _Buffer: *mut wchar_t,
        _Path: *const wchar_t,
        _BufferCount: usize,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut wchar_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    );
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _Dir: *mut wchar_t,
        _Filename: *mut wchar_t,
        _Ext: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _DriveCount: usize,
        _Dir: *mut wchar_t,
        _DirCount: usize,
        _Filename: *mut wchar_t,
        _FilenameCount: usize,
        _Ext: *mut wchar_t,
        _ExtCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut wchar_t,
        _BufferCount: *mut usize,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wgetenv(_VarName: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut usize,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wputenv(_EnvString: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wputenv_s(_Name: *const wchar_t, _Value: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _ResultPath: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsystem(_Command: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _exit(_Code: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _Exit(_Code: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(_Code: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn _set_abort_behavior(
        _Flags: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *const wchar_t,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn __sys_errlist() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __sys_nerr() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrMsg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn __p__pgmptr() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut wchar_t) -> errno_t;
}
extern "C" {
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__div_t() {
    const UNINIT: ::std::mem::MaybeUninit<_div_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_div_t>(),
        8usize,
        concat!("Size of: ", stringify!(_div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_div_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__ldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<_ldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ldiv_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__lldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<_lldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(_lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_lldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type lldiv_t = _lldiv_t;
extern "C" {
    pub fn abs(_Number: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(_Number: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _abs64(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int, _Denominator: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long, _Denominator: ::std::os::raw::c_long)
        -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        _Numerator: ::std::os::raw::c_longlong,
        _Denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[test]
fn bindgen_test_layout__LDOUBLE() {
    const UNINIT: ::std::mem::MaybeUninit<_LDOUBLE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_LDOUBLE>(),
        10usize,
        concat!("Size of: ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDOUBLE>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ld) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDOUBLE),
            "::",
            stringify!(ld)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__CRT_DOUBLE() {
    const UNINIT: ::std::mem::MaybeUninit<_CRT_DOUBLE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_DOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[test]
fn bindgen_test_layout__CRT_FLOAT() {
    const UNINIT: ::std::mem::MaybeUninit<_CRT_FLOAT> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Size of: ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Alignment of ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_FLOAT),
            "::",
            stringify!(f)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__LONGDOUBLE() {
    const UNINIT: ::std::mem::MaybeUninit<_LONGDOUBLE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LONGDOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
#[test]
fn bindgen_test_layout__LDBL12() {
    const UNINIT: ::std::mem::MaybeUninit<_LDBL12> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_LDBL12>(),
        12usize,
        concat!("Size of: ", stringify!(_LDBL12))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDBL12>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDBL12))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ld12) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDBL12),
            "::",
            stringify!(ld12)
        )
    );
}
extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _atoi_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atol_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _atoll_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoflt(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtof(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn _strtof_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtod(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtod_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtold(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtold_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _strtol_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoll(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoll_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _strtoul_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoull_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoi64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoi64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoui64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoui64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _itoa_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ltoa_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ultoa_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _i64toa_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64toa(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ui64toa_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64toa(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ecvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _gcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mblen_l(
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbstrlen(_String: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn _mbstrlen_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> usize;
}
extern "C" {
    pub fn _mbstrnlen(_String: *const ::std::os::raw::c_char, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn _mbstrnlen_l(
        _String: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbtowc(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut wchar_t,
        _SizeInWords: usize,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn mbstowcs(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> usize;
}
extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut wchar_t,
        _SizeInWords: usize,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wctomb_l(
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _WCh: wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: usize,
        _Src: *const wchar_t,
        _MaxCountInBytes: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: usize,
    ) -> usize;
}
extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: usize,
        _Src: *const wchar_t,
        _MaxCountInBytes: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn _fullpath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Path: *const ::std::os::raw::c_char,
        _BufferCount: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _makepath_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _makepath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _Dir: *mut ::std::os::raw::c_char,
        _Filename: *mut ::std::os::raw::c_char,
        _Ext: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _DriveCount: usize,
        _Dir: *mut ::std::os::raw::c_char,
        _DirCount: usize,
        _Filename: *mut ::std::os::raw::c_char,
        _FilenameCount: usize,
        _Ext: *mut ::std::os::raw::c_char,
        _ExtCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn getenv_s(
        _RequiredCount: *mut usize,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: rsize_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn __p___argc() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__environ() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _dupenv_s(
        _Buffer: *mut *mut ::std::os::raw::c_char,
        _BufferCount: *mut usize,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv_s(
        _Name: *const ::std::os::raw::c_char,
        _Value: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv_s(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _beep(_Frequency: ::std::os::raw::c_uint, _Duration: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn memchr(
        _Buf: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        _Dst: *mut ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strchr(
        _Str: *const ::std::os::raw::c_char,
        _Val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        _Str: *const ::std::os::raw::c_char,
        _Ch: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        _Str: *const ::std::os::raw::c_char,
        _SubStr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wcschr(
        _Str: *const ::std::os::raw::c_ushort,
        _Ch: ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn wcsrchr(_Str: *const wchar_t, _Ch: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsstr(_Str: *const wchar_t, _SubStr: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _memicmp_l(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcscpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstok_s(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscat(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscmp(
        _String1: *const ::std::os::raw::c_ushort,
        _String2: *const ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscpy(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(_String: *const wchar_t, _Control: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcslen(_String: *const ::std::os::raw::c_ushort) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcsnlen(_Source: *const wchar_t, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn wcsncat(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: usize,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncmp(
        _String1: *const ::std::os::raw::c_ushort,
        _String2: *const ::std::os::raw::c_ushort,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncpy(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: usize,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcspbrk(_String: *const wchar_t, _Control: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsspn(_String: *const wchar_t, _Control: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcstok(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror(_ErrorNumber: ::std::os::raw::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn __wcserror(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn __wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _ErrorMessage: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnset_s(
        _Destination: *mut wchar_t,
        _SizeInWords: usize,
        _Value: wchar_t,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsset_s(_Destination: *mut wchar_t, _SizeInWords: usize, _Value: wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s(_String: *mut wchar_t, _SizeInWords: usize) -> errno_t;
}
extern "C" {
    pub fn _wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s_l(_String: *mut wchar_t, _SizeInWords: usize, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s(_String: *mut wchar_t, _Size: usize) -> errno_t;
}
extern "C" {
    pub fn _wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s_l(_String: *mut wchar_t, _Size: usize, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsxfrm(_Destination: *mut wchar_t, _Source: *const wchar_t, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn _wcsxfrm_l(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcscoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcscoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strcat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn strncat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strncpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strtok_s(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
        _Context: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strcoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strdup(_Source: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strerror(_ErrorMessage: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _ErrorMessage: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror(_ErrorMessage: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlen(_Str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strlwr_s(_String: *mut ::std::os::raw::c_char, _Size: usize) -> errno_t;
}
extern "C" {
    pub fn _strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strlwr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strlwr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strncoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strncoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __strncnt(_String: *const ::std::os::raw::c_char, _Count: usize) -> usize;
}
extern "C" {
    pub fn strncpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(_String: *const ::std::os::raw::c_char, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn _strnset_s(
        _String: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Value: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _strnset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _Count: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strrev(_Str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strset_s(
        _Destination: *mut ::std::os::raw::c_char,
        _DestinationSize: usize,
        _Value: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _strset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtok(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strupr_s(_String: *mut ::std::os::raw::c_char, _Size: usize) -> errno_t;
}
extern "C" {
    pub fn _strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strupr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strupr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strxfrm_l(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(_String: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strnset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrev(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
pub const LZ4_minLength: ::std::os::raw::c_int = 13;
pub type BYTE = u8;
pub type U16 = u16;
pub type U32 = u32;
pub type S32 = i32;
pub type U64 = u64;
pub type uptrval = usize;
pub type reg_t = U64;
pub const limitedOutput_directive_notLimited: limitedOutput_directive = 0;
pub const limitedOutput_directive_limitedOutput: limitedOutput_directive = 1;
pub const limitedOutput_directive_fillOutput: limitedOutput_directive = 2;
pub type limitedOutput_directive = ::std::os::raw::c_int;
extern "C" {
    pub static inc32table: [::std::os::raw::c_uint; 8usize];
}
extern "C" {
    pub static dec64table: [::std::os::raw::c_int; 8usize];
}
pub const LZ4_64Klimit: ::std::os::raw::c_int = 65547;
pub const LZ4_skipTrigger: U32 = 6;
pub const tableType_t_clearedTable: tableType_t = 0;
pub const tableType_t_byPtr: tableType_t = 1;
pub const tableType_t_byU32: tableType_t = 2;
pub const tableType_t_byU16: tableType_t = 3;
pub type tableType_t = ::std::os::raw::c_int;
pub const dict_directive_noDict: dict_directive = 0;
pub const dict_directive_withPrefix64k: dict_directive = 1;
pub const dict_directive_usingExtDict: dict_directive = 2;
pub const dict_directive_usingDictCtx: dict_directive = 3;
#[doc = " This enum distinguishes several different modes of accessing previous\n content in the stream.\n\n - noDict        : There is no preceding content.\n - withPrefix64k : Table entries up to ctx->dictSize before the current blob\n                   blob being compressed are valid and refer to the preceding\n                   content (of length ctx->dictSize), which is available\n                   contiguously preceding in memory the content currently\n                   being compressed.\n - usingExtDict  : Like withPrefix64k, but the preceding content is somewhere\n                   else in memory, starting at ctx->dictionary with length\n                   ctx->dictSize.\n - usingDictCtx  : Everything concerning the preceding content is\n                   in a separate context, pointed to by ctx->dictCtx.\n                   ctx->dictionary, ctx->dictSize, and table entries\n                   in the current context that refer to positions\n                   preceding the beginning of the current compression are\n                   ignored. Instead, ctx->dictCtx->dictionary and ctx->dictCtx\n                   ->dictSize describe the location and size of the preceding\n                   content, and matches are found by looking in the ctx\n                   ->dictCtx->hashTable."]
pub type dict_directive = ::std::os::raw::c_int;
pub const dictIssue_directive_noDictIssue: dictIssue_directive = 0;
pub const dictIssue_directive_dictSmall: dictIssue_directive = 1;
pub type dictIssue_directive = ::std::os::raw::c_int;
extern "C" {
    pub fn LZ4_compress_forceExtDict(
        LZ4_dict: *mut LZ4_stream_t,
        source: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        srcSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_decompress_safe_forceExtDict(
        source: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        compressedSize: ::std::os::raw::c_int,
        maxOutputSize: ::std::os::raw::c_int,
        dictStart: *const ::std::os::raw::c_void,
        dictSize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_decompress_safe_partial_forceExtDict(
        source: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        compressedSize: ::std::os::raw::c_int,
        targetOutputSize: ::std::os::raw::c_int,
        dstCapacity: ::std::os::raw::c_int,
        dictStart: *const ::std::os::raw::c_void,
        dictSize: usize,
    ) -> ::std::os::raw::c_int;
}
pub const earlyEnd_directive_decode_full_block: earlyEnd_directive = 0;
pub const earlyEnd_directive_partial_decode: earlyEnd_directive = 1;
pub type earlyEnd_directive = ::std::os::raw::c_int;
extern "C" {
    pub fn read_long_length_no_check(pp: *mut *const BYTE) -> usize;
}
pub type Rvl_t = usize;
extern "C" {
    pub static rvl_error: Rvl_t;
}
extern "C" {
    #[doc = " LZ4_compress_HC() :\n  Compress data from `src` into `dst`, using the powerful but slower \"HC\" algorithm.\n `dst` must be already allocated.\n  Compression is guaranteed to succeed if `dstCapacity >= LZ4_compressBound(srcSize)` (see \"lz4.h\")\n  Max supported `srcSize` value is LZ4_MAX_INPUT_SIZE (see \"lz4.h\")\n `compressionLevel` : any value between 1 and LZ4HC_CLEVEL_MAX will work.\n                      Values > LZ4HC_CLEVEL_MAX behave the same as LZ4HC_CLEVEL_MAX.\n @return : the number of bytes written into 'dst'\n           or 0 if compression fails."]
    pub fn LZ4_compress_HC(
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        srcSize: ::std::os::raw::c_int,
        dstCapacity: ::std::os::raw::c_int,
        compressionLevel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " LZ4_compress_HC_extStateHC() :\n  Same as LZ4_compress_HC(), but using an externally allocated memory segment for `state`.\n `state` size is provided by LZ4_sizeofStateHC().\n  Memory segment must be aligned on 8-bytes boundaries (which a normal malloc() should do properly)."]
    pub fn LZ4_sizeofStateHC() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_compress_HC_extStateHC(
        stateHC: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        srcSize: ::std::os::raw::c_int,
        maxDstSize: ::std::os::raw::c_int,
        compressionLevel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " LZ4_compress_HC_destSize() : v1.9.0+\n  Will compress as much data as possible from `src`\n  to fit into `targetDstSize` budget.\n  Result is provided in 2 parts :\n @return : the number of bytes written into 'dst' (necessarily <= targetDstSize)\n           or 0 if compression fails.\n `srcSizePtr` : on success, *srcSizePtr is updated to indicate how much bytes were read from `src`"]
    pub fn LZ4_compress_HC_destSize(
        stateHC: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        srcSizePtr: *mut ::std::os::raw::c_int,
        targetDstSize: ::std::os::raw::c_int,
        compressionLevel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type LZ4_streamHC_t = LZ4_streamHC_u;
extern "C" {
    #[doc = " LZ4_createStreamHC() and LZ4_freeStreamHC() :\n  These functions create and release memory for LZ4 HC streaming state.\n  Newly created states are automatically initialized.\n  A same state can be used multiple times consecutively,\n  starting with LZ4_resetStreamHC_fast() to start a new stream of blocks."]
    pub fn LZ4_createStreamHC() -> *mut LZ4_streamHC_t;
}
extern "C" {
    pub fn LZ4_freeStreamHC(streamHCPtr: *mut LZ4_streamHC_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " LZ4_resetStreamHC_fast() : v1.9.0+\n  When an LZ4_streamHC_t is known to be in a internally coherent state,\n  it can often be prepared for a new compression with almost no work, only\n  sometimes falling back to the full, expensive reset that is always required\n  when the stream is in an indeterminate state (i.e., the reset performed by\n  LZ4_resetStreamHC()).\n\n  LZ4_streamHCs are guaranteed to be in a valid state when:\n  - returned from LZ4_createStreamHC()\n  - reset by LZ4_resetStreamHC()\n  - memset(stream, 0, sizeof(LZ4_streamHC_t))\n  - the stream was in a valid state and was reset by LZ4_resetStreamHC_fast()\n  - the stream was in a valid state and was then used in any compression call\n    that returned success\n  - the stream was in an indeterminate state and was used in a compression\n    call that fully reset the state (LZ4_compress_HC_extStateHC()) and that\n    returned success\n\n  Note:\n  A stream that was last used in a compression call that returned an error\n  may be passed to this function. However, it will be fully reset, which will\n  clear any existing history and settings from the context."]
    pub fn LZ4_resetStreamHC_fast(
        streamHCPtr: *mut LZ4_streamHC_t,
        compressionLevel: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn LZ4_loadDictHC(
        streamHCPtr: *mut LZ4_streamHC_t,
        dictionary: *const ::std::os::raw::c_char,
        dictSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_compress_HC_continue(
        streamHCPtr: *mut LZ4_streamHC_t,
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        srcSize: ::std::os::raw::c_int,
        maxDstSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " LZ4_compress_HC_continue_destSize() : v1.9.0+\n  Similar to LZ4_compress_HC_continue(),\n  but will read as much data as possible from `src`\n  to fit into `targetDstSize` budget.\n  Result is provided into 2 parts :\n @return : the number of bytes written into 'dst' (necessarily <= targetDstSize)\n           or 0 if compression fails.\n `srcSizePtr` : on success, *srcSizePtr will be updated to indicate how much bytes were read from `src`.\n           Note that this function may not consume the entire input."]
    pub fn LZ4_compress_HC_continue_destSize(
        LZ4_streamHCPtr: *mut LZ4_streamHC_t,
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        srcSizePtr: *mut ::std::os::raw::c_int,
        targetDstSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_saveDictHC(
        streamHCPtr: *mut LZ4_streamHC_t,
        safeBuffer: *mut ::std::os::raw::c_char,
        maxDictSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LZ4HC_CCtx_internal {
    pub hashTable: [LZ4_u32; 32768usize],
    pub chainTable: [LZ4_u16; 65536usize],
    pub end: *const LZ4_byte,
    pub prefixStart: *const LZ4_byte,
    pub dictStart: *const LZ4_byte,
    pub dictLimit: LZ4_u32,
    pub lowLimit: LZ4_u32,
    pub nextToUpdate: LZ4_u32,
    pub compressionLevel: ::std::os::raw::c_short,
    pub favorDecSpeed: LZ4_i8,
    pub dirty: LZ4_i8,
    pub dictCtx: *const LZ4HC_CCtx_internal,
}
#[test]
fn bindgen_test_layout_LZ4HC_CCtx_internal() {
    const UNINIT: ::std::mem::MaybeUninit<LZ4HC_CCtx_internal> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LZ4HC_CCtx_internal>(),
        262192usize,
        concat!("Size of: ", stringify!(LZ4HC_CCtx_internal))
    );
    assert_eq!(
        ::std::mem::align_of::<LZ4HC_CCtx_internal>(),
        8usize,
        concat!("Alignment of ", stringify!(LZ4HC_CCtx_internal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hashTable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4HC_CCtx_internal),
            "::",
            stringify!(hashTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chainTable) as usize - ptr as usize },
        131072usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4HC_CCtx_internal),
            "::",
            stringify!(chainTable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        262144usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4HC_CCtx_internal),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prefixStart) as usize - ptr as usize },
        262152usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4HC_CCtx_internal),
            "::",
            stringify!(prefixStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dictStart) as usize - ptr as usize },
        262160usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4HC_CCtx_internal),
            "::",
            stringify!(dictStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dictLimit) as usize - ptr as usize },
        262168usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4HC_CCtx_internal),
            "::",
            stringify!(dictLimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lowLimit) as usize - ptr as usize },
        262172usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4HC_CCtx_internal),
            "::",
            stringify!(lowLimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nextToUpdate) as usize - ptr as usize },
        262176usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4HC_CCtx_internal),
            "::",
            stringify!(nextToUpdate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compressionLevel) as usize - ptr as usize },
        262180usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4HC_CCtx_internal),
            "::",
            stringify!(compressionLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).favorDecSpeed) as usize - ptr as usize },
        262182usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4HC_CCtx_internal),
            "::",
            stringify!(favorDecSpeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dirty) as usize - ptr as usize },
        262183usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4HC_CCtx_internal),
            "::",
            stringify!(dirty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dictCtx) as usize - ptr as usize },
        262184usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4HC_CCtx_internal),
            "::",
            stringify!(dictCtx)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union LZ4_streamHC_u {
    pub minStateSize: [::std::os::raw::c_char; 262200usize],
    pub internal_donotuse: LZ4HC_CCtx_internal,
}
#[test]
fn bindgen_test_layout_LZ4_streamHC_u() {
    const UNINIT: ::std::mem::MaybeUninit<LZ4_streamHC_u> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LZ4_streamHC_u>(),
        262200usize,
        concat!("Size of: ", stringify!(LZ4_streamHC_u))
    );
    assert_eq!(
        ::std::mem::align_of::<LZ4_streamHC_u>(),
        8usize,
        concat!("Alignment of ", stringify!(LZ4_streamHC_u))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minStateSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4_streamHC_u),
            "::",
            stringify!(minStateSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal_donotuse) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4_streamHC_u),
            "::",
            stringify!(internal_donotuse)
        )
    );
}
extern "C" {
    pub fn LZ4_initStreamHC(
        buffer: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut LZ4_streamHC_t;
}
extern "C" {
    #[doc = "  Deprecated Functions"]
    pub fn LZ4_compressHC(
        source: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        inputSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_compressHC_limitedOutput(
        source: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        inputSize: ::std::os::raw::c_int,
        maxOutputSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_compressHC2(
        source: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        inputSize: ::std::os::raw::c_int,
        compressionLevel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_compressHC2_limitedOutput(
        source: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        inputSize: ::std::os::raw::c_int,
        maxOutputSize: ::std::os::raw::c_int,
        compressionLevel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_compressHC_withStateHC(
        state: *mut ::std::os::raw::c_void,
        source: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        inputSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_compressHC_limitedOutput_withStateHC(
        state: *mut ::std::os::raw::c_void,
        source: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        inputSize: ::std::os::raw::c_int,
        maxOutputSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_compressHC2_withStateHC(
        state: *mut ::std::os::raw::c_void,
        source: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        inputSize: ::std::os::raw::c_int,
        compressionLevel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_compressHC2_limitedOutput_withStateHC(
        state: *mut ::std::os::raw::c_void,
        source: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        inputSize: ::std::os::raw::c_int,
        maxOutputSize: ::std::os::raw::c_int,
        compressionLevel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_compressHC_continue(
        LZ4_streamHCPtr: *mut LZ4_streamHC_t,
        source: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        inputSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_compressHC_limitedOutput_continue(
        LZ4_streamHCPtr: *mut LZ4_streamHC_t,
        source: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        inputSize: ::std::os::raw::c_int,
        maxOutputSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_createHC(inputBuffer: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn LZ4_freeHC(LZ4HC_Data: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_slideInputBufferHC(
        LZ4HC_Data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn LZ4_compressHC2_continue(
        LZ4HC_Data: *mut ::std::os::raw::c_void,
        source: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        inputSize: ::std::os::raw::c_int,
        compressionLevel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_compressHC2_limitedOutput_continue(
        LZ4HC_Data: *mut ::std::os::raw::c_void,
        source: *const ::std::os::raw::c_char,
        dest: *mut ::std::os::raw::c_char,
        inputSize: ::std::os::raw::c_int,
        maxOutputSize: ::std::os::raw::c_int,
        compressionLevel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_sizeofStreamStateHC() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_resetStreamStateHC(
        state: *mut ::std::os::raw::c_void,
        inputBuffer: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn LZ4_resetStreamHC(
        streamHCPtr: *mut LZ4_streamHC_t,
        compressionLevel: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " LZ4_setCompressionLevel() : v1.8.0+ (experimental)\n  It's possible to change compression level\n  between successive invocations of LZ4_compress_HC_continue*()\n  for dynamic adaptation."]
    pub fn LZ4_setCompressionLevel(
        LZ4_streamHCPtr: *mut LZ4_streamHC_t,
        compressionLevel: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " LZ4_favorDecompressionSpeed() : v1.8.2+ (experimental)\n  Opt. Parser will favor decompression speed over compression ratio.\n  Only applicable to levels >= LZ4HC_CLEVEL_OPT_MIN."]
    pub fn LZ4_favorDecompressionSpeed(
        LZ4_streamHCPtr: *mut LZ4_streamHC_t,
        favor: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " LZ4_compress_HC_extStateHC_fastReset() :\n  A variant of LZ4_compress_HC_extStateHC().\n\n  Using this variant avoids an expensive initialization step. It is only safe\n  to call if the state buffer is known to be correctly initialized already\n  (see above comment on LZ4_resetStreamHC_fast() for a definition of\n  \"correctly initialized\"). From a high level, the difference is that this\n  function initializes the provided state with a call to\n  LZ4_resetStreamHC_fast() while LZ4_compress_HC_extStateHC() starts with a\n  call to LZ4_resetStreamHC()."]
    pub fn LZ4_compress_HC_extStateHC_fastReset(
        state: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        srcSize: ::std::os::raw::c_int,
        dstCapacity: ::std::os::raw::c_int,
        compressionLevel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " LZ4_attach_HC_dictionary() :\n  This is an experimental API that allows for the efficient use of a\n  static dictionary many times.\n\n  Rather than re-loading the dictionary buffer into a working context before\n  each compression, or copying a pre-loaded dictionary's LZ4_streamHC_t into a\n  working LZ4_streamHC_t, this function introduces a no-copy setup mechanism,\n  in which the working stream references the dictionary stream in-place.\n\n  Several assumptions are made about the state of the dictionary stream.\n  Currently, only streams which have been prepared by LZ4_loadDictHC() should\n  be expected to work.\n\n  Alternatively, the provided dictionary stream pointer may be NULL, in which\n  case any existing dictionary stream is unset.\n\n  A dictionary should only be attached to a stream without any history (i.e.,\n  a stream that has just been reset).\n\n  The dictionary will remain attached to the working stream only for the\n  current stream session. Calls to LZ4_resetStreamHC(_fast) will remove the\n  dictionary context association from the working stream. The dictionary\n  stream (and source buffer) must remain in-place / accessible / unchanged\n  through the lifetime of the stream session."]
    pub fn LZ4_attach_HC_dictionary(
        working_stream: *mut LZ4_streamHC_t,
        dictionary_stream: *const LZ4_streamHC_t,
    );
}
pub const dictCtx_directive_noDictCtx: dictCtx_directive = 0;
pub const dictCtx_directive_usingDictCtxHc: dictCtx_directive = 1;
pub type dictCtx_directive = ::std::os::raw::c_int;
pub const repeat_state_e_rep_untested: repeat_state_e = 0;
pub const repeat_state_e_rep_not: repeat_state_e = 1;
pub const repeat_state_e_rep_confirmed: repeat_state_e = 2;
pub type repeat_state_e = ::std::os::raw::c_int;
pub const HCfavor_e_favorCompressionRatio: HCfavor_e = 0;
pub const HCfavor_e_favorDecompressionSpeed: HCfavor_e = 1;
pub type HCfavor_e = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LZ4HC_optimal_t {
    pub price: ::std::os::raw::c_int,
    pub off: ::std::os::raw::c_int,
    pub mlen: ::std::os::raw::c_int,
    pub litlen: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_LZ4HC_optimal_t() {
    const UNINIT: ::std::mem::MaybeUninit<LZ4HC_optimal_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LZ4HC_optimal_t>(),
        16usize,
        concat!("Size of: ", stringify!(LZ4HC_optimal_t))
    );
    assert_eq!(
        ::std::mem::align_of::<LZ4HC_optimal_t>(),
        4usize,
        concat!("Alignment of ", stringify!(LZ4HC_optimal_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).price) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4HC_optimal_t),
            "::",
            stringify!(price)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).off) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4HC_optimal_t),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mlen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4HC_optimal_t),
            "::",
            stringify!(mlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).litlen) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4HC_optimal_t),
            "::",
            stringify!(litlen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LZ4HC_match_t {
    pub off: ::std::os::raw::c_int,
    pub len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_LZ4HC_match_t() {
    const UNINIT: ::std::mem::MaybeUninit<LZ4HC_match_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LZ4HC_match_t>(),
        8usize,
        concat!("Size of: ", stringify!(LZ4HC_match_t))
    );
    assert_eq!(
        ::std::mem::align_of::<LZ4HC_match_t>(),
        4usize,
        concat!("Alignment of ", stringify!(LZ4HC_match_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).off) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4HC_match_t),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4HC_match_t),
            "::",
            stringify!(len)
        )
    );
}
pub type LZ4F_errorCode_t = usize;
extern "C" {
    pub fn LZ4F_isError(code: LZ4F_errorCode_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn LZ4F_getErrorName(code: LZ4F_errorCode_t) -> *const ::std::os::raw::c_char;
}
pub const LZ4F_blockSizeID_t_LZ4F_default: LZ4F_blockSizeID_t = 0;
pub const LZ4F_blockSizeID_t_LZ4F_max64KB: LZ4F_blockSizeID_t = 4;
pub const LZ4F_blockSizeID_t_LZ4F_max256KB: LZ4F_blockSizeID_t = 5;
pub const LZ4F_blockSizeID_t_LZ4F_max1MB: LZ4F_blockSizeID_t = 6;
pub const LZ4F_blockSizeID_t_LZ4F_max4MB: LZ4F_blockSizeID_t = 7;
pub type LZ4F_blockSizeID_t = ::std::os::raw::c_int;
pub const LZ4F_blockMode_t_LZ4F_blockLinked: LZ4F_blockMode_t = 0;
pub const LZ4F_blockMode_t_LZ4F_blockIndependent: LZ4F_blockMode_t = 1;
pub type LZ4F_blockMode_t = ::std::os::raw::c_int;
pub const LZ4F_contentChecksum_t_LZ4F_noContentChecksum: LZ4F_contentChecksum_t = 0;
pub const LZ4F_contentChecksum_t_LZ4F_contentChecksumEnabled: LZ4F_contentChecksum_t = 1;
pub type LZ4F_contentChecksum_t = ::std::os::raw::c_int;
pub const LZ4F_blockChecksum_t_LZ4F_noBlockChecksum: LZ4F_blockChecksum_t = 0;
pub const LZ4F_blockChecksum_t_LZ4F_blockChecksumEnabled: LZ4F_blockChecksum_t = 1;
pub type LZ4F_blockChecksum_t = ::std::os::raw::c_int;
pub const LZ4F_frameType_t_LZ4F_frame: LZ4F_frameType_t = 0;
pub const LZ4F_frameType_t_LZ4F_skippableFrame: LZ4F_frameType_t = 1;
pub type LZ4F_frameType_t = ::std::os::raw::c_int;
#[doc = " LZ4F_frameInfo_t :\n  makes it possible to set or read frame parameters.\n  Structure must be first init to 0, using memset() or LZ4F_INIT_FRAMEINFO,\n  setting all parameters to default.\n  It's then possible to update selectively some parameters"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LZ4F_frameInfo_t {
    pub blockSizeID: LZ4F_blockSizeID_t,
    pub blockMode: LZ4F_blockMode_t,
    pub contentChecksumFlag: LZ4F_contentChecksum_t,
    pub frameType: LZ4F_frameType_t,
    pub contentSize: ::std::os::raw::c_ulonglong,
    pub dictID: ::std::os::raw::c_uint,
    pub blockChecksumFlag: LZ4F_blockChecksum_t,
}
#[test]
fn bindgen_test_layout_LZ4F_frameInfo_t() {
    const UNINIT: ::std::mem::MaybeUninit<LZ4F_frameInfo_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LZ4F_frameInfo_t>(),
        32usize,
        concat!("Size of: ", stringify!(LZ4F_frameInfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<LZ4F_frameInfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(LZ4F_frameInfo_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockSizeID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_frameInfo_t),
            "::",
            stringify!(blockSizeID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockMode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_frameInfo_t),
            "::",
            stringify!(blockMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contentChecksumFlag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_frameInfo_t),
            "::",
            stringify!(contentChecksumFlag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frameType) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_frameInfo_t),
            "::",
            stringify!(frameType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contentSize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_frameInfo_t),
            "::",
            stringify!(contentSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dictID) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_frameInfo_t),
            "::",
            stringify!(dictID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockChecksumFlag) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_frameInfo_t),
            "::",
            stringify!(blockChecksumFlag)
        )
    );
}
#[doc = " LZ4F_preferences_t :\n  makes it possible to supply advanced compression instructions to streaming interface.\n  Structure must be first init to 0, using memset() or LZ4F_INIT_PREFERENCES,\n  setting all parameters to default.\n  All reserved fields must be set to zero."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LZ4F_preferences_t {
    pub frameInfo: LZ4F_frameInfo_t,
    pub compressionLevel: ::std::os::raw::c_int,
    pub autoFlush: ::std::os::raw::c_uint,
    pub favorDecSpeed: ::std::os::raw::c_uint,
    pub reserved: [::std::os::raw::c_uint; 3usize],
}
#[test]
fn bindgen_test_layout_LZ4F_preferences_t() {
    const UNINIT: ::std::mem::MaybeUninit<LZ4F_preferences_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LZ4F_preferences_t>(),
        56usize,
        concat!("Size of: ", stringify!(LZ4F_preferences_t))
    );
    assert_eq!(
        ::std::mem::align_of::<LZ4F_preferences_t>(),
        8usize,
        concat!("Alignment of ", stringify!(LZ4F_preferences_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frameInfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_preferences_t),
            "::",
            stringify!(frameInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compressionLevel) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_preferences_t),
            "::",
            stringify!(compressionLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoFlush) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_preferences_t),
            "::",
            stringify!(autoFlush)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).favorDecSpeed) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_preferences_t),
            "::",
            stringify!(favorDecSpeed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_preferences_t),
            "::",
            stringify!(reserved)
        )
    );
}
extern "C" {
    pub fn LZ4F_compressionLevel_max() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " LZ4F_compressFrameBound() :\n  Returns the maximum possible compressed size with LZ4F_compressFrame() given srcSize and preferences.\n `preferencesPtr` is optional. It can be replaced by NULL, in which case, the function will assume default preferences.\n  Note : this result is only usable with LZ4F_compressFrame().\n         It may also be relevant to LZ4F_compressUpdate() _only if_ no flush() operation is ever performed."]
    pub fn LZ4F_compressFrameBound(
        srcSize: usize,
        preferencesPtr: *const LZ4F_preferences_t,
    ) -> usize;
}
extern "C" {
    #[doc = " LZ4F_compressFrame() :\n  Compress an entire srcBuffer into a valid LZ4 frame.\n  dstCapacity MUST be >= LZ4F_compressFrameBound(srcSize, preferencesPtr).\n  The LZ4F_preferences_t structure is optional : you can provide NULL as argument. All preferences will be set to default.\n @return : number of bytes written into dstBuffer.\n           or an error code if it fails (can be tested using LZ4F_isError())"]
    pub fn LZ4F_compressFrame(
        dstBuffer: *mut ::std::os::raw::c_void,
        dstCapacity: usize,
        srcBuffer: *const ::std::os::raw::c_void,
        srcSize: usize,
        preferencesPtr: *const LZ4F_preferences_t,
    ) -> usize;
}
pub type LZ4F_cctx = LZ4F_cctx_s;
pub type LZ4F_compressionContext_t = *mut LZ4F_cctx;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LZ4F_compressOptions_t {
    pub stableSrc: ::std::os::raw::c_uint,
    pub reserved: [::std::os::raw::c_uint; 3usize],
}
#[test]
fn bindgen_test_layout_LZ4F_compressOptions_t() {
    const UNINIT: ::std::mem::MaybeUninit<LZ4F_compressOptions_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LZ4F_compressOptions_t>(),
        16usize,
        concat!("Size of: ", stringify!(LZ4F_compressOptions_t))
    );
    assert_eq!(
        ::std::mem::align_of::<LZ4F_compressOptions_t>(),
        4usize,
        concat!("Alignment of ", stringify!(LZ4F_compressOptions_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stableSrc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_compressOptions_t),
            "::",
            stringify!(stableSrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_compressOptions_t),
            "::",
            stringify!(reserved)
        )
    );
}
extern "C" {
    pub fn LZ4F_getVersion() -> ::std::os::raw::c_uint;
}
extern "C" {
    #[doc = " LZ4F_createCompressionContext() :\n  The first thing to do is to create a compressionContext object,\n  which will keep track of operation state during streaming compression.\n  This is achieved using LZ4F_createCompressionContext(), which takes as argument a version,\n  and a pointer to LZ4F_cctx*, to write the resulting pointer into.\n  @version provided MUST be LZ4F_VERSION. It is intended to track potential version mismatch, notably when using DLL.\n  The function provides a pointer to a fully allocated LZ4F_cctx object.\n  @cctxPtr MUST be != NULL.\n  If @return != zero, context creation failed.\n  A created compression context can be employed multiple times for consecutive streaming operations.\n  Once all streaming compression jobs are completed,\n  the state object can be released using LZ4F_freeCompressionContext().\n  Note1 : LZ4F_freeCompressionContext() is always successful. Its return value can be ignored.\n  Note2 : LZ4F_freeCompressionContext() works fine with NULL input pointers (do nothing)."]
    pub fn LZ4F_createCompressionContext(
        cctxPtr: *mut *mut LZ4F_cctx,
        version: ::std::os::raw::c_uint,
    ) -> LZ4F_errorCode_t;
}
extern "C" {
    pub fn LZ4F_freeCompressionContext(cctx: *mut LZ4F_cctx) -> LZ4F_errorCode_t;
}
extern "C" {
    #[doc = " LZ4F_compressBegin() :\n  will write the frame header into dstBuffer.\n  dstCapacity must be >= LZ4F_HEADER_SIZE_MAX bytes.\n `prefsPtr` is optional : you can provide NULL as argument, all preferences will then be set to default.\n @return : number of bytes written into dstBuffer for the header\n           or an error code (which can be tested using LZ4F_isError())"]
    pub fn LZ4F_compressBegin(
        cctx: *mut LZ4F_cctx,
        dstBuffer: *mut ::std::os::raw::c_void,
        dstCapacity: usize,
        prefsPtr: *const LZ4F_preferences_t,
    ) -> usize;
}
extern "C" {
    #[doc = " LZ4F_compressBound() :\n  Provides minimum dstCapacity required to guarantee success of\n  LZ4F_compressUpdate(), given a srcSize and preferences, for a worst case scenario.\n  When srcSize==0, LZ4F_compressBound() provides an upper bound for LZ4F_flush() and LZ4F_compressEnd() instead.\n  Note that the result is only valid for a single invocation of LZ4F_compressUpdate().\n  When invoking LZ4F_compressUpdate() multiple times,\n  if the output buffer is gradually filled up instead of emptied and re-used from its start,\n  one must check if there is enough remaining capacity before each invocation, using LZ4F_compressBound().\n @return is always the same for a srcSize and prefsPtr.\n  prefsPtr is optional : when NULL is provided, preferences will be set to cover worst case scenario.\n  tech details :\n @return if automatic flushing is not enabled, includes the possibility that internal buffer might already be filled by up to (blockSize-1) bytes.\n  It also includes frame footer (ending + checksum), since it might be generated by LZ4F_compressEnd().\n @return doesn't include frame header, as it was already generated by LZ4F_compressBegin()."]
    pub fn LZ4F_compressBound(srcSize: usize, prefsPtr: *const LZ4F_preferences_t) -> usize;
}
extern "C" {
    #[doc = " LZ4F_compressUpdate() :\n  LZ4F_compressUpdate() can be called repetitively to compress as much data as necessary.\n  Important rule: dstCapacity MUST be large enough to ensure operation success even in worst case situations.\n  This value is provided by LZ4F_compressBound().\n  If this condition is not respected, LZ4F_compress() will fail (result is an errorCode).\n  After an error, the state is left in a UB state, and must be re-initialized or freed.\n  If previously an uncompressed block was written, buffered data is flushed\n  before appending compressed data is continued.\n `cOptPtr` is optional : NULL can be provided, in which case all options are set to default.\n @return : number of bytes written into `dstBuffer` (it can be zero, meaning input data was just buffered).\n           or an error code if it fails (which can be tested using LZ4F_isError())"]
    pub fn LZ4F_compressUpdate(
        cctx: *mut LZ4F_cctx,
        dstBuffer: *mut ::std::os::raw::c_void,
        dstCapacity: usize,
        srcBuffer: *const ::std::os::raw::c_void,
        srcSize: usize,
        cOptPtr: *const LZ4F_compressOptions_t,
    ) -> usize;
}
extern "C" {
    #[doc = " LZ4F_flush() :\n  When data must be generated and sent immediately, without waiting for a block to be completely filled,\n  it's possible to call LZ4_flush(). It will immediately compress any data buffered within cctx.\n `dstCapacity` must be large enough to ensure the operation will be successful.\n `cOptPtr` is optional : it's possible to provide NULL, all options will be set to default.\n @return : nb of bytes written into dstBuffer (can be zero, when there is no data stored within cctx)\n           or an error code if it fails (which can be tested using LZ4F_isError())\n  Note : LZ4F_flush() is guaranteed to be successful when dstCapacity >= LZ4F_compressBound(0, prefsPtr)."]
    pub fn LZ4F_flush(
        cctx: *mut LZ4F_cctx,
        dstBuffer: *mut ::std::os::raw::c_void,
        dstCapacity: usize,
        cOptPtr: *const LZ4F_compressOptions_t,
    ) -> usize;
}
extern "C" {
    #[doc = " LZ4F_compressEnd() :\n  To properly finish an LZ4 frame, invoke LZ4F_compressEnd().\n  It will flush whatever data remained within `cctx` (like LZ4_flush())\n  and properly finalize the frame, with an endMark and a checksum.\n `cOptPtr` is optional : NULL can be provided, in which case all options will be set to default.\n @return : nb of bytes written into dstBuffer, necessarily >= 4 (endMark),\n           or an error code if it fails (which can be tested using LZ4F_isError())\n  Note : LZ4F_compressEnd() is guaranteed to be successful when dstCapacity >= LZ4F_compressBound(0, prefsPtr).\n  A successful call to LZ4F_compressEnd() makes `cctx` available again for another compression task."]
    pub fn LZ4F_compressEnd(
        cctx: *mut LZ4F_cctx,
        dstBuffer: *mut ::std::os::raw::c_void,
        dstCapacity: usize,
        cOptPtr: *const LZ4F_compressOptions_t,
    ) -> usize;
}
pub type LZ4F_dctx = LZ4F_dctx_s;
pub type LZ4F_decompressionContext_t = *mut LZ4F_dctx;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LZ4F_decompressOptions_t {
    pub stableDst: ::std::os::raw::c_uint,
    pub skipChecksums: ::std::os::raw::c_uint,
    pub reserved1: ::std::os::raw::c_uint,
    pub reserved0: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_LZ4F_decompressOptions_t() {
    const UNINIT: ::std::mem::MaybeUninit<LZ4F_decompressOptions_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LZ4F_decompressOptions_t>(),
        16usize,
        concat!("Size of: ", stringify!(LZ4F_decompressOptions_t))
    );
    assert_eq!(
        ::std::mem::align_of::<LZ4F_decompressOptions_t>(),
        4usize,
        concat!("Alignment of ", stringify!(LZ4F_decompressOptions_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stableDst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_decompressOptions_t),
            "::",
            stringify!(stableDst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skipChecksums) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_decompressOptions_t),
            "::",
            stringify!(skipChecksums)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_decompressOptions_t),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved0) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_decompressOptions_t),
            "::",
            stringify!(reserved0)
        )
    );
}
extern "C" {
    #[doc = " LZ4F_createDecompressionContext() :\n  Create an LZ4F_dctx object, to track all decompression operations.\n  @version provided MUST be LZ4F_VERSION.\n  @dctxPtr MUST be valid.\n  The function fills @dctxPtr with the value of a pointer to an allocated and initialized LZ4F_dctx object.\n  The @return is an errorCode, which can be tested using LZ4F_isError().\n  dctx memory can be released using LZ4F_freeDecompressionContext();\n  Result of LZ4F_freeDecompressionContext() indicates current state of decompressionContext when being released.\n  That is, it should be == 0 if decompression has been completed fully and correctly."]
    pub fn LZ4F_createDecompressionContext(
        dctxPtr: *mut *mut LZ4F_dctx,
        version: ::std::os::raw::c_uint,
    ) -> LZ4F_errorCode_t;
}
extern "C" {
    pub fn LZ4F_freeDecompressionContext(dctx: *mut LZ4F_dctx) -> LZ4F_errorCode_t;
}
extern "C" {
    #[doc = " LZ4F_headerSize() : v1.9.0+\n  Provide the header size of a frame starting at `src`.\n `srcSize` must be >= LZ4F_MIN_SIZE_TO_KNOW_HEADER_LENGTH,\n  which is enough to decode the header length.\n @return : size of frame header\n           or an error code, which can be tested using LZ4F_isError()\n  note : Frame header size is variable, but is guaranteed to be\n         >= LZ4F_HEADER_SIZE_MIN bytes, and <= LZ4F_HEADER_SIZE_MAX bytes."]
    pub fn LZ4F_headerSize(src: *const ::std::os::raw::c_void, srcSize: usize) -> usize;
}
extern "C" {
    #[doc = " LZ4F_getFrameInfo() :\n  This function extracts frame parameters (max blockSize, dictID, etc.).\n  Its usage is optional: user can also invoke LZ4F_decompress() directly.\n\n  Extracted information will fill an existing LZ4F_frameInfo_t structure.\n  This can be useful for allocation and dictionary identification purposes.\n\n  LZ4F_getFrameInfo() can work in the following situations :\n\n  1) At the beginning of a new frame, before any invocation of LZ4F_decompress().\n     It will decode header from `srcBuffer`,\n     consuming the header and starting the decoding process.\n\n     Input size must be large enough to contain the full frame header.\n     Frame header size can be known beforehand by LZ4F_headerSize().\n     Frame header size is variable, but is guaranteed to be >= LZ4F_HEADER_SIZE_MIN bytes,\n     and not more than <= LZ4F_HEADER_SIZE_MAX bytes.\n     Hence, blindly providing LZ4F_HEADER_SIZE_MAX bytes or more will always work.\n     It's allowed to provide more input data than the header size,\n     LZ4F_getFrameInfo() will only consume the header.\n\n     If input size is not large enough,\n     aka if it's smaller than header size,\n     function will fail and return an error code.\n\n  2) After decoding has been started,\n     it's possible to invoke LZ4F_getFrameInfo() anytime\n     to extract already decoded frame parameters stored within dctx.\n\n     Note that, if decoding has barely started,\n     and not yet read enough information to decode the header,\n     LZ4F_getFrameInfo() will fail.\n\n  The number of bytes consumed from srcBuffer will be updated in *srcSizePtr (necessarily <= original value).\n  LZ4F_getFrameInfo() only consumes bytes when decoding has not yet started,\n  and when decoding the header has been successful.\n  Decompression must then resume from (srcBuffer + *srcSizePtr).\n\n @return : a hint about how many srcSize bytes LZ4F_decompress() expects for next call,\n           or an error code which can be tested using LZ4F_isError().\n  note 1 : in case of error, dctx is not modified. Decoding operation can resume from beginning safely.\n  note 2 : frame parameters are *copied into* an already allocated LZ4F_frameInfo_t structure."]
    pub fn LZ4F_getFrameInfo(
        dctx: *mut LZ4F_dctx,
        frameInfoPtr: *mut LZ4F_frameInfo_t,
        srcBuffer: *const ::std::os::raw::c_void,
        srcSizePtr: *mut usize,
    ) -> usize;
}
extern "C" {
    #[doc = " LZ4F_decompress() :\n  Call this function repetitively to regenerate data compressed in `srcBuffer`.\n\n  The function requires a valid dctx state.\n  It will read up to *srcSizePtr bytes from srcBuffer,\n  and decompress data into dstBuffer, of capacity *dstSizePtr.\n\n  The nb of bytes consumed from srcBuffer will be written into *srcSizePtr (necessarily <= original value).\n  The nb of bytes decompressed into dstBuffer will be written into *dstSizePtr (necessarily <= original value).\n\n  The function does not necessarily read all input bytes, so always check value in *srcSizePtr.\n  Unconsumed source data must be presented again in subsequent invocations.\n\n `dstBuffer` can freely change between each consecutive function invocation.\n `dstBuffer` content will be overwritten.\n\n @return : an hint of how many `srcSize` bytes LZ4F_decompress() expects for next call.\n  Schematically, it's the size of the current (or remaining) compressed block + header of next block.\n  Respecting the hint provides some small speed benefit, because it skips intermediate buffers.\n  This is just a hint though, it's always possible to provide any srcSize.\n\n  When a frame is fully decoded, @return will be 0 (no more data expected).\n  When provided with more bytes than necessary to decode a frame,\n  LZ4F_decompress() will stop reading exactly at end of current frame, and @return 0.\n\n  If decompression failed, @return is an error code, which can be tested using LZ4F_isError().\n  After a decompression error, the `dctx` context is not resumable.\n  Use LZ4F_resetDecompressionContext() to return to clean state.\n\n  After a frame is fully decoded, dctx can be used again to decompress another frame."]
    pub fn LZ4F_decompress(
        dctx: *mut LZ4F_dctx,
        dstBuffer: *mut ::std::os::raw::c_void,
        dstSizePtr: *mut usize,
        srcBuffer: *const ::std::os::raw::c_void,
        srcSizePtr: *mut usize,
        dOptPtr: *const LZ4F_decompressOptions_t,
    ) -> usize;
}
extern "C" {
    #[doc = " LZ4F_resetDecompressionContext() : added in v1.8.0\n  In case of an error, the context is left in \"undefined\" state.\n  In which case, it's necessary to reset it, before re-using it.\n  This method can also be used to abruptly stop any unfinished decompression,\n  and start a new one using same context resources."]
    pub fn LZ4F_resetDecompressionContext(dctx: *mut LZ4F_dctx);
}
pub const LZ4F_errorCodes_LZ4F_OK_NoError: LZ4F_errorCodes = 0;
pub const LZ4F_errorCodes_LZ4F_ERROR_GENERIC: LZ4F_errorCodes = 1;
pub const LZ4F_errorCodes_LZ4F_ERROR_maxBlockSize_invalid: LZ4F_errorCodes = 2;
pub const LZ4F_errorCodes_LZ4F_ERROR_blockMode_invalid: LZ4F_errorCodes = 3;
pub const LZ4F_errorCodes_LZ4F_ERROR_contentChecksumFlag_invalid: LZ4F_errorCodes = 4;
pub const LZ4F_errorCodes_LZ4F_ERROR_compressionLevel_invalid: LZ4F_errorCodes = 5;
pub const LZ4F_errorCodes_LZ4F_ERROR_headerVersion_wrong: LZ4F_errorCodes = 6;
pub const LZ4F_errorCodes_LZ4F_ERROR_blockChecksum_invalid: LZ4F_errorCodes = 7;
pub const LZ4F_errorCodes_LZ4F_ERROR_reservedFlag_set: LZ4F_errorCodes = 8;
pub const LZ4F_errorCodes_LZ4F_ERROR_allocation_failed: LZ4F_errorCodes = 9;
pub const LZ4F_errorCodes_LZ4F_ERROR_srcSize_tooLarge: LZ4F_errorCodes = 10;
pub const LZ4F_errorCodes_LZ4F_ERROR_dstMaxSize_tooSmall: LZ4F_errorCodes = 11;
pub const LZ4F_errorCodes_LZ4F_ERROR_frameHeader_incomplete: LZ4F_errorCodes = 12;
pub const LZ4F_errorCodes_LZ4F_ERROR_frameType_unknown: LZ4F_errorCodes = 13;
pub const LZ4F_errorCodes_LZ4F_ERROR_frameSize_wrong: LZ4F_errorCodes = 14;
pub const LZ4F_errorCodes_LZ4F_ERROR_srcPtr_wrong: LZ4F_errorCodes = 15;
pub const LZ4F_errorCodes_LZ4F_ERROR_decompressionFailed: LZ4F_errorCodes = 16;
pub const LZ4F_errorCodes_LZ4F_ERROR_headerChecksum_invalid: LZ4F_errorCodes = 17;
pub const LZ4F_errorCodes_LZ4F_ERROR_contentChecksum_invalid: LZ4F_errorCodes = 18;
pub const LZ4F_errorCodes_LZ4F_ERROR_frameDecoding_alreadyStarted: LZ4F_errorCodes = 19;
pub const LZ4F_errorCodes_LZ4F_ERROR_compressionState_uninitialized: LZ4F_errorCodes = 20;
pub const LZ4F_errorCodes_LZ4F_ERROR_parameter_null: LZ4F_errorCodes = 21;
pub const LZ4F_errorCodes_LZ4F_ERROR_maxCode: LZ4F_errorCodes = 22;
pub const LZ4F_errorCodes__LZ4F_dummy_error_enum_for_c89_never_used: LZ4F_errorCodes = 23;
pub type LZ4F_errorCodes = ::std::os::raw::c_int;
extern "C" {
    pub fn LZ4F_getErrorCode(functionResult: usize) -> LZ4F_errorCodes;
}
extern "C" {
    #[doc = " LZ4F_getBlockSize() :\n  Return, in scalar format (size_t),\n  the maximum block size associated with blockSizeID."]
    pub fn LZ4F_getBlockSize(blockSizeID: LZ4F_blockSizeID_t) -> usize;
}
extern "C" {
    #[doc = " LZ4F_uncompressedUpdate() :\n  LZ4F_uncompressedUpdate() can be called repetitively to add as much data uncompressed data as necessary.\n  Important rule: dstCapacity MUST be large enough to store the entire source buffer as\n  no compression is done for this operation\n  If this condition is not respected, LZ4F_uncompressedUpdate() will fail (result is an errorCode).\n  After an error, the state is left in a UB state, and must be re-initialized or freed.\n  If previously a compressed block was written, buffered data is flushed\n  before appending uncompressed data is continued.\n  This is only supported when LZ4F_blockIndependent is used\n `cOptPtr` is optional : NULL can be provided, in which case all options are set to default.\n @return : number of bytes written into `dstBuffer` (it can be zero, meaning input data was just buffered).\n           or an error code if it fails (which can be tested using LZ4F_isError())"]
    pub fn LZ4F_uncompressedUpdate(
        cctx: *mut LZ4F_cctx,
        dstBuffer: *mut ::std::os::raw::c_void,
        dstCapacity: usize,
        srcBuffer: *const ::std::os::raw::c_void,
        srcSize: usize,
        cOptPtr: *const LZ4F_compressOptions_t,
    ) -> usize;
}
#[doc = "  Bulk processing dictionary API"]
pub type LZ4F_CDict = LZ4F_CDict_s;
extern "C" {
    #[doc = " LZ4_createCDict() :\n  When compressing multiple messages / blocks using the same dictionary, it's recommended to load it just once.\n  LZ4_createCDict() will create a digested dictionary, ready to start future compression operations without startup delay.\n  LZ4_CDict can be created once and shared by multiple threads concurrently, since its usage is read-only.\n `dictBuffer` can be released after LZ4_CDict creation, since its content is copied within CDict"]
    pub fn LZ4F_createCDict(
        dictBuffer: *const ::std::os::raw::c_void,
        dictSize: usize,
    ) -> *mut LZ4F_CDict;
}
extern "C" {
    pub fn LZ4F_freeCDict(CDict: *mut LZ4F_CDict);
}
extern "C" {
    #[doc = " LZ4_compressFrame_usingCDict() :\n  Compress an entire srcBuffer into a valid LZ4 frame using a digested Dictionary.\n  cctx must point to a context created by LZ4F_createCompressionContext().\n  If cdict==NULL, compress without a dictionary.\n  dstBuffer MUST be >= LZ4F_compressFrameBound(srcSize, preferencesPtr).\n  If this condition is not respected, function will fail (@return an errorCode).\n  The LZ4F_preferences_t structure is optional : you may provide NULL as argument,\n  but it's not recommended, as it's the only way to provide dictID in the frame header.\n @return : number of bytes written into dstBuffer.\n           or an error code if it fails (can be tested using LZ4F_isError())"]
    pub fn LZ4F_compressFrame_usingCDict(
        cctx: *mut LZ4F_cctx,
        dst: *mut ::std::os::raw::c_void,
        dstCapacity: usize,
        src: *const ::std::os::raw::c_void,
        srcSize: usize,
        cdict: *const LZ4F_CDict,
        preferencesPtr: *const LZ4F_preferences_t,
    ) -> usize;
}
extern "C" {
    #[doc = " LZ4F_compressBegin_usingCDict() :\n  Inits streaming dictionary compression, and writes the frame header into dstBuffer.\n  dstCapacity must be >= LZ4F_HEADER_SIZE_MAX bytes.\n `prefsPtr` is optional : you may provide NULL as argument,\n  however, it's the only way to provide dictID in the frame header.\n @return : number of bytes written into dstBuffer for the header,\n           or an error code (which can be tested using LZ4F_isError())"]
    pub fn LZ4F_compressBegin_usingCDict(
        cctx: *mut LZ4F_cctx,
        dstBuffer: *mut ::std::os::raw::c_void,
        dstCapacity: usize,
        cdict: *const LZ4F_CDict,
        prefsPtr: *const LZ4F_preferences_t,
    ) -> usize;
}
extern "C" {
    #[doc = " LZ4F_decompress_usingDict() :\n  Same as LZ4F_decompress(), using a predefined dictionary.\n  Dictionary is used \"in place\", without any preprocessing.\n  It must remain accessible throughout the entire frame decoding."]
    pub fn LZ4F_decompress_usingDict(
        dctxPtr: *mut LZ4F_dctx,
        dstBuffer: *mut ::std::os::raw::c_void,
        dstSizePtr: *mut usize,
        srcBuffer: *const ::std::os::raw::c_void,
        srcSizePtr: *mut usize,
        dict: *const ::std::os::raw::c_void,
        dictSize: usize,
        decompressOptionsPtr: *const LZ4F_decompressOptions_t,
    ) -> usize;
}
#[doc = " Custom memory allocation :\n  These prototypes make it possible to pass custom allocation/free functions.\n  LZ4F_customMem is provided at state creation time, using LZ4F_create*_advanced() listed below.\n  All allocation/free operations will be completed using these custom variants instead of regular <stdlib.h> ones."]
pub type LZ4F_AllocFunction = ::std::option::Option<
    unsafe extern "C" fn(
        opaqueState: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type LZ4F_CallocFunction = ::std::option::Option<
    unsafe extern "C" fn(
        opaqueState: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type LZ4F_FreeFunction = ::std::option::Option<
    unsafe extern "C" fn(
        opaqueState: *mut ::std::os::raw::c_void,
        address: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LZ4F_CustomMem {
    pub customAlloc: LZ4F_AllocFunction,
    pub customCalloc: LZ4F_CallocFunction,
    pub customFree: LZ4F_FreeFunction,
    pub opaqueState: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_LZ4F_CustomMem() {
    const UNINIT: ::std::mem::MaybeUninit<LZ4F_CustomMem> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LZ4F_CustomMem>(),
        32usize,
        concat!("Size of: ", stringify!(LZ4F_CustomMem))
    );
    assert_eq!(
        ::std::mem::align_of::<LZ4F_CustomMem>(),
        8usize,
        concat!("Alignment of ", stringify!(LZ4F_CustomMem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).customAlloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_CustomMem),
            "::",
            stringify!(customAlloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).customCalloc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_CustomMem),
            "::",
            stringify!(customCalloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).customFree) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_CustomMem),
            "::",
            stringify!(customFree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opaqueState) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_CustomMem),
            "::",
            stringify!(opaqueState)
        )
    );
}
extern "C" {
    #[doc = "< this constant defers to stdlib's functions"]
    pub static LZ4F_defaultCMem: LZ4F_CustomMem;
}
extern "C" {
    pub fn LZ4F_createCompressionContext_advanced(
        customMem: LZ4F_CustomMem,
        version: ::std::os::raw::c_uint,
    ) -> *mut LZ4F_cctx;
}
extern "C" {
    pub fn LZ4F_createDecompressionContext_advanced(
        customMem: LZ4F_CustomMem,
        version: ::std::os::raw::c_uint,
    ) -> *mut LZ4F_dctx;
}
extern "C" {
    pub fn LZ4F_createCDict_advanced(
        customMem: LZ4F_CustomMem,
        dictBuffer: *const ::std::os::raw::c_void,
        dictSize: usize,
    ) -> *mut LZ4F_CDict;
}
pub const XXH_errorcode_XXH_OK: XXH_errorcode = 0;
pub const XXH_errorcode_XXH_ERROR: XXH_errorcode = 1;
pub type XXH_errorcode = ::std::os::raw::c_int;
extern "C" {
    pub fn XXH_versionNumber() -> ::std::os::raw::c_uint;
}
pub type XXH32_hash_t = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " XXH32() :\nCalculate the 32-bit hash of sequence \"length\" bytes stored at memory address \"input\".\nThe memory between input & input+length must be valid (allocated and read-accessible).\n\"seed\" can be used to alter the result predictably.\nSpeed on Core 2 Duo @ 3 GHz (single thread, SMHasher benchmark) : 5.4 GB/s"]
    pub fn XXH32(
        input: *const ::std::os::raw::c_void,
        length: usize,
        seed: ::std::os::raw::c_uint,
    ) -> XXH32_hash_t;
}
pub type XXH32_state_t = XXH32_state_s;
extern "C" {
    pub fn XXH32_createState() -> *mut XXH32_state_t;
}
extern "C" {
    pub fn XXH32_freeState(statePtr: *mut XXH32_state_t) -> XXH_errorcode;
}
extern "C" {
    pub fn XXH32_copyState(dst_state: *mut XXH32_state_t, src_state: *const XXH32_state_t);
}
extern "C" {
    pub fn XXH32_reset(statePtr: *mut XXH32_state_t, seed: ::std::os::raw::c_uint)
        -> XXH_errorcode;
}
extern "C" {
    pub fn XXH32_update(
        statePtr: *mut XXH32_state_t,
        input: *const ::std::os::raw::c_void,
        length: usize,
    ) -> XXH_errorcode;
}
extern "C" {
    pub fn XXH32_digest(statePtr: *const XXH32_state_t) -> XXH32_hash_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XXH32_canonical_t {
    pub digest: [::std::os::raw::c_uchar; 4usize],
}
#[test]
fn bindgen_test_layout_XXH32_canonical_t() {
    const UNINIT: ::std::mem::MaybeUninit<XXH32_canonical_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XXH32_canonical_t>(),
        4usize,
        concat!("Size of: ", stringify!(XXH32_canonical_t))
    );
    assert_eq!(
        ::std::mem::align_of::<XXH32_canonical_t>(),
        1usize,
        concat!("Alignment of ", stringify!(XXH32_canonical_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).digest) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XXH32_canonical_t),
            "::",
            stringify!(digest)
        )
    );
}
extern "C" {
    #[doc = " Default XXH result types are basic unsigned 32 and 64 bits.\n   The canonical representation follows human-readable write convention, aka big-endian (large digits first).\n   These functions allow transformation of hash result into and from its canonical format.\n   This way, hash values can be written into a file or buffer, remaining comparable across different systems."]
    pub fn XXH32_canonicalFromHash(dst: *mut XXH32_canonical_t, hash: XXH32_hash_t);
}
extern "C" {
    pub fn XXH32_hashFromCanonical(src: *const XXH32_canonical_t) -> XXH32_hash_t;
}
pub type XXH64_hash_t = ::std::os::raw::c_ulonglong;
extern "C" {
    #[doc = " XXH64() :\nCalculate the 64-bit hash of sequence of length \"len\" stored at memory address \"input\".\n\"seed\" can be used to alter the result predictably.\nThis function runs faster on 64-bit systems, but slower on 32-bit systems (see benchmark)."]
    pub fn XXH64(
        input: *const ::std::os::raw::c_void,
        length: usize,
        seed: ::std::os::raw::c_ulonglong,
    ) -> XXH64_hash_t;
}
pub type XXH64_state_t = XXH64_state_s;
extern "C" {
    pub fn XXH64_createState() -> *mut XXH64_state_t;
}
extern "C" {
    pub fn XXH64_freeState(statePtr: *mut XXH64_state_t) -> XXH_errorcode;
}
extern "C" {
    pub fn XXH64_copyState(dst_state: *mut XXH64_state_t, src_state: *const XXH64_state_t);
}
extern "C" {
    pub fn XXH64_reset(
        statePtr: *mut XXH64_state_t,
        seed: ::std::os::raw::c_ulonglong,
    ) -> XXH_errorcode;
}
extern "C" {
    pub fn XXH64_update(
        statePtr: *mut XXH64_state_t,
        input: *const ::std::os::raw::c_void,
        length: usize,
    ) -> XXH_errorcode;
}
extern "C" {
    pub fn XXH64_digest(statePtr: *const XXH64_state_t) -> XXH64_hash_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XXH64_canonical_t {
    pub digest: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_XXH64_canonical_t() {
    const UNINIT: ::std::mem::MaybeUninit<XXH64_canonical_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XXH64_canonical_t>(),
        8usize,
        concat!("Size of: ", stringify!(XXH64_canonical_t))
    );
    assert_eq!(
        ::std::mem::align_of::<XXH64_canonical_t>(),
        1usize,
        concat!("Alignment of ", stringify!(XXH64_canonical_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).digest) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XXH64_canonical_t),
            "::",
            stringify!(digest)
        )
    );
}
extern "C" {
    pub fn XXH64_canonicalFromHash(dst: *mut XXH64_canonical_t, hash: XXH64_hash_t);
}
extern "C" {
    pub fn XXH64_hashFromCanonical(src: *const XXH64_canonical_t) -> XXH64_hash_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XXH32_state_s {
    pub total_len_32: u32,
    pub large_len: u32,
    pub v1: u32,
    pub v2: u32,
    pub v3: u32,
    pub v4: u32,
    pub mem32: [u32; 4usize],
    pub memsize: u32,
    pub reserved: u32,
}
#[test]
fn bindgen_test_layout_XXH32_state_s() {
    const UNINIT: ::std::mem::MaybeUninit<XXH32_state_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XXH32_state_s>(),
        48usize,
        concat!("Size of: ", stringify!(XXH32_state_s))
    );
    assert_eq!(
        ::std::mem::align_of::<XXH32_state_s>(),
        4usize,
        concat!("Alignment of ", stringify!(XXH32_state_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_len_32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XXH32_state_s),
            "::",
            stringify!(total_len_32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).large_len) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XXH32_state_s),
            "::",
            stringify!(large_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XXH32_state_s),
            "::",
            stringify!(v1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XXH32_state_s),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XXH32_state_s),
            "::",
            stringify!(v3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XXH32_state_s),
            "::",
            stringify!(v4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem32) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XXH32_state_s),
            "::",
            stringify!(mem32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memsize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XXH32_state_s),
            "::",
            stringify!(memsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XXH32_state_s),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XXH64_state_s {
    pub total_len: u64,
    pub v1: u64,
    pub v2: u64,
    pub v3: u64,
    pub v4: u64,
    pub mem64: [u64; 4usize],
    pub memsize: u32,
    pub reserved: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_XXH64_state_s() {
    const UNINIT: ::std::mem::MaybeUninit<XXH64_state_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XXH64_state_s>(),
        88usize,
        concat!("Size of: ", stringify!(XXH64_state_s))
    );
    assert_eq!(
        ::std::mem::align_of::<XXH64_state_s>(),
        8usize,
        concat!("Alignment of ", stringify!(XXH64_state_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XXH64_state_s),
            "::",
            stringify!(total_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XXH64_state_s),
            "::",
            stringify!(v1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XXH64_state_s),
            "::",
            stringify!(v2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XXH64_state_s),
            "::",
            stringify!(v3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XXH64_state_s),
            "::",
            stringify!(v4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem64) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XXH64_state_s),
            "::",
            stringify!(mem64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memsize) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XXH64_state_s),
            "::",
            stringify!(memsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(XXH64_state_s),
            "::",
            stringify!(reserved)
        )
    );
}
pub const minFHSize: usize = 7;
pub const maxFHSize: usize = 19;
pub const BHSize: usize = 4;
pub const BFSize: usize = 4;
pub const LZ4F_blockCompression_t_LZ4B_COMPRESSED: LZ4F_blockCompression_t = 0;
pub const LZ4F_blockCompression_t_LZ4B_UNCOMPRESSED: LZ4F_blockCompression_t = 1;
pub type LZ4F_blockCompression_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LZ4F_cctx_s {
    pub cmem: LZ4F_CustomMem,
    pub prefs: LZ4F_preferences_t,
    pub version: U32,
    pub cStage: U32,
    pub cdict: *const LZ4F_CDict,
    pub maxBlockSize: usize,
    pub maxBufferSize: usize,
    pub tmpBuff: *mut BYTE,
    pub tmpIn: *mut BYTE,
    pub tmpInSize: usize,
    pub totalInSize: U64,
    pub xxh: XXH32_state_t,
    pub lz4CtxPtr: *mut ::std::os::raw::c_void,
    pub lz4CtxAlloc: U16,
    pub lz4CtxState: U16,
    pub blockCompression: LZ4F_blockCompression_t,
}
#[test]
fn bindgen_test_layout_LZ4F_cctx_s() {
    const UNINIT: ::std::mem::MaybeUninit<LZ4F_cctx_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LZ4F_cctx_s>(),
        216usize,
        concat!("Size of: ", stringify!(LZ4F_cctx_s))
    );
    assert_eq!(
        ::std::mem::align_of::<LZ4F_cctx_s>(),
        8usize,
        concat!("Alignment of ", stringify!(LZ4F_cctx_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmem) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_cctx_s),
            "::",
            stringify!(cmem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prefs) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_cctx_s),
            "::",
            stringify!(prefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_cctx_s),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cStage) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_cctx_s),
            "::",
            stringify!(cStage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdict) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_cctx_s),
            "::",
            stringify!(cdict)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxBlockSize) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_cctx_s),
            "::",
            stringify!(maxBlockSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxBufferSize) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_cctx_s),
            "::",
            stringify!(maxBufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmpBuff) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_cctx_s),
            "::",
            stringify!(tmpBuff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmpIn) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_cctx_s),
            "::",
            stringify!(tmpIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmpInSize) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_cctx_s),
            "::",
            stringify!(tmpInSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalInSize) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_cctx_s),
            "::",
            stringify!(totalInSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xxh) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_cctx_s),
            "::",
            stringify!(xxh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lz4CtxPtr) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_cctx_s),
            "::",
            stringify!(lz4CtxPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lz4CtxAlloc) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_cctx_s),
            "::",
            stringify!(lz4CtxAlloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lz4CtxState) as usize - ptr as usize },
        210usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_cctx_s),
            "::",
            stringify!(lz4CtxState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockCompression) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_cctx_s),
            "::",
            stringify!(blockCompression)
        )
    );
}
pub type LZ4F_cctx_t = LZ4F_cctx_s;
extern "C" {
    pub static mut LZ4F_errorStrings: [*const ::std::os::raw::c_char; 23usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LZ4F_CDict_s {
    pub cmem: LZ4F_CustomMem,
    pub dictContent: *mut ::std::os::raw::c_void,
    pub fastCtx: *mut LZ4_stream_t,
    pub HCCtx: *mut LZ4_streamHC_t,
}
#[test]
fn bindgen_test_layout_LZ4F_CDict_s() {
    const UNINIT: ::std::mem::MaybeUninit<LZ4F_CDict_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LZ4F_CDict_s>(),
        56usize,
        concat!("Size of: ", stringify!(LZ4F_CDict_s))
    );
    assert_eq!(
        ::std::mem::align_of::<LZ4F_CDict_s>(),
        8usize,
        concat!("Alignment of ", stringify!(LZ4F_CDict_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmem) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_CDict_s),
            "::",
            stringify!(cmem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dictContent) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_CDict_s),
            "::",
            stringify!(dictContent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fastCtx) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_CDict_s),
            "::",
            stringify!(fastCtx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HCCtx) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_CDict_s),
            "::",
            stringify!(HCCtx)
        )
    );
}
pub type compressFunc_t = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        srcSize: ::std::os::raw::c_int,
        dstSize: ::std::os::raw::c_int,
        level: ::std::os::raw::c_int,
        cdict: *const LZ4F_CDict,
    ) -> ::std::os::raw::c_int,
>;
pub const LZ4F_lastBlockStatus_notDone: LZ4F_lastBlockStatus = 0;
pub const LZ4F_lastBlockStatus_fromTmpBuffer: LZ4F_lastBlockStatus = 1;
pub const LZ4F_lastBlockStatus_fromSrcBuffer: LZ4F_lastBlockStatus = 2;
pub type LZ4F_lastBlockStatus = ::std::os::raw::c_int;
extern "C" {
    pub static k_cOptionsNull: LZ4F_compressOptions_t;
}
pub const dStage_t_dstage_getFrameHeader: dStage_t = 0;
pub const dStage_t_dstage_storeFrameHeader: dStage_t = 1;
pub const dStage_t_dstage_init: dStage_t = 2;
pub const dStage_t_dstage_getBlockHeader: dStage_t = 3;
pub const dStage_t_dstage_storeBlockHeader: dStage_t = 4;
pub const dStage_t_dstage_copyDirect: dStage_t = 5;
pub const dStage_t_dstage_getBlockChecksum: dStage_t = 6;
pub const dStage_t_dstage_getCBlock: dStage_t = 7;
pub const dStage_t_dstage_storeCBlock: dStage_t = 8;
pub const dStage_t_dstage_flushOut: dStage_t = 9;
pub const dStage_t_dstage_getSuffix: dStage_t = 10;
pub const dStage_t_dstage_storeSuffix: dStage_t = 11;
pub const dStage_t_dstage_getSFrameSize: dStage_t = 12;
pub const dStage_t_dstage_storeSFrameSize: dStage_t = 13;
pub const dStage_t_dstage_skipSkippable: dStage_t = 14;
pub type dStage_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LZ4F_dctx_s {
    pub cmem: LZ4F_CustomMem,
    pub frameInfo: LZ4F_frameInfo_t,
    pub version: U32,
    pub dStage: dStage_t,
    pub frameRemainingSize: U64,
    pub maxBlockSize: usize,
    pub maxBufferSize: usize,
    pub tmpIn: *mut BYTE,
    pub tmpInSize: usize,
    pub tmpInTarget: usize,
    pub tmpOutBuffer: *mut BYTE,
    pub dict: *const BYTE,
    pub dictSize: usize,
    pub tmpOut: *mut BYTE,
    pub tmpOutSize: usize,
    pub tmpOutStart: usize,
    pub xxh: XXH32_state_t,
    pub blockChecksum: XXH32_state_t,
    pub skipChecksum: ::std::os::raw::c_int,
    pub header: [BYTE; 19usize],
}
#[test]
fn bindgen_test_layout_LZ4F_dctx_s() {
    const UNINIT: ::std::mem::MaybeUninit<LZ4F_dctx_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LZ4F_dctx_s>(),
        288usize,
        concat!("Size of: ", stringify!(LZ4F_dctx_s))
    );
    assert_eq!(
        ::std::mem::align_of::<LZ4F_dctx_s>(),
        8usize,
        concat!("Alignment of ", stringify!(LZ4F_dctx_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmem) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_dctx_s),
            "::",
            stringify!(cmem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frameInfo) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_dctx_s),
            "::",
            stringify!(frameInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_dctx_s),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dStage) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_dctx_s),
            "::",
            stringify!(dStage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frameRemainingSize) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_dctx_s),
            "::",
            stringify!(frameRemainingSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxBlockSize) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_dctx_s),
            "::",
            stringify!(maxBlockSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxBufferSize) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_dctx_s),
            "::",
            stringify!(maxBufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmpIn) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_dctx_s),
            "::",
            stringify!(tmpIn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmpInSize) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_dctx_s),
            "::",
            stringify!(tmpInSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmpInTarget) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_dctx_s),
            "::",
            stringify!(tmpInTarget)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmpOutBuffer) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_dctx_s),
            "::",
            stringify!(tmpOutBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dict) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_dctx_s),
            "::",
            stringify!(dict)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dictSize) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_dctx_s),
            "::",
            stringify!(dictSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmpOut) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_dctx_s),
            "::",
            stringify!(tmpOut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmpOutSize) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_dctx_s),
            "::",
            stringify!(tmpOutSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmpOutStart) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_dctx_s),
            "::",
            stringify!(tmpOutStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xxh) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_dctx_s),
            "::",
            stringify!(xxh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blockChecksum) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_dctx_s),
            "::",
            stringify!(blockChecksum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skipChecksum) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_dctx_s),
            "::",
            stringify!(skipChecksum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(LZ4F_dctx_s),
            "::",
            stringify!(header)
        )
    );
}
extern "C" {
    pub fn _wassert(_Message: *const wchar_t, _File: *const wchar_t, _Line: ::std::os::raw::c_uint);
}
pub const XXH_endianess_XXH_bigEndian: XXH_endianess = 0;
pub const XXH_endianess_XXH_littleEndian: XXH_endianess = 1;
pub type XXH_endianess = ::std::os::raw::c_int;
pub const XXH_alignment_XXH_aligned: XXH_alignment = 0;
pub const XXH_alignment_XXH_unaligned: XXH_alignment = 1;
pub type XXH_alignment = ::std::os::raw::c_int;
pub const PRIME32_1: U32 = 2654435761;
pub const PRIME32_2: U32 = 2246822519;
pub const PRIME32_3: U32 = 3266489917;
pub const PRIME32_4: U32 = 668265263;
pub const PRIME32_5: U32 = 374761393;
pub const PRIME64_1: U64 = 11400714785074694791;
pub const PRIME64_2: U64 = 14029467366897019727;
pub const PRIME64_3: U64 = 1609587929392839161;
pub const PRIME64_4: U64 = 9650029242287828579;
pub const PRIME64_5: U64 = 2870177450012600261;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
